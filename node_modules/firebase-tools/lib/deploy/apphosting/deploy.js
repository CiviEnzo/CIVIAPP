"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const error_1 = require("../../error");
const gcs = require("../../gcp/storage");
const getProjectNumber_1 = require("../../getProjectNumber");
const projectUtils_1 = require("../../projectUtils");
const utils_1 = require("../../utils");
const util_1 = require("./util");
async function default_1(context, options) {
    if (Object.entries(context.backendConfigs).length === 0) {
        return;
    }
    const projectId = (0, projectUtils_1.needProjectId)(options);
    options.projectNumber = await (0, getProjectNumber_1.getProjectNumber)(options);
    if (!context.backendConfigs) {
        return;
    }
    await Promise.all(Object.values(context.backendLocations).map(async (loc) => {
        const bucketName = `firebaseapphosting-sources-${options.projectNumber}-${loc.toLowerCase()}`;
        await gcs.upsertBucket({
            product: "apphosting",
            createMessage: `Creating Cloud Storage bucket in ${loc} to store App Hosting source code uploads at ${bucketName}...`,
            projectId,
            req: {
                name: bucketName,
                location: loc,
                lifecycle: {
                    rule: [
                        {
                            action: {
                                type: "Delete",
                            },
                            condition: {
                                age: 30,
                            },
                        },
                    ],
                },
            },
        });
    }));
    await Promise.all(Object.values(context.backendConfigs).map(async (cfg) => {
        const projectSourcePath = options.projectRoot ? options.projectRoot : process.cwd();
        const zippedSourcePath = await (0, util_1.createArchive)(cfg, projectSourcePath);
        const backendLocation = context.backendLocations[cfg.backendId];
        if (!backendLocation) {
            throw new error_1.FirebaseError(`Failed to find location for backend ${cfg.backendId}. Please contact support with the contents of your firebase-debug.log to report your issue.`);
        }
        (0, utils_1.logLabeledBullet)("apphosting", `Uploading source code at ${projectSourcePath} for backend ${cfg.backendId}...`);
        const bucketName = `firebaseapphosting-sources-${options.projectNumber}-${backendLocation.toLowerCase()}`;
        const { bucket, object } = await gcs.uploadObject({
            file: zippedSourcePath,
            stream: fs.createReadStream(zippedSourcePath),
        }, bucketName);
        (0, utils_1.logLabeledBullet)("apphosting", `Source code uploaded at gs://${bucket}/${object}`);
        context.backendStorageUris[cfg.backendId] =
            `gs://${bucketName}/${path.basename(zippedSourcePath)}`;
    }));
}
exports.default = default_1;

Å%_layer
addToScenefindAnnotations_main_screenshotclipPath	clipRRectclipRectdrawArc	drawAtlas
drawCircle	drawColor
drawDRRect	drawImagedrawImageNinedrawImageRectdrawLinedrawOval	drawPaintdrawParagraphdrawPathdrawPicture
drawPoints	drawRRectdrawRawAtlasdrawRawPointsdrawRect
drawShadowdrawVerticesgetSaveCountrestorerotatesave	saveLayerscaleskew	transform	translatenoSuchMethodtargetcontainerLayerfoundTargetincludeInScreenshotincludeInRegularContextscreenshotOffsetdispose_data_screenshotCurrentLayer_screenshotRecorder_screenshotCanvas_multicastCanvascanvas_isScreenshotRecording_startRecordingScreenshotstopRecordingIfNeeded _stopRecordingScreenshotIfNeededappendLayercreateChildContext
paintChildtoImagenodechildren
childIndex_ref_valueidcountvalue_serializeRing_serializeRingIndexinstance	_instanceisSelectMode!_debugServiceExtensionsRegistered	selectionselectionChangedCallback_groups_idToReferenceData_objectToId_nextId_pubRootDirectories_isLocalCreationCache_trackRebuildDirtyWidgets_trackRepaintWidgetsregisterServiceExtension_registerSignalServiceExtension$_registerObjectGroupServiceExtension_registerBoolServiceExtension_postExtensionStateChangedEvent _registerServiceExtensionWithArg _registerServiceExtensionVarArgsforceRebuild_consoleObjectGroup_errorsSinceReload_reportStructuredError_resetErrorCountisStructuredErrorsEnabledinitServiceExtensions_clearStatsdisposeAllGroupsresetAllStatedisposeGroup_decrementReferenceCounttoIdisWidgetTreeReadytoObjecttoObjectForSourceLocation	disposeIdsetPubRootDirectoriesresetPubRootDirectoriesaddPubRootDirectoriesremovePubRootDirectoriespubRootDirectoriessetSelectionByIdsetSelection_sendInspectEvent_changeWidgetSelectionMode_devToolsInspectorUriForElementdevToolsInspectorUrigetParentChain_getParentChain_getRawElementParentChain_getElementParentChain_getRenderObjectParentChain_nodeToJson_isValueCreatedByLocalProject_isLocalCreationLocationImpl_isLocalCreationLocation_safeJsonEncode_truncateNodes_nodesToJsongetProperties_getPropertiesgetChildren_getChildrengetChildrenSummaryTree_idToDiagnosticsNodeobjectToDiagnosticsNode_getChildrenSummaryTreegetChildrenDetailsSubtree_getChildrenDetailsSubtree_shouldShowInSummaryTree_getChildrenFiltered_filterChildrengetRootWidget_getRootWidgetgetRootWidgetSummaryTree_getRootWidgetSummaryTree%_getRootWidgetSummaryTreeWithPreviews_getRootWidgetTree_getRootWidgetTreeImplgetDetailsSubtree_getDetailsSubtreegetSelectedWidget
screenshot_getLayoutExplorerNode_setFlexFit_setFlexFactor_setFlexProperties_toEnumEntry_getSelectedWidget!_getSelectedWidgetDiagnosticsNodegetSelectedSummaryWidget!_getSelectedSummaryWidgetLocation"_getSelectedSummaryDiagnosticsNode_getSelectedSummaryWidgetisWidgetCreationTracked_widgetCreationTracked_frameStart_frameNumber_onFrameStart_onFrameEnd_postStatsEvent	postEventinspect_rebuildStats_repaintStats_onRebuildWidget_onPaintperformReassemblelocallocation_countreset	increment_statsactivenewLocationsaddresetCountsexportToJsoncreateElementchild exitWidgetSelectionButtonBuilder$moveExitWidgetSelectionButtonBuildercreateState_lastPointerLocation_ignorePointerKey_edgeHitMargin	initState_selectionInformationChanged_hitTestHelperhitTest
_inspectAt_handlePanDown_handlePanUpdate_handlePanEnd
_handleTapbuild
candidates_candidatesindex_indexclearcurrent_currentcurrentElement_currentElement_computeCurrentcreateRenderObjectupdateRenderObject
_selectionsizedByParentalwaysNeedsCompositingcomputeDryLayoutpaintrect==hashCodeoverlayRectselectedtooltiptextDirectionrootRenderObject
_lastState_picture_textPainter_textPainterMaxWidth_buildPicture_paintDescription_isInInspectorRenderObjectTree"_kExitWidgetSelectionButtonPadding!_kExitWidgetSelectionButtonMargin_exitWidgetSelectionButtonKey_tooltipMessage_leftAligned_exitWidgetSelectionMode_changeButtonGroupAlignment_onTooltipHidden_changeTooltipMessagebuttononTooltipVisibleonTooltipHidden _tooltipShownOnLongPressDuration_tooltipDelayDuration_tooltipVisibleTimer_tooltipHiddenTimer_tooltipVisibleAfter_tooltipHiddenAfter_tooltipVisibilityChangedAftertooltipMessage	buttonKeyisLeftAlignedshouldRepaint	_locationfilelinecolumnname	toJsonMaptoStringservice	groupNamesummaryTreemaxDescendantsTruncatableNodeincludePropertiessubtreeDepthexpandPropertyValuesaddAdditionalPropertiesCallback_nodesCreatedByLocalProject_interactiveadditionalNodePropertiesdelegateForNodefilterChildrenfilterPropertiestruncateNodesListcopyWith_objects_primitives_isPrimitive[][]=remove< ExitWidgetSelectionButtonBuilder$MoveExitWidgetSelectionButtonBuilder RegisterServiceExtensionCallback_ProxyLayer_MulticastCanvas_calculateSubtreeBoundsHelper_calculateSubtreeBounds_ScreenshotContainerLayer_ScreenshotData_ScreenshotPaintingContext_DiagnosticsPathNode_followDiagnosticableChain!InspectorSelectionChangedCallbackInspectorReferenceData_WidgetInspectorServiceWidgetInspectorService_LocationCount_ElementLocationStatsTracker_WidgetForTypeTestsWidgetInspector_WidgetInspectorStateInspectorSelection_InspectorOverlay_RenderInspectorOverlay_TransformedRect_InspectorOverlayRenderState_kMaxTooltipLines_kTooltipBackgroundColor"_kHighlightedRenderObjectFillColor$_kHighlightedRenderObjectBorderColor_InspectorOverlayLayer_kScreenEdgeMargin_kTooltipPadding_kOffScreenMargin_messageStyle_ExitWidgetSelectionButtonGroup$_ExitWidgetSelectionButtonGroupState_TooltipGestureDetector_TooltipGestureDetectorState"_ExitWidgetSelectionTooltipPainter_HasCreationLocation	_Location_isDebugCreatordebugTransformDebugCreator_parseDiagnosticsNode_describeRelevantUserCodeDevToolsDeepLinkPropertydebugIsLocalCreationLocationdebugIsWidgetLocalCreation_describeCreationLocation_getObjectCreationLocation_getCreationLocation_locationToId
_locations_toLocationId_locationIdMapToJsonInspectorSerializationDelegate_WidgetFactorywidgetFactoryWeakMapÇáHashMapClipOpFlutterViewImageImageByteFormat	ParagraphPicturePictureRecorder	PointModeSceneBuilderVertices exitWidgetSelectionButtonBuilderWidgetBuildContextVoidCallback	GlobalKey$moveExitWidgetSelectionButtonBuilderboolinitServiceExtensionsBindingBaseregisterServiceExtensionvoidStringServiceExtensionCallbackLayeroverride
addToScene	protectedObjectAnnotationResultOffsetfindAnnotations	onlyFirstCanvasmain
screenshotPathclipPathdoAntiAliasRRect	clipRRectRect	intersectclipRectclipOpdoublePaintdrawArcListRSTransformColor	BlendMode	drawAtlas
drawCircle	drawColor
drawDRRect	drawImagedrawImageNinedrawImageRectdrawLinedrawOval	drawPaintdrawParagraphdrawPathdrawPicture
drawPoints	drawRRectFloat32List	Int32ListdrawRawAtlasdrawRawPointsdrawRect
drawShadowdrawVerticesintgetSaveCountrestorerotatesave	saveLayerscalesyskewFloat64List	transform	translatedynamic
InvocationnoSuchMethodRenderObjectMatrix4MatrixUtilstransformRectsemanticBoundsvisitChildrencloneapplyPaintTransformchilddescribeApproximatePaintClipisFiniteisEmptyexpandToIncludeidentityOffsetLayeraddChildrenToScene kFlutterMemoryAllocationsEnabledFlutterMemoryAllocationsinstancedispatchObjectCreatedlibrary	classNameobjectoffsetmustCallSuperdispatchObjectDisposeddisposePaintingContextRepaintBoundaryContainerLayerscreenshotDatacontainerLayerestimatedBoundsPictureLayerincludeInScreenshotincludeInRegularContextcanvasappendstopRecordingIfNeededpictureendRecordingappendLayerremovefoundTargetcreateChildContext	identicaltargetscreenshotOffset
paintChild
pixelRatiodebugNeedsPaintdevicePixelRatio
debugPaintdebugPaintSizeEnabledRenderRepaintBoundarytoImageFutureisRepaintBoundaryparent
debugLayerpaintBounds%debugInstrumentRepaintCompositedChildcustomContext
buildSceneDiagnosticsNodeDiagnosticableDiagnosticsTreeStylefirsttoDiagnosticsNodenamestyleilengthgetChildrenjvalueaddnodechildren
childIndexselectionChangedCallbackvisibleForTestingnumWeakReference	selectionaddListenercallFlutterfilled	_instance_changeWidgetSelectionModeMapSet_isLocalCreationLocationJsonEncoderregisterExtensioncallbackFutureOrdisposeGroup
parametersAsyncValueGetterAsyncValueSettercontainsKeysetter_postExtensionStateChangedEventgetterregisterBoolServiceExtension	postEventWidgetsBindingrootElement
buildOwner
reassemble
endOfFrameFlutterErrorDetails_nodeToJson	groupName_consoleObjectGroupsubtreeDepthincludePropertiesmaxDescendantsTruncatableNodeservice_errorsSinceReloadTextTreeRendererwrapWidthPropertiesFlutterError	wrapWidthmaxDescendentsTruncatableNoderendererror	trimRightsummaryfromEnvironmentdefaultValuekIsWebFlutterExceptionHandlerpresentErrorisStructuredErrorsEnabled_reportStructuredError!_debugServiceExtensionsRegisteredSchedulerBindingaddPersistentFrameCallback_onFrameStart_registerBoolServiceExtension WidgetInspectorServiceExtensionsstructuredErrorsshow debugShowWidgetInspectorOverridenotifyStateChangeisWidgetCreationTrackedtrackRebuildDirtyWidgets_trackRebuildDirtyWidgets_rebuildStatsresetCountsdebugOnRebuildDirtyWidget_onRebuildWidgetforceRebuild_registerSignalServiceExtensionwidgetLocationIdMaptrackRepaintWidgets_trackRepaintWidgets_repaintStatsdebugOnProfilePaint_onPaintmarkNeedsPaintRendererBindingrenderViewsforEachdisposeAllGroups$_registerObjectGroupServiceExtensionisWidgetTreeReady _registerServiceExtensionWithArg	disposeIdobjectIdobjectGroup _registerServiceExtensionVarArgssetPubRootDirectoriesargsaddPubRootDirectoriesremovePubRootDirectoriesgetPubRootDirectoriespubRootDirectoriessetSelectionByIdgetParentChain_getParentChaingetProperties_getProperties_getChildrengetChildrenSummaryTree_getChildrenSummaryTreegetChildrenDetailsSubtree_getChildrenDetailsSubtreegetRootWidget_getRootWidgetgetRootWidgetSummaryTree_getRootWidgetSummaryTree$getRootWidgetSummaryTreeWithPreviews%_getRootWidgetSummaryTreeWithPreviewsgetRootWidgetTree_getRootWidgetTreegetDetailsSubtree_getDetailsSubtreeparsegetSelectedWidget_getSelectedWidgetgetSelectedSummaryWidget_getSelectedSummaryWidgettoObjectwidthheightmarginmaxPixelRatioByteData
toByteDataformatpngbase64encoderconvert	Uint8ListviewbuffergetLayoutExplorerNode_getLayoutExplorerNode
setFlexFit_setFlexFitsetFlexFactor_setFlexFactorsetFlexProperties_setFlexProperties_groupsclear_idToReferenceData_objectToId_nextIdresetPubRootDirectories_decrementReferenceCountcountidputIfAbsentdebugDidSendFirstFrameEvent	fromPartsErrorSummaryElementwidget
Deprecated_pubRootDirectories_isLocalCreationCachemapUri	directorypathtoListfromaddAll	removeAllsetSelectioncurrentElement_sendInspectEventcurrentinspect!_getSelectedSummaryWidgetLocationfilelinecolumnstreamactiveDevToolsServerAddressconnectedVmServiceUritoIddevToolsInspectorUrireplacequeryParameterstoStringindexOf	substring_safeJsonEncode_getRenderObjectParentChain_getElementParentChainruntimeTypepathNodedelegate_nodesToJsondebugGetDiagnosticChainnumLocalParents_isValueCreatedByLocalProjecttakereversed_getRawElementParentChainfullDetails	toJsonMaptoJsonMapIterativecontains
startsWith_isLocalCreationLocationImpljsonencode_serializeRing_serializeRingIndexIterableeverywhere
isNotEmpty
toJsonList_idToDiagnosticsNode_getChildrenFilteredobjectToDiagnosticsNodesummaryTreelevelDiagnosticLevel_filterChildren_shouldShowInSummaryTree_getRootWidgetTreeImplisSummaryTreewithPreviewsaddAdditionalPropertiesCallbackrenderObjectRenderParagraphtexttoPlainText
debugPrintattacheddebugNeedsLayoutPipelineOwnerownerdebugDoingLayoutflushLayoutflushCompositingBits
flushPaintinflatemin DiagnosticsSerializationDelegatecopyWithexpandPropertyValuesdebugCreatorDebugCreatorelementConstraintsconstraintsBoxConstraintsminWidth	minHeightmaxWidth	maxHeight	RenderBoxsize
ParentData
parentDataFlexParentDataflexfitFlexFittightBoxParentDatadxdy
RenderView_toEnumEntryvaluesmarkNeedsLayoutMainAxisAlignmentCrossAxisAlignment
RenderFlexmainAxisAlignmentcrossAxisAlignmententry	Exception!_getSelectedWidgetDiagnosticsNode"_getSelectedSummaryDiagnosticsNode	candidate_widgetCreationTrackedDuration_frameStart_frameNumberPlatformDispatcher	frameDataframeNumberaddPostFrameCallback_onFrameEnd
debugLabel_postStatsEventexportToJsonRenderObjectElementvisitAncestorElementsancestorreportError	exceptionstackcontextErrorDescriptionperformReassemblereassembleApplication_clearStats_resetErrorCount	_locationlocationlocal	incrementresetstatinMicrosecondsUnimplementedErrorStatefulWidgetStateWidgetsBindingObserver	initState(debugShowWidgetInspectorOverrideNotifierremoveListenersetState	tryInverttransformPointdebugDescribeChildrenoffstagedeflatehitTestgetTransformToSizesorta	compareTobRenderIgnorePointercurrentContextfindRenderObject
candidatesDragDownDetailsglobalPositionDragUpdateDetailsDragEndDetailsViewofzerophysicalSizeStackGestureDetectoronTap	onPanDownonPanEndonPanUpdatebehaviorHitTestBehavioropaqueexcludeFromSemanticsIgnorePointerignoringkeyChangeNotifiermaybeDispatchObjectCreationnotifyListenersdebugIsDefunctLeafRenderObjectWidget	constraininfiniteneedsCompositingaddLayeroverlayRectfromLTWHrootRenderObject	immutablerecthashTextDirectionselected
listEqualstooltiphashAllfromARGBTextPainteractivetoStringShorttoStringAsFixedtextDirectionltr
addPicturelefttopPaintingStylefillcolorstrokestrokeWidthstoragetransformedRecthasNaNcentermaxTextSpanmaxLinesellipsislayoutpositionDependentBox	childSizeverticalOffsetpreferBelow
fromPoints
addPolygonpaintRenderStackgetChildrenAsListany	TextStylefontSizePaddingpadding
EdgeInsetsonlyrightbutton	onPressedisLeftAlignedonTooltipVisibleonTooltipHidden	alignmentAlignmentDirectional	topCenterCustomPaintpaintertooltipMessage	buttonKeyRow
PositionedbottommountedmillisecondsTimercancelonLongPress_tooltipDelayDuration _tooltipShownOnLongPressDurationMouseRegiononEnteronExit	isVisibleisActiveCustomPainterjoinDiagnosticsDebugCreatorpropertiesTransformersinitInstances
kDebugModeDiagnosticsStackTracescheduleMicrotaskinformationCollectormessageErrorSpacer_devToolsInspectorUriForElementDiagnosticsBlockDiagnosticsPropertydescriptioninfoMapEntryentries
isFilteredfineallowTruncate_truncateNodesTarget
TargetKindmethodExpandoLayerCanvasOffsetLayerPaintingContextWidgetInspectorServiceWidgetStatefulWidgetStateWidgetsBindingObserverChangeNotifierLeafRenderObjectWidget	RenderBoxCustomPainterDiagnosticsProperty DiagnosticsSerializationDelegate˚v÷“]ö6ˆ™~∫†⁄ôÒ∆    Ä    
dart:asyncÄ˜ÅHashMap Äﬂ   dart:collection  Å   dart:convert  Å   Å4Å7	developerÅ7dart:developer  ÅC   ÅUÅXmathÅX	dart:mathÅ}ÇE
ClipOpFlutterViewImageImageByteFormat	ParagraphPicturePictureRecorder	PointModeSceneBuilderVertices Å_   ÅsÅvuiÅvdart:ui  ÇI   package:flutter/foundation.dart  Çs   package:flutter/rendering.dart  Çú   package:flutter/scheduler.dart  Ç≈   package:meta/meta_meta.dart  ÇÏ   
basic.dart  É   binding.dart  É   
debug.dart  É-   framework.dart  ÉF   gesture_detector.dart  Éf   service_extensions.dart  Éà   	view.dart¿ Úñ ¿E~ê∫ <ÄÜÄ§Ä•ÄøÄ»Ä…ÄﬁÅÅÅBÅ^ÅoÅyÅÇÅíÅßÅ∂ÅœÅ‚ÅÛÇÇÇ5ÇGÇHÇrÇõÇƒÇÍÇÎÉ ÉÉ,ÉEÉeÉáÉõÉúÉÀÑÑ.ÑCÑaÑàÑ¶ÑÆÑØÑﬁÖÖIÖ´Ö¨Ö¸ÜÜÜbÜ®Ü”á*á+ábáfá∞áŒáààà#à$à0à]à}àÅàÇàéàõà≈àÂâââ%âuâyâ{â|â√ää;äfä≠ä¡ä·ä‚ä¯ããã!ãYãçã«ãÀãÃãÿååIåÖåâåäåñåˆç:çÑçàçâçïçÙé7éÄéÑéÖéëé£é∑éŸéÔèè"è6èGèMè†è˘è˝è˛ê
êDêlêöêûêüê´ê‡ëë4ë8ë9ëEëÄë´ë‹ë‡ë·ëÌí'íMíyí}í~íäí’ì	ìCìGìHìTìúìÕîîî	îîJîmîñîöîõîßî—îÚïïïï*ïJïfïàïåïçïôï◊ññ5ñ9ñ:ñFñpñëñ∏ñºñΩñ…ñÚóó8ó<ó=óIóóó«ó˝òòòò;ò^òáòãòåòòò≠ò¡ò‡ò˜ôô(ô<ôMôSô¨ööööölöüöÿö‹ö›öÈõõ4õ[õ_õ`õlõƒúúPúTúUúaúØú„ùù!ù"ù.ùEùëùﬁû)ûcûÑûàûâûïû®ûΩûÿû‹û›ûÈü	ü$üEüIüJüVüfüxüêüîüïü°üœüÛ††!†"†.†V†o†é†í†ì†ü†√†€†˘†˝†˛°
°2°P°t°x°y°Ö°Æ°À°Ó°Ú°Û°ˇ¢/¢S¢W¢Y¢Z¢ß¢Ù¢ı£#£Y£ê£›§%§B§õ§‹§‚§„••n•t•z•{•å•é•è•‘¶¶L¶N¶O¶ü¶ß&ß2ß_ßÄßÑßÜßáß’ßÁßˇ®Z®ö®“®˛©=©n©ï©´©¥©∫©æ©ø©Â™™™;™_™`™Ø™À™Ã´´´a´p´î´ï´⁄´‡¨0¨y¨â¨è¨ﬁ¨Ì≠≠≠f≠á≠ß≠¿≠‚≠Ê≠ÁÆÆ3Æ7Æ8Æ\ÆmÆÄÆ¨Æ˙Ø ØØ"Ø$Ø%ØcØgØ∂Ø›∞+∞{∞Õ±±d±w±≤±—±˝≤ ≤M≤l≤õ≤ú≤ª≤º≤—≤˙≥%≥B≥h≥i≥u≥ã≥∞≥◊≥¸¥¥-¥Ç¥è¥º¥◊¥›¥·¥‚µµFµVµwµ®µ’∂ ∂∂@∂m∂ò∂†∂≥∂Ω∂›∂·∂‚∑∑.∑S∑ê∑¿∑ˆ∏1∏Z∏π∏∆∏Â∏Î∏Ô∏∏¸ππ@πhπlπmπôπºπ π–∫!∫m∫ë∫±∫Œ∫Ï∫∫Ò∫˝ªªHªhªèª∏ºº)ºbºjºwºüº∆ºÔΩΩ/Ω=ΩCΩGΩHΩTΩ£Ω¿ææFæÅæéæ∑æ€æ¸øø$ø*ø.ø/ø;ørø∂ø‘ø˛¿ @ ¿ @@¿ @g¿ @è¿ @ï¿ @∫¿ @ÿ¿ A¿ A+¿ A1¿ A5¿ A6¿ Aá¿ Aç¿ A€¿ B,¿ Be¿ Bk¿ Bº¿ B˜¿ B˝¿ CK¿ CÑ¿ CŸ¿ D(¿ D<¿ DB¿ Dë¿ D”¿ E¿ Em¿ E®¿ EÆ¿ Eæ¿ Eƒ¿ F¿ Fc¿ F®¿ F¯¿ G¿ G:¿ GS¿ Gp¿ Gç¿ Gö¿ GÀ¿ G¸¿ H-¿ H3¿ H{¿ H∆¿ H˘¿ I-¿ II¿ IP¿ IQ¿ IÖ¿ I÷¿ J$¿ J]¿ J©¿ J»¿ K¿ KL¿ KY¿ Kë¿ K·¿ L-¿ Lj¿ LÉ¿ L£¿ L¨¿ L≤¿ L≥¿ M¿ M7¿ Mg¿ Mì¿ M‰¿ N¿ N)¿ NI¿ Np¿ Nq¿ Nï¿ N°¿ N‚¿ NÙ¿ O¿ OD¿ OL¿ OR¿ OS¿ Où¿ OÍ¿ P/¿ Pn¿ Po¿ Pâ¿ Pä¿ Pî¿ PÎ¿ P˚¿ Q¿ Q¿ Q¿ Q*¿ Q.¿ Q0¿ Q1¿ QÄ¿ Qç¿ Që¿ Q‚¿ R"¿ R?¿ RÜ¿ Rß¿ R˛¿ Rˇ¿ SN¿ Sl¿ Sm¿ Sõ¿ S°¿ SÔ¿ T;¿ Tä¿ T´¿ T”¿ T‘¿ U	¿ U¿ UB¿ U[¿ U]¿ U^¿ Uñ¿ U∂¿ U∆¿ UÂ¿ UÍ¿ V.¿ VE¿ VV¿ VZ¿ V≤¿ V‡¿ W¿ W)¿ Wn¿ W°¿ W“¿ Wı¿ X¿ Xm¿ Xâ¿ Xò¿ X†¿ X¶¿ Xæ¿ X¬¿ Y¿ Y)¿ Y+¿ Y,¿ Yd¿ Yõ¿ Yÿ¿ YŸ¿ Z%¿ ZI¿ ZM¿ ZÉ¿ Zñ¿ Zµ¿ ZÏ¿ [¿ [X¿ [®¿ [Á¿ [˛¿ \¿ \¿ \¿ \=¿ \A¿ \B¿ \a¿ \b¿ \t¿ \u¿ \±¿ \ƒ¿ \≈¿ \ˇ¿ ]¿ ]¿ ]"¿ ]Q¿ ]S¿ ]T¿ ]é¿ ] ¿ ]Ë¿ ^+¿ ^/¿ ^1¿ ^2¿ ^x¿ ^|¿ ^Ã¿ _$¿ _è¿ _⁄¿ `[¿ `®¿ `¯¿ aB¿ ax¿ a|¿ a…¿ b¿ b^¿ b¨¿ c¿ cL¿ cP¿ cÖ¿ c§¿ cË¿ d1¿ dx¿ dó¿ dò¿ dƒ¿ dˇ¿ eF¿ eG¿ et¿ ez¿ e…¿ f¿ fW¿ fl¿ fè¿ f∏¿ fº¿ fΩ¿ f ¿ g¿ g¿ g!¿ g"¿ g[¿ g\¿ g´¿ g˘¿ h¿ hU¿ hV¿ hû¿ hÃ¿ h“¿ i!¿ ip¿ i§¿ i„¿ i‰¿ j0¿ j{¿ jà¿ jÏ¿ kQ¿ kö¿ k≠¿ kÆ¿ l¿ l(¿ l)¿ l[¿ l™¿ l´¿ l’¿ l˙¿ l˚¿ m@¿ mj¿ mp¿ mº¿ n¿ nN¿ nú¿ n€¿ nË¿ o
¿ o$¿ oT¿ oï¿ oú¿ o‡¿ o‰¿ oÂ¿ p*¿ pn¿ pó¿ p±¿ pÂ¿ q&¿ q-¿ qK¿ q]¿ qñ¿ q‘¿ q›¿ r	¿ r¿ r¿ r¿ rZ¿ r´¿ rÙ¿ s7¿ sà¿ s≤¿ s‡¿ s˙¿ t@¿ tÅ¿ tà¿ t¶¿ t∏¿ tÒ¿ uI¿ uR¿ u~¿ uÖ¿ uâ¿ uä¿ uœ¿ v¿ v\¿ v†¿ vÁ¿ v˚¿ w¿ w<¿ w{¿ wÅ¿ wø¿ w˙¿ x!¿ x;¿ xg¿ xì¿ x‘¿ x€¿ x˘¿ y¿ yD¿ yu¿ y≥¿ y“¿ z
¿ z¿ zd¿ zm¿ zô¿ z†¿ z§¿ z•¿ zÁ¿ zÌ¿ {=¿ {ã¿ {Æ¿ {¥¿ {ˆ¿ {¸¿ |J¿ ||¿ |¡¿ }
¿ }<¿ }R¿ }Z¿ }^¿ }_¿ }§¿ }ı¿ ~B¿ ~í¿ ~º¿ ~÷¿ .¿ o¿ v¿ î¿ ¶¿ ﬂ¿ Ä¿ Ä8¿ Äã¿ Äñ¿ Äü¿ ÄÀ¿ Ä“¿ Ä÷¿ Ä◊¿ Å¿ Å[¿ ÅÜ¿ Å∞¿ Å ¿ Ç¿ ÇP¿ ÇW¿ Çu¿ Çá¿ Ç¿¿ Ç”¿ Çˇ¿ É]¿ Éh¿ Éµ¿ É„¿ ÉÛ¿ Ñ¿ Ñr¿ Ñ}¿ Ñø¿ Ñ»¿ ÑÙ¿ Ñ˚¿ Ñˇ¿ Ö ¿ ÖM¿ Öù¿ Ö€¿ Ö·¿ Ü-¿ Ü:¿ ÜZ¿ Üñ¿ ÜΩ¿ Ü˘¿ á¿ á ¿ áA¿ áE¿ áF¿ áÉ¿ áÑ¿ á¢¿ á£¿ á‡¿ à¿ à ¿ àG¿ àq¿ àù¿ à∫¿ àﬂ¿ â¿ â(¿ â5¿ âA¿ âB¿ â{¿ âû¿ â≈¿ â·¿ ä¿ äH¿ ä¶¿ ä≥¿ ã¿ ã¿ ã¿ ã2¿ ã]¿ ãa¿ ãb¿ ãû¿ ã§¿ ãÓ¿ å<¿ å[¿ åw¿ åì¿ åó¿ åò¿ å≈¿ åÀ¿ ç¿ çV¿ ç{¿ ç¬¿ ç◊¿ çÒ¿ é¿ éD¿ ép¿ éû¿ éΩ¿ é∆¿ éŸ¿ é„¿ é˜¿ é˚¿ é¸¿ è)¿ è/¿ è?¿ èE¿ èµ¿ èˇ¿ ê ¿ ês¿ ê ¿ êÀ¿ êÚ¿ ë,¿ ë2¿ ëb¿ ër¿ ë¢¿ ëµ¿ ëø¿ ë¿¿ í	¿ í
¿ í-¿ íq¿ í¿¿ í›¿ ì;¿ ì`¿ ìi¿ ìï¿ ìú¿ ìù¿ ì¿¿ ì¯¿ îL¿ îi¿ î∫¿ ï¿ ï¿ ï0¿ ï9¿ ïe¿ ïl¿ ïm¿ ïí¿ ï„¿ ï˘¿ ñ¿ ñl¿ ñ£¿ ñ»¿ ñ¸¿ ó¿ ó¿ óC¿ óp¿ óá¿ óæ¿ ó¯¿ òB¿ òg¿ òâ¿ òù¿ ò∞¿ òﬁ¿ òÚ¿ ò˛¿ ô	¿ ô7¿ ô@¿ ôA¿ ôh¿ ô±¿ ô»¿ ôÒ¿ ô¸¿ ö*¿ ö3¿ ö4¿ öY¿ ö¢¿ ö‘¿ ö˘¿ õ(¿ õ<¿ õH¿ õo¿ õó¿ õÆ¿ õﬂ¿ ú¿ ú\¿ úz¿ úª¿ úË¿ ù&¿ ù4¿ ù5¿ ùÉ¿ ùñ¿ ùæ¿ ù ¿ ù’¿ û¿ û¿ û¿ û¿ û8¿ û|¿ ûó¿ û≥¿ û»¿ û—¿ û˝¿ ü¿ ü.¿ ün¿ üî¿ ü∞¿ ü≈¿ üŒ¿ ü˙¿ †¿ †&¿ †k¿ †é¿ †∫¿ †¡¿ †Á¿ °$¿ °c¿ °ç¿ °¢¿ °´¿ °◊¿ °ﬁ¿ ¢¿ ¢M¿ ¢y¿ ¢û¿ ¢≥¿ ¢º¿ ¢Ë¿ ¢Ô¿ £¿ £^¿ £ä¿ £Ø¿ £ƒ¿ £Õ¿ £˘¿ § ¿ §&¿ §r¿ §û¿ §∆¿ §€¿ §‰¿ •¿ •¿ •5¿ •~¿ •¢¿ •Œ¿ •’¿ •˚¿ ¶?¿ ¶a¿ ¶ç¿ ¶î¿ ¶∫¿ ¶¸¿ ß¿ ßI¿ ßP¿ ßv¿ ß∑¿ ß◊¿ ®¿ ®
¿ ®0¿ ®o¿ ®ç¿ ®π¿ ®¿¿ ®¡¿ ®Á¿ ©1¿ ©Z¿ ©Ü¿ ©ç¿ ©é¿ ©¥¿ ™¿ ™-¿ ™Y¿ ™`¿ ™a¿ ™ã¿ ™Ã¿ ™Ï¿ ´¿ ´¿ ´I¿ ´ï¿ ´¿¿ ´Ï¿ ´Û¿ ¨¿ ¨i¿ ¨†¿ ¨Ã¿ ¨”¿ ¨Ò¿ ≠6¿ ≠Z¿ ≠Ü¿ ≠ç¿ ≠´¿ ≠¿ Æ)¿ Æ`¿ Æ°¿ Æ√¿ ÆÎ¿ Ø
¿ Ø1¿ Øq¿ Ø~¿ Øâ¿ Øí¿ Øæ¿ Ø≈¿ ØÎ¿ ∞0¿ ∞T¿ ∞Ä¿ ∞á¿ ∞≠¿ ∞˘¿ ±$¿ ±P¿ ±W¿ ±X¿ ±}¿ ±»¿ ±Ò¿ ≤¿ ≤$¿ ≤B¿ ≤Ä¿ ≤π¿ ≤Á¿ ≥¿ ≥J¿ ≥K¿ ≥}¿ ≥£¿ ≥ÿ¿ ¥¿ ¥o¿ ¥à¿ ¥æ¿ ¥˝¿ µ¿ µP¿ µ[¿ µx¿ µ¨¿ µ∂¿ ∂¿ ∂*¿ ∂+¿ ∂ê¿ ∂ô¿ ∂≈¿ ∂Ã¿ ∂Í¿ ∑3¿ ∑[¿ ∑á¿ ∑é¿ ∑¨¿ ∑Í¿ ∏¿ ∏3¿ ∏:¿ ∏X¿ ∏ô¿ ∏π¿ ∏Â¿ ∏Ï¿ π
¿ πO¿ πs¿ πü¿ π¶¿ π™¿ π´¿ π¬¿ π„¿ ∫¿ ∫¿ ∫	¿ ∫=¿ ∫C¿ ∫î¿ ∫ƒ¿ ∫Ÿ¿ ∫Ê¿ ª¿ ª¿ ª7¿ ªP¿ ªa¿ ªe¿ ªf¿ ªé¿ ªî¿ ª◊¿ ªı¿ º
¿ º¿ º(¿ ºA¿ ºY¿ ºp¿ ºè¿ ºì¿ ºî¿ º≈¿ ºÀ¿ Ω¿ Ω=¿ ΩJ¿ Ωm¿ Ω∑¿ Ω’¿ Ω„¿ ΩÈ¿ æ¿ æ¿ æ ¿ æd¿ æ~¿ æ†¿ æ¿¿ æÌ¿ ø¿ ø+¿ ø3¿ øb¿ øh¿ øl¿ øm¿ øπ¿ øË¿ øı¿ ¿(¿ ¿B¿ ¿U¿ ¿[¿ ¿\¿ ¿ü¿ ¿∞¿ ¿‰¿ ¿Î¿ ¡¿ ¡;¿ ¡Q¿ ¡¥¿ ¡Ì¿ ¬¿ ¬"¿ ¬B¿ ¬|¿ ¬™¿ ¬ ¿ ¬◊¿ √¿ √,¿ √N¿ √V¿ √\¿ √k¿ √o¿ √p¿ √Ω¿ √¸¿ ƒ	¿ ƒ9¿ ƒy¿ ƒ}¿ ƒ~¿ ƒº¿ ƒ¬¿ ≈¿ ≈`¿ ≈n¿ ≈{¿ ≈±¿ ≈«¿ ≈⁄¿ ≈‡¿ ≈·¿ ∆"¿ ∆:¿ ∆ï¿ ∆õ¿ ∆≤¿ ∆∂¿ ∆∑¿ «¿ «¿ «!¿ «r¿ «¿¿ »¿ »¿ »b¿ »®¿ »µ¿ »˚¿ …$¿ …A¿ …]¿ …c¿ …v¿ …z¿ …{¿ …≈¿ …“¿ …ÿ¿  '¿  C¿  P¿  Å¿  ó¿  •¿  ´¿  ¨¿  ˆ¿ À¿ Àq¿ Àw¿ À¥¿ Ã¿ Ã¿ ÃB¿ ÃF¿ ÃG¿ Ãï¿ Ã§¿ Ã™¿ Ã˘¿ Õ@¿ ÕY¿ Õf¿ Õu¿ Õü¿ ÕŸ¿ Õ›¿ Œ¿ ŒL¿ ŒP¿ ŒQ¿ Œù¿ Œﬂ¿ ŒÂ¿ œ4¿ œ{¿ œî¿ œ©¿ œ∂¿ œŸ¿ œˇ¿ –"¿ –&¿ –'¿ –s¿ –Ç¿ –à¿ –◊¿ —¿ —7¿ —D¿ —Ñ¿ —ù¿ —ˇ¿ “ ¿ “K¿ “r¿ “£¿ “©¿ “™¿ “€¿ “˛¿ ”¿ ”¿ ”O¿ ”k¿ ”q¿ ”¿¿ ‘¿ ‘ ¿ ‘-¿ ‘p¿ ‘ó¿ ‘•¿ ‘´¿ ‘ƒ¿ ’&¿ ’'¿ ’t¿ ’§¿ ’•¿ ’÷¿ ’˘¿ ’˝¿ ’˛¿ ÷J¿ ÷_¿ ÷l¿ ÷Å¿ ÷’¿ ◊¿ ◊G¿ ◊O¿ ◊S¿ ◊T¿ ◊£¿ ◊Ì¿ ◊Û¿ ÿ$¿ ÿ*¿ ÿx¿ ÿæ¿ ÿÀ¿ Ÿ¿ Ÿ8¿ Ÿ<¿ Ÿ=¿ Ÿä¿ Ÿ¬¿ Ÿ»¿ Ÿ˘¿ Ÿˇ¿ ⁄P¿ ⁄ñ¿ ⁄£¿ ⁄ﬁ¿ ⁄Ù¿ €2¿ €]¿ €í¿ €ß¿ €„¿ ‹¿ ‹5¿ ‹J¿ ‹P¿ ‹b¿ ‹f¿ ‹g¿ ‹Ø¿ ‹⁄¿ ‹Ô¿ ‹¿ ›9¿ ›U¿ ›É¿ ›«¿ ›˛¿ ﬁ;¿ ﬁb¿ ﬁÅ¿ ﬁá¿ ﬁã¿ ﬁå¿ ﬁ∆¿ ﬂ¿ ﬂa¿ ﬂ~¿ ﬂ⁄¿ ﬂ‡¿ ﬂÙ¿ ‡9¿ ‡`¿ ‡f¿ ‡j¿ ‡k¿ ‡Ω¿ ‡˙¿ ·J¿ ·ë¿ ·≥¿ ·Ê¿ ·Ó¿ ·Ù¿ ‚¿ ‚	¿ ‚
¿ ‚[¿ ‚v¿ ‚ã¿ ‚¿¿ ‚Ò¿ „¿ „¿ „b¿ „å¿ „≤¿ „ÿ¿ „·¿ „Ë¿ „È¿ ‰"¿ ‰o¿ ‰∫¿ ‰¯¿ Â9¿ Âq¿ Âπ¿ Ê¿ Ê-¿ ÊU¿ Êù¿ Ê¥¿ Ê˜¿ Ê˚¿ Ê¸¿ ÁJ¿ Áì¿ Áô¿ ÁÊ¿ Ë!¿ Ë.¿ Ëe¿ Ë°¿ Ë•¿ Ë¶¿ ËÊ¿ È¿ ÈK¿ Èì¿ È–¿ È€¿ Í¿ Íl¿ Íx¿ Í¿ ÍÄ¿ Í∑¿ Î¿ Î¿ Î¿ ÎS¿ Î§¿ Î¡¿ Î˚¿ ÏU¿ ÏÑ¿ Ïë¿ Ïò¿ Ïú¿ Ïù¿ Ï˚¿ Ì;¿ Ì^¿ Ìì¿ ÌÕ¿ Ìˇ¿ Ó%¿ Ó[¿ Ón¿ Óz¿ ÓÑ¿ Óå¿ Óí¿ Óπ¿ ÓΩ¿ Óæ¿ ÓÛ¿ Ô¿ Ô ¿ Ô:¿ ÔA¿ Ôh¿ Ô∏¿ Ô≈¿ ÔÌ¿ ÔÒ¿ ÔÚ¿ -¿ M¿ c¿ i¿ †¿ √¿ ‚¿ Ò¿ Ò¿ ÒR¿ ÒV¿ ÒW¿ Ò|¿ Òó¿ Ò∆¿ Ò„¿ ÒÍ¿ Ú¿ Ú)¿ Ú6¿ ÚÖ¿ Ú—¿ Û¿ ÛT¿ ÛÖ¿ Ûã¿ Ûè¿ Ûê¿ Û∆¿ Ù¿ Ù/¿ ÙC¿ ÙI¿ ÙÖ¿ Ùâ¿ Ùä¿ Ùƒ¿ Ù˘¿ Ù˙¿ ıL¿ ıs¿ ı•¿ ıË¿ ˆ¿ ˆ ¿ ˆ[¿ ˆÉ¿ ˆò¿ ˆ†¿ ˆ¶¿ ˆ∏¿ ˆº¿ ˆΩ¿ ˆ˜¿ ˜-¿ ˜o¿ ˜é¿ ˜®¿ ˜Æ¿ ˜Ò¿ ¯"¿ ¯5¿ ¯9¿ ¯:¿ ¯ä¿ ¯–¿ ˘¿ ˘f¿ ˘v¿ ˘{¿ ˘∑¿ ˘Ù¿ ˙¿ ˙R¿ ˙à¿ ˙’¿ ˙Ï¿ ˙¿ ˙Ò¿ ˚¿ ˚>¿ ˚e¿ ˚k¿ ˚–¿ ˚ˇ¿ ¸d¿ ¸á¿ ¸¢¿ ¸™¿ ¸∞¿ ¸Ô¿ ¸Û¿ ¸Ù¿ ˝¿ ˝@¿ ˝o¿ ˝ï¿ ˝ú¿ ˝‹¿ ˝‡¿ ˝·¿ ˛0¿ ˛b¿ ˛o¿ ˛¥¿ ˛˛¿ ˇ¿ ˇ¿ ˇO¿ ˇô¿ ˇ±¿ ˇ–¿ ˇ÷¿ ˇÔ¿ ¿ V¿ j¿ q¿ u¿ v¿ √¿ ı¿8¿Ä¿Ñ¿Ö¿–¿#¿w¿ì¿®¿Ø¿»¿¿/¿C¿J¿N¿O¿ú¿Í¿¿¿j¿∏¿	¿W¿l¿r¿Ç¿à¿÷¿Â¿3¿Ü¿ä¿ã¿œ¿¿2¿6¿7¿t¿â¿Õ¿Ò¿¿ ¿1¿5¿6¿ã¿’¿Ì¿	¿	¿	¿	a¿	}¿	ñ¿	´¿	≤¿
	¿
¿
¿
[¿
®¿
Ã¿
“¿¿V¿¶¿˚¿ˇ¿ ¿X¿¢¿¯¿L¿h¿á¿ú¿£¿º¿¿#¿7¿>¿B¿C¿{¿™¿Ω¿√¿È¿¿ ¿&¿a¿´¿¬¿’¿€¿¿¿¿?¿Y¿Ü¿å¿∆¿ ¿À¿Ù¿¿B¿H¿Ü¿∑¿˝¿¿¿N¿U¿j¿n¿o¿π¿ ¿ı¿,¿0¿1¿l¿Ñ¿ƒ¿¿¿¿¿e¿≥¿È¿+¿/¿0¿c¿{¿œ¿Ù¿˚¿¿:¿U¿p¿∏¿ø¿√¿ƒ¿
¿.¿4¿k¿¨¿»¿„¿˝¿¿X¿\¿]¿±¿Ë¿.¿r¿∫¿˝¿˛¿?¿[¿¿°¿¡¿»¿…¿¿!¿"¿S¿r¿ì¿≥¿–¿$¿I¿P¿¿¿¿¡¿¿D¿Ü¿¢¿—¿Ÿ¿¿k¿Ü¿Ø¿∑¿ﬂ¿˝¿<¿k¿¿¿ ¿“¿˘¿ˇ¿  ¿ ¿ X¿ ~¿ ú¿ ª¿ ﬂ¿ ˆ¿!¿!{¿!Ñ¿!§¿!´¿!Ø¿!∞¿!Ò¿">¿"u¿"{¿" ¿#¿#-¿#3¿#C¿#I¿#í¿#≥¿$¿$n¿$r¿$s¿$ü¿$Ω¿$‘¿$Í¿$¿%:¿%R¿%e¿%k¿%É¿%è¿%µ¿%”¿%˜¿&¿&/¿&8¿&?¿&C¿&D¿&ï¿&¢¿&Ó¿'¿'S¿'Y¿'ö¿'û¿'ü¿'Â¿(¿(¿(_¿(Æ¿(Ò¿)+¿){¿)…¿*¿*g¿*ã¿*ò¿*∏¿*Œ¿*È¿+¿+¿+>¿+[¿+h¿+°¿+¥¿+∫¿+·¿,.¿,h¿,{¿,Å¿,Ç¿,´¿,‚¿-	¿-¿--¿-N¿-f¿-g¿-∑¿.¿.U¿.n¿.ô¿.Æ¿.∂¿.º¿.Ω¿.¸¿/¿/H¿/N¿/n¿/Å¿/á¿/à¿/∞¿/≈¿0¿0¿0¿0F¿0Z¿0n¿0å¿0™¿0±¿0µ¿0∂¿1¿1E¿1ä¿1¡¿1˘¿2C¿2[¿2±¿2∑¿2—¿2›¿3¿3!¿3<¿3`¿3w¿3¢¿3¬¿3ı¿4¿4-¿4à¿4Æ¿4€¿4Á¿4Ë¿5F¿5¶¿5Ì¿6[¿6≈¿7¿7U¿7ü¿7“¿7„¿7¿7Ò¿83¿8ó¿8‹¿9¿9Y¿9Ä¿9€¿:%¿:k¿:≥¿:Ò¿:ˇ¿;¿;¿;¿;N¿;á¿;œ¿<¿<[¿<í¿<£¿<÷¿=¿=R¿=ì¿=“¿>¿>'¿>7¿>z¿>à¿>†¿>·¿?¿?¿?¿?(¿?U¿?É¿?º¿?˘¿@8¿@I¿@J¿@ê¿@¬¿A¿AW¿Aè¿A»¿B	¿B<¿Bo¿BÇ¿Bí¿B«¿C ¿C=¿C|¿Cç¿Cõ¿C≥¿C‘¿C‡¿D¿D¿D¿D¿Dp¿Dt¿Du¿D¬¿DÎ¿E ¿En¿Eó¿E±¿E‡¿F¿FQ¿F{¿Fù¿F¿¿Fÿ¿F‡¿FÊ¿G9¿G=¿G>¿Gé¿G∑¿G¿H=¿Hf¿HÄ¿HØ¿HÁ¿I ¿IJ¿Il¿Iè¿Iß¿IØ¿Iµ¿J¿J¿J¿Ja¿Jä¿J€¿J˚¿K#¿K*¿K~¿Kü¿K»¿Kœ¿K¯¿L¿LA¿Ly¿Lõ¿L—¿M	¿M+¿ML¿Md¿Ml¿Mr¿M≈¿M…¿M ¿N¿N+¿NQ¿Ng¿No¿Nu¿N®¿N¨¿N≠¿O	¿O!¿O_¿O™¿O±¿Oµ¿O∂¿P
¿Pl¿P£¿Q¿Q
¿Q¿Q[¿Q©¿Q˘¿R¿RX¿R¿RΩ¿R√¿S¿S¿S¿S^¿Sø¿S√¿Sƒ¿T¿T?¿TÑ¿Tä¿TÏ¿U¿Uc¿U~¿U…¿V¿V#¿V4¿V>¿VF¿Vb¿Vh¿VÀ¿Vœ¿V–¿W3¿WK¿Wä¿W’¿W‹¿W‡¿W·¿X"¿X(¿Xu¿Xò¿XÏ¿Y¿Y¿Y¿Y5¿Y6¿YS¿Yl¿Ym¿Yò¿Yµ¿Y˚¿Z/¿ZB¿Zt¿Z{¿Z¿ZÄ¿Z©¿ZŒ¿[¿[¿[4¿[t¿[z¿[~¿[¿[Œ¿\$¿\(¿\)¿\s¿\¨¿\≤¿]¿].¿];¿]ü¿]ﬁ¿]‚¿]„¿^-¿^[¿^a¿^±¿^›¿^Í¿_¿_*¿_.¿_/¿_Ñ¿_Ÿ¿_⁄¿`¿`5¿`9¿`:¿`g¿`q¿`«¿`Ù¿aD¿aç¿a›¿aˇ¿b¿b¿b9¿b:¿bá¿bº¿bı¿c$¿cr¿cë¿c©¿c≥¿cÿ¿cÌ¿c˜¿d¿d8¿dU¿du¿dç¿dº¿e¿e¿e¿e¿e!¿e"¿et¿e°¿eß¿e‹¿f¿f$¿f7¿fO¿fS¿fU¿fV¿fû¿f¢¿fÒ¿g9¿gP¿g£¿g§¿g∑¿g«¿g»¿h¿h¿h¿h5¿h6¿hQ¿hc¿hd¿h{¿hå¿hú¿h†¿h°¿hº¿h—¿hﬂ¿h„¿hÂ¿hÊ¿i7¿iq¿iu¿i∆¿j¿jg¿j≥¿j‡¿j‰¿k2¿k¿kö¿kø¿kÈ¿kÓ¿l6¿lÄ¿lò¿lù¿l‚¿m¿m>¿m?¿mf¿m†¿m°¿m·¿mÁ¿n7¿nK¿nã¿nå¿n›¿o¿o8¿ob¿oç¿oõ¿o°¿o·¿p#¿p?¿pM¿pS¿p¿pÄ¿pö¿pœ¿q¿qP¿qt¿qé¿qñ¿q¥¿q–¿q‡¿r8¿rA¿rZ¿r{¿rÉ¿rù¿r™¿r≈¿rÀ¿rÃ¿s¿sh¿sµ¿s¸¿t¿t#¿tA¿t\¿td¿t}¿tÉ¿tá¿tà¿tØ¿t∆¿u¿uc¿u®¿uÚ¿v?¿vq¿v¢¿v∑¿vΩ¿v—¿v’¿v÷¿w%¿wC¿wô¿wﬁ¿wÌ¿x¿x:¿xZ¿x`¿xa¿xö¿x«¿xÈ¿y¿y¿y	¿yC¿yf¿yú¿yÊ¿z¿zR¿z±¿z≈¿zﬂ¿z˛¿{ ¿{(¿{T¿{Z¿{[¿{§¿{«¿|¿|@¿|y¿|¨¿|ˇ¿}¿}A¿}]¿}{¿}õ¿}Ω¿} ¿}’¿}÷¿}ˇ¿~/¿~c¿~ì¿~õ¿~«¿~Õ¿~Œ¿~·¿~˚¿¿¿¿¿>¿]¿^¿j¿£¿•¿¶¿È¿Ì¿Ä8¿ÄÖ¿Äœ¿Å¿Å-¿Å1¿Åf¿Åj¿Å∫¿Ç¿ÇV¿Ç°¿ÇÈ¿É¿É¿Éd¿ÉØ¿Ñ ¿ÑM¿Ñï¿Ñƒ¿Ö¿Ö¿Ö+¿ÖD¿Öx¿Ö∞¿Ö∂¿Ö∑¿Ö·¿Ö˜¿Ö¯¿Ü>¿ÜD¿Üï¿Ü¿¿á¿á¿á]¿áÖ¿áã¿áŸ¿à¿à¿àI¿àù¿àû¿à™¿àÌ¿àÔ¿à¿âI¿âd¿âe¿âÖ¿âÜ¿â´¿â¨¿â∆¿â«¿â˙¿â˚¿äG¿äx¿ä§¿ä•¿ä±¿ä∆¿ä›¿äﬁ¿ã7¿ãâ¿ã≠¿ã¥¿ãÔ¿å<¿å@¿åA¿åM¿å`¿åº¿ç¿ç5¿ç<¿çQ¿çU¿çV¿çç¿ç»¿é¿é¿é¿é3¿éP¿éq¿éÜ¿éü¿é∂¿éº¿é“¿è¿è(¿èy¿èú¿è∞¿è∂¿ê¿ê¿êR¿êä¿ê¡¿ë¿ë1¿ëC¿ëK¿ëê¿ë⁄¿í¿í1¿í9¿í:¿ír¿í´¿í¯¿ì¿ì¿ì¿ì¿ìJ¿ìt¿ìÜ¿ì–¿î¿î<¿îÅ¿îü¿îß¿î≠¿îº¿î‘¿î⁄¿îÍ¿îÓ¿îÔ¿ï>¿ïQ¿ïW¿ï¢¿ïÒ¿ñ=¿ñX¿ñõ¿ñÿ¿ó¿ó¿ói¿óõ¿ó¬¿óˆ¿ò¿ò#¿ò$¿òz¿ò ¿ò‰¿òË¿òÈ¿ô¿ô'¿ô5¿ô;¿ô<¿ôj¿ô¿¿ô˙¿öA¿öB¿ög¿ök¿öl¿öõ¿öÃ¿öÚ¿öˆ¿ö˜¿õ*¿õ[¿õÅ¿õÖ¿õÜ¿õµ¿ú¿úS¿ú£¿úÙ¿ù8¿ùj¿ù«¿ù‡¿ùÁ¿û¿û3¿û@¿û}¿û…¿ûœ¿û”¿û‘¿ûÍ¿ü¿ü¿ü¿ü?¿üh¿ü¥¿ü∫¿üæ¿üø¿üÀ¿üÚ¿†;¿†Ä¿†∆¿†ÿ¿†Ú¿°¿°(¿°M¿°p¿°ô¿°≈¿°Î¿¢P¿¢[¿¢å¿¢Ÿ¿£¿£\¿£ª¿£»¿£—¿£ÿ¿£‹¿£ﬁ¿£ﬂ¿§¿§<¿§o¿§à¿§¥¿§Ï¿§Ú¿§ˆ¿§˜¿•0¿•6¿•v¿•™¿•ﬂ¿¶¿¶%¿¶5¿¶L¿¶P¿¶Q¿¶ó¿¶≤¿¶ƒ¿¶›¿¶Ò¿ß¿ß¿ß¿ß/¿ß@¿ßd¿ßt¿ßã¿ßè¿ßê¿ß”¿ßŸ¿®¿®#¿®S¿®å¿®ç¿®ß¿®Ã¿®È¿©¿©J¿©c¿©i¿©m¿©n¿©æ¿©ƒ¿™¿™¿™>¿™^¿™´¿™Ø¿™∞¿™Ã¿™ı¿´!¿´?¿´V¿´o¿´}¿´É¿´®¿´…¿´˜¿¨¿¨¿¨¿¨¿¨6¿¨\¿¨Ä¿¨Ã¿¨Â¿¨Ú¿≠	¿≠'¿≠@¿≠F¿≠J¿≠K¿≠ò¿≠¨¿≠È¿≠Î¿≠Ï¿Æ%¿Æ[¿Æ\¿ÆÇ¿ÆÉ¿Æè¿Æ‘¿Ø¿Ø¿Ø¿Ø¿Øw¿Øü¿Ø£¿Ø•¿Ø¶¿Øÿ¿∞5¿∞6¿∞h¿∞â¿∞µ¿∞‘¿∞Ó¿∞Ù¿±
¿±¿±¿±¿±=¿±>¿±J¿±u¿±v¿±Ç¿±∏¿±È¿±Ì¿±Ó¿±˙¿≤1¿≤O¿≤e¿≤É¿≤÷¿≤Ù¿≥7¿≥@¿≥G¿≥K¿≥M¿≥N¿≥Y¿≥r¿≥≤¿≥÷¿¥	¿¥
¿¥¿¥8¿¥9¿¥E¿¥h¿¥î¿¥®¿¥Æ¿µ
¿µ¿µ¿µ¿µO¿µQ¿µR¿µï¿µô¿µÈ¿∂ ¿∂¿∂0¿∂W¿∂v¿∂í¿∂∞¿∂À¿∂Ï¿∂Ú¿∂Û¿∑¿∑0¿∑[¿∑s¿∑ò¿∑ô¿∑•¿∑»¿∑Ù¿∏¿∏¿∏B¿∏n¿∏î¿∏⁄¿∏¸¿π ¿π¿π¿πl¿πn¿πo¿πê¿πÿ¿∫-¿∫Ç¿∫É¿∫Œ¿ª¿ª	¿ªZ¿ªß¿ª‘¿º¿º*¿ºI¿ºf¿ºä¿ºë¿ºØ¿ºø¿ºŸ¿ºÏ¿ºˆ¿Ω¿ΩD¿ΩZ¿Ω®¿Ω“¿Ω›¿ΩÁ¿ΩÌ¿ΩÒ¿ΩÚ¿æ¿æ¿æa¿æo¿æu¿æƒ¿æÂ¿æˇ¿ø ¿øQ¿øá¿øØ¿ø∞¿ø‹¿ø›¿¿¿¿¿¿¿¿<¿¿\¿¿]¿¿i¿¿|¿¿ô¿¿≤¿¿À¿¿‡¿¿‰¿¿Â¿¿Ò¿¡¿¡;¿¡I¿¡O¿¡P¿¡Ü¿¡á¿¡º¿¡ ¿¡–¿¡—¿¬¿¬V¿¬y¿¬ö¿¬“¿¬‰¿¬Ï¿√1¿√7¿√è¿√ÿ¿ƒ¿ƒd¿ƒe¿ƒ≤¿ƒ“¿ƒ¿≈!¿≈I¿≈g¿≈n¿≈o¿≈é¿≈®¿≈√¿≈Í¿≈¿∆ ¿∆$¿∆%¿∆f¿∆§¿∆„¿«¿«[¿«{¿«¿¿«¡¿«›¿«Ì¿»¿»L¿»M¿»k¿»{¿»§¿»¬¿»¸¿»˝¿…)¿…n¿…y¿…à¿…º¿…Î¿ ¿ /¿ 0¿ Å¿ À¿À¿ÀO¿À\¿Àm¿À§¿ÀÁ¿À¸¿Ã¿Ã¿Ã:¿ÃZ¿Ãu¿Ã|¿Ãö¿ÃÂ¿Õ¿Õ`¿Õa¿Õz¿Õä¿Õ°¿Õæ¿ÕŒ¿ÕÊ¿ÕÙ¿Œ¿Œ¿Œ¿Œc¿Œ{¿Œü¿Œ£¿Œ§¿Œæ¿Œ—¿ŒÂ¿œ¿œ¿œ4¿œC¿œX¿œ^¿œq¿œ‘¿–¿–u¿–ú¿–ª¿––¿–Ë¿—¿—2¿—u¿—°¿—À¿——¿—“¿—Ô¿“F¿“y¿“ã¿“©¿“ø¿“Â¿“ˇ¿”¿”¿”+¿”;¿”b¿”ê¿”•¿‘¿‘¿‘#¿‘$¿‘F¿‘~¿‘ó¿‘ª¿‘¡¿‘¬¿‘ı¿’<¿’ç¿’∂¿’‡¿÷
¿÷R¿÷Y¿÷¢¿◊¿◊¿◊¿◊¿◊(¿◊5¿◊_¿◊¿◊õ¿◊∞¿◊∑¿◊…¿◊Õ¿◊Œ¿ÿ¿ÿ'¿ÿs¿ÿ¿¿ÿÒ¿Ÿ-¿ŸW¿Ÿu¿Ÿ´¿Ÿœ¿⁄3¿⁄_¿⁄g¿⁄á¿⁄ç¿⁄ü¿⁄£¿⁄•¿⁄¶¿⁄Œ¿⁄Û¿⁄Ù¿€>¿€d¿€ä¿€ã¿€Ì¿€Ó¿‹-¿‹W¿‹ã¿‹√¿‹…¿‹ ¿›¿›i¿›j¿›v¿›ÿ¿›⁄¿›€¿ﬁ7¿ﬁw¿ﬁ∑¿ﬁ∏¿ﬁı¿ﬂ%¿ﬂ*¿ﬂ+¿ﬂF¿ﬂG¿ﬂc¿ﬂd¿ﬂp¿ﬂó¿ﬂ…¿‡¿‡¿‡D¿‡ì¿‡„¿‡Ù¿·"¿·h¿·É¿·•¿·ÿ¿‚ ¿‚¿‚D¿‚W¿‚~¿‚Ÿ¿‚Ï¿„¿„0¿„>¿„R¿„S¿„y¿„™¿„ƒ¿„Ÿ¿‰¿‰=¿‰s¿‰ú¿‰©¿‰¥¿‰¡¿‰ﬂ¿Â'¿ÂT¿Ây¿Â∏¿Â—¿Ê¿Ê:¿ÊK¿Êp¿Ê≤¿Ê√¿ÊÙ¿Á¿ÁJ¿Áw¿ÁÑ¿Áè¿Áò¿Áü¿Á†¿Á∑¿Á¸¿ËB¿Ës¿Ëç¿Ëî¿Ëò¿Ëô¿ËΩ¿È¿È¿È	¿È0¿ÈC¿ÈW¿È}¿Èá¿Èç¿Èë¿Èí¿ÈÆ¿Èœ¿È”¿È‘¿Í¿Í¿Í+¿ÍN¿ÍX¿Í^¿Íb¿Íd¿Íe¿Íú¿Íæ¿Íÿ¿Í¸¿Î¿Î%¿Î&¿Î=¿Îg¿Îê¿Îë¿ÎÍ¿Ï7¿Ï8¿ÏD¿Ïñ¿Ïò¿Ïô¿ÏÂ¿Ì¿Ì"¿Ì#¿Ì/¿ÌB¿Ìf¿Ìá¿Ì™¿Ì ¿Ìﬂ¿Ì„¿Ì‰¿Ì¿Ó¿Ó)¿ÓZ¿Ót¿Óç¿Ó©¿Ó˙¿Ô¿Ôd¿Ô•¿Ô¥¿Ô¡¿Ôﬂ¿Ô˙¿M¿\¿v¿»¿◊¿˘¿Ò¿Ò¿Ò¿Ò!¿Ò%¿Ò&¿ÒW¿Òñ¿Òö¿Òõ¿ÒÀ¿Ú¿Ú¿Ú¿Úf¿Ú∑¿Ú€¿ÚÚ¿Ú¯¿Ú˘¿Û¿Û@¿Ûc¿Ûm¿Ûz¿Û´¿ÛÕ¿Û◊¿Û›¿Û·¿Û„¿Û‰¿Ù%¿ÙL¿Ùn¿Ùã¿Ù¨¿Ù≤¿Ù≥¿Ù”¿Ù¿ı¿ı¿ı¿ıB¿ı}¿ı∞¿ı∆¿ı‘¿ı⁄¿ı€¿ˆ+¿ˆÜ¿ˆ¨¿ˆ∫¿ˆ¿¿ˆ¡¿ˆ„¿˜
¿˜1¿˜2¿˜]¿˜s¿˜å¿˜©¿˜Ò¿¯¿¯5¿¯6¿¯U¿¯e¿¯å¿¯∫¿¯ª¿¯ﬁ¿˘#¿˘V¿˘É¿˘≤¿˘Ù¿˙8¿˙9¿˙[¿˙ß¿˙Ì¿˙Ó¿˚¿˚#¿˚u¿˚â¿˚ê¿˚ë¿˚´¿˚…¿˚◊¿¸'¿¸.¿¸2¿¸3¿¸?¿¸ê¿¸…¿¸Õ¿¸œ¿¸–¿˝¿˝9¿˝=¿˝à¿˝¢¿˝»¿˝‰¿˝Ê¿˝Á¿˛5¿˛I¿˛[¿˛o¿˛á¿˛ü¿˛π¿ˇ¿ˇP¿ˇà¿ˇó¿ˇù¿ˇû¿ˇø¿ˇ‘¿ˇ’¿ˇ¿ ¿ ¿  ¿ 4¿ 5¿ x¿ é¿ è¿ ¥¿ “¿ Ê¿ ˙¿¿8¿?¿C¿D¿P¿Æ¿∞¿±¿ ¿¿R¿V¿´¿“¿÷¿2¿è¿§¿ƒ¿»¿¿#¿V¿v¿ë¿û¿§¿®¿»¿¿7¿t¿í¿ò¿π¿˘¿¿#¿>¿M¿g¿o¿u¿y¿ì¿§¿¶¿ß¿“¿÷¿¿x¿ô¿°¿‰¿¿S¿n¿â¿©¿∆¿‚¿˙¿	!¿	A¿	h¿	ë¿
¿
¿
&¿
1¿
:¿
B¿
b¿
f¿
h¿
i¿
Ã¿¿.¿F¿ä¿÷¿¿(¿=¿D¿H¿I¿d¿•¿‹¿/¿D¿L¿R¿d¿h¿i¿§¿Ã¿¿7¿g¿í¿ì¿„¿3¿y¿ò¿Â¿¿G¿Ä¿ÿ¿˙¿¿¿¿¿@¿Z¿ì¿∫¿ÿ¿/¿>¿K¿V¿m¿Œ¿ÿ¿Ï¿Ú¿¿¿¿)¿\¿`¿p¿r¿s¿¢¿¶¿Ú¿¿I¿ù¿£¿¿E¿ì¿Œ¿¿¿¿H¿L¿ç¿ë¿‹¿‡¿!¿=¿p¿à¿ñ¿‘¿¿I¿O¿`¿h¿z¿|¿}¿≠¿±¿¿?¿p¿≤¿œ¿¿ ¿!¿v¿z¿¢¿¶¿Ò¿ı¿E¿x¿¥¿”¿’¿÷¿¿P¿R¿S¿ó¿õ¿Ê¿Í¿:¿l¿Œ¿¿¿¿i¿¶¿√¿¿3¿4¿\¿Å¿ï¿§¿®¿¬¿ﬁ¿˛¿ ¿ ¿ ¿ <¿ [¿ ~¿ •¿ »¿ …¿!¿!:¿!Ç¿!¨¿!˚¿"¿"5¿"N¿"i¿"Ü¿"•¿"Æ¿"µ¿"∂¿"ﬂ¿#¿#=¿#j¿#n¿#â¿#ã¿#å¿#’¿#˛¿$¿$d¿$∑¿$‹¿$ˇ¿%¿%1¿%^¿%Ñ¿%ü¿%√¿%ﬁ¿&¿&¿&¿&W¿&¿&Ä¿& ¿&È¿&Ô¿'=¿'Ö¿'†¿'°¿'¿(
¿(¿(M¿(x¿(y¿(Ö¿(•¿(¶¿(≤¿(Ã¿(Õ¿(Ÿ¿(¸¿(˝¿)E¿)K¿)ù¿)È¿*%¿*}¿*†¿*°¿*Ú¿*Û¿+!¿+"¿+.¿+ë¿+Œ¿+Ù¿,¿,>¿,D¿,\¿,ó¿,ù¿,‚¿-¿-¿-_¿-¢¿-™¿-Ô¿.¿.N¿.V¿.\¿.è¿.Ë¿.Ó¿/¿/¿/¿/¿/]¿/¢¿/Î¿04¿0Ä¿0«¿1¿1O¿1_¿1c¿1d¿1p¿1Õ¿1˛¿2¿2¿2¿2n¿2¬¿2Ú¿3V¿3g¿3k¿3l¿3x¿3Ÿ¿4¿4'¿4_¿4´¿4±¿4√¿4«¿4»¿4‘¿5¿5¿56¿5V¿5]¿5à¿5§¿5ƒ¿6¿6W¿6é¿6‘¿6Ï¿74¿7;¿7?¿7A¿7B¿7k¿7Ç¿7ú¿7û¿7ü¿7Ï¿8
¿8¿8\¿8•¿8Ó¿9:¿9á¿9ë¿9ï¿9‚¿:)¿:x¿:∆¿:€¿:ﬂ¿;-¿;{¿;•¿;©¿;ˆ¿<¿<
¿<P¿<T¿<h¿<l¿<∏¿<‚¿<Ê¿<Ú¿=¿=1¿=d¿=õ¿=£¿=©¿=±¿=µ¿=˝¿>G¿>Ö¿>â¿>ï¿>¿¿>ﬂ¿?
¿?¿?¿?&¿?*¿?8¿?<¿?ü¿?Ô¿@7¿@T¿@É¿@∫¿@ª¿@Î¿@˛¿A¿AD¿AE¿Ag¿Aë¿Aí¿Aµ¿A˚¿Aˇ¿B ¿BO¿Bk¿Bq¿B†¿B∫¿B◊¿Bˆ¿C¿C&¿C,¿C0¿C1¿Cd¿Cä¿Cß¿C«¿C‘¿CÚ¿C¯¿C¸¿C˝¿D7¿DL¿Di¿Dè¿Dú¿D ¿DÊ¿D˚¿E¿E¿E¿E,¿E=¿E_¿Ex¿E|¿E~   /// @docImport 'dart:ui';Ä…   Äﬁ  Ä˜ÅÅ   ÅÅ8Å7 ÅBÅYÅX Å^ÅwÅvÅ}ÇEÇH   Çr   Çõ   Çƒ   ÇÎ   É    É   É,   ÉE   Ée   Éá     á+ÇOá‘á‘Ä¢/// A layer that mimics the behavior of another layer.
///
/// A proxy layer is used for cases where a layer needs to be placed into
/// multiple trees of layers. áÚáÚ áÚá˝  á˛àà   ààà   à&Zà7à7  àBàSàR  à&à'àÑÄÙà¢à¢ à≤à≤à≤à…àﬁà›  àÈàÒà  âââ  àÑàÖàêàë â|ò‹äAäAÄæ/// A [Canvas] that multicasts all method calls to a main canvas and a
/// secondary screenshot canvas so that a screenshot can be recorded at the same
/// time as performing a normal paint. ähxäh ähäx  äzäãää  äêä°ä†  äπä≥äªä”ä«ä’ä‰äÒäÒ  ä˙ãã   "ãÄ≥ã(ã(  ã1	ã7ã6  ã=ãCãB  ãããPãŒÄ∫ãﬂãﬂ  ãÈããÔ  ã˜ã˝ã¸  ãŒãœå
ååÄ˚åùåù  å¶	å¨å´  å≤&åΩåº  å⁄å‡åﬂ  åååçå≈å«å»åŒåœåÌçãÄ¯çúçú  ç§	ç™ç©  çØç∑ç∂  ç¬ç ç…  ç’ç€ç⁄  çÂçÏçÎ  çãçåéáÅuéòéò  éßé±é∞  éªéŒéÕ  é›éÈéË  éÛèè   èèè  è&è-è,  è:èAè@  éáéàê Äùêê  êê$ê#  ê&ê.ê-  ê5ê<ê;  ê êê°Äñê≤ê≤  êºê√ê¬  ê…ê‘ê”  ê°ê¢ë;Ä§ëLëL  ëWë^ë]  ëdëkëj  ëqëxëw  ë;ë<ë„ÄôëÙëÙ  ë˛íí  ííí  ííí  ë„ë‰íÄÄ∆íëíë  íüí©í®  íØíµí¥  íºí¬í¡  í∆íÕíÃ  íÄíÅìJÄΩì[ì[  ìiìsìr  ìyìì~  ìÉìâìà  ìçìîìì  ìJìKîÄéîî  î%	î-î,  î0	î8î7  î;îBîA  îîîùîÆîÆ  î∑	îΩîº  î¬î…î»  îùîûï kï1ï1  ï;ïBïA  ï ï!ïèÄ©ï†ï†  ïÆïºïª  ï∆ïŒïÕ  ïèïêñ<ñMñM  ñV	ñ\ñ[  ñañhñg  ñ<ñ=ñø|ñ–ñ–  ñ‹ñËñÁ  ñøñ¿ó?Ä¡óPóP  ó[óióh  ósóÅóÄ  óàóèóé  ó?ó@òÄÜòò  òò&ò%  ò,ò3ò2  òòòéÅÄòüòü  ò±òªò∫  ò≈ò“ò—  ò‰òÒò  ò˚ôô  ôôô  ô,ô3ô2  ô@ôGôF  òéòèöÄ…ö#ö#  ö1ö?ö>  öIöVöU  ö]ödöc  öööﬂöö  ö˘	öˇö˛  õõõ
  öﬂö‡õbÄÒõsõs  õ~	õÑõÉ  õâõêõè  õñõûõù  õ®õÆõ≠  õbõcúWÄ…úhúh  úuúÇúÅ  úãúñúï  ú†úßú¶  úWúXù$Åcù4ù4   ù$ù%ûãPûúûú   ûãûåûﬂiûû  û˜ûˇû˛  ûﬂû‡üLGü]ü]   üLüMüóÄâü®ü®  ü≤üπü∏  ü¿ü«ü∆  üóüò†$m†5†5  †;	†C†B  †G
†P†O  †$†%†ïg†¶†¶  †´	†≥†≤  †∂	†æ†Ω  †ï†ñ° w°°  °°(°'  ° °°{v°å°å  °ñ	°û°ù  °°	°©°®  °{°|°ıa¢	¢	  ¢¢"¢!  °ı°ˆ ¶OÅ6¶ˆ¶ˆÄ†/// A layer that omits its own offset when adding children to the scene so that
/// screenshots render to the scene in the local coordinate system of the layer.    ß([ß9ß9  ßDßUßT  ß(ß) ßááúßÌßÌ_/// Data shared between nested [_ScreenshotPaintingContext] objects recording
/// a screenshot. ®Åº® ®®  ®®!®   ®:®+®<®U®V©¡?©˙©˙#/// Target to take a screenshot of. ™X™O™O5/// Root of the layer tree containing the screenshot. ™bg™∂™∂L/// Whether the screenshot target has already been found in the render tree.™ƒ™ŒÄƒ´w´wÄõ/// Whether paint operations should record to the screenshot.
///
/// At least one of [includeInScreenshot] and [includeInRegularContext] must
/// be true.´ç´óÅ{¨Ù¨ÙÅG/// Whether paint operations should record to the regular context.
///
/// This should only be set to false before paint operations that should only
/// apply to the screenshot such rendering debug information about the
/// [target].
///
/// At least one of [includeInScreenshot] and [includeInRegularContext] must
/// be true.≠≠ÄŒ≠î≠îm/// Offset of the screenshot corresponding to the offset [target] was given as
/// part of the regular paint.   ≠ÈM≠Ì≠Ì  ≠˛ÆÆ   Æ:ÄÁÆtÆt!/// Releases allocated resources.  Æ^Æ_ Ø%¢
±}±}ÇQ/// A place to paint to build screenshots of [RenderObject]s.
///
/// Requires that the render objects have already painted successfully as part
/// of the regular rendering pipeline.
/// This painting context behaves the same as standard [PaintingContext] with
/// instrumentation added to compute a screenshot of a specified [RenderObject]
/// added. To correctly mimic the behavior of the regular rendering pipeline, the
/// full subtree of the first [RepaintBoundary] ancestor of the specified
/// [RenderObject] will also be rendered rather than just the subtree of the
/// render object. ±¥ÄÊ±¥ ±¥±Œ  ±’&±Ó±Ì  ≤≤≤  ≤$'≤>≤=  ≤Z≤T≤\≤s≤x≤ò≤y≤â≤û≤¥≤¥  ≤”%≤·≤·  ≤¸'≥≥  ≥'≥/≥/  ≥D"≥V≥V  ≥kÅu≥Ç≥Ç   ≥k≥l¥‰Å¸¥Ì¥Ì    ∂‰Ç
∂È∂È    ∏Úyππ   ∏Ú∏ÛπoÅÄπtπt    ∫ÛÇSªª  ªªª  ∫Û∫ÙΩJÅ„ΩfΩf  ΩyΩâΩà  ΩîΩöΩô  ΩJΩKø1ÇøBøB  øMø[øZ  øaøiøh  ø1ø2¿ A8èı¿ G¿ GÖã/// Captures an image of the current state of [renderObject] and its children.
///
/// The returned [ui.Image] has uncompressed raw RGBA bytes, will be offset
/// by the top-left corner of [renderBounds], and have dimensions equal to the
/// size of [renderBounds] multiplied by [pixelRatio].
///
/// To use [toImage], the render object must have gone through the paint phase
/// (i.e. [RenderObject.debugNeedsPaint] must be false).
///
/// The [pixelRatio] describes the scale between the logical pixels and the
/// size of the output image. It is independent of the
/// [FlutterView.devicePixelRatio] for the device, so specifying 1.0 (the default)
/// will give you a 1:1 mapping between logical pixels and the output pixels
/// in the image.
///
/// The [debugPaint] argument specifies whether the image should include the
/// output of [RenderObject.debugPaint] for [renderObject] with
/// [debugPaintSizeEnabled] set to true. Debug paint information is not
/// included for the children of [renderObject] so that it is clear precisely
/// which object the debug paint information references.
///
/// See also:
///
///  * [RenderRepaintBoundary.toImage] for a similar API for [RenderObject]s
///    that are repaint boundaries that can be used outside of the inspector.
///  * [OffsetLayer.toImage] for a similar API at the layer level.
///  * [dart:ui.Scene.toImage] for more information about the image returned. ¿ G¿ G-¿ G,  ¿ G>¿ GD¿ GC  ¿ GW¿ G_¿ G^  ¿ Gt¿ Gz¿ Gy  ¿ Gk¿ GÜ ¿ Q1Ñ+¿ R(¿ R(Ä/// A class describing a step along a path through a tree of [DiagnosticsNode]
/// objects.
///
/// This class is used to bundle all data required to display the tree with just
/// the nodes along a path expanded into a single JSON payload. ¿ RAÄº¿ R© ¿ R©¿ RΩ c/// Creates a full description of a step in a path through a tree of
/// [DiagnosticsNode] objects.¿ Rø¿ RŒ¿ RÕ  ¿ R”¿ R‚¿ R·  ¿ RÎ¿ RÒ¿ R   ¿ Si¿ Sf¿ SfL/// Node at the point in the path this [_DiagnosticsPathNode] is describing. ¿ SoÅb¿ T…¿ T…Å1/// Children of the [node] being described.
///
/// This value is cached instead of relying on `node.getChildren()` as that
/// method call might create new [DiagnosticsNode] objects for each child
/// and we would prefer to use the identical [DiagnosticsNode] for each time
/// a node exists in the path. ¿ T÷ÄÉ¿ UO¿ UOg/// Index of the child that the path continues on.
///
/// Equal to null if the path does not continue.    ¿ YŸÉy¿ Zú¿ ZúÄ©/// Structure to help reference count Dart objects referenced by a GUI tool
/// using [WidgetInspectorService].
///
/// Does not hold the object from garbage collection. ¿ Z∑Åâ¿ ZÓ ¿ ZÓ¿ [ 4/// Creates an instance of [InspectorReferenceData].¿ [¿ [¿ [  ¿ [¿ [¿ [   ¿ \D¿ \[¿ \[  ¿ \d¿ \l¿ \l  ¿ \wK¿ \¿¿ \¿9/// The id of the object in the widget inspector records. ¿ \«G¿ ]¿ ]7/// The number of times the object has been referenced.¿ ]¿ ]=¿ ]0¿ ]0/// The value.    ¿ ZÉ¿ ZÑ¿ ]éÄ¢¿ ]î¿ ]î  ¿ ]Ãb¿ ]Ã ¿ ]Ã¿ ]„        ¿fVÇé¿g?¿g?Ä‚/// Accumulator for a count associated with a specific source location.
///
/// The accumulator stores whether the source location is [local] and what its
/// [id] for efficiency encoding terse JSON payloads describing counts. ¿gRP¿gR ¿gR¿g`  ¿gb¿gq¿gp  ¿gz¿gâ¿gà  ¿gå¿gõ¿gö   ¿g¶¿g√¿g√/// Location id. ¿g L¿h¿h9/// Whether the location is local to the current project. ¿h¿h+¿h+  ¿hS¿hW¿hW ¿h`¿h8¿h@¿h@    ¿hf9¿hÇ¿hÇ/// Reset the count.   ¿h£?¿h√¿h√/// Increment the count.    ¿hÊñ+¿k†¿k†Ç≥/// A stat tracker that aggregates a performance metric for [Element] objects at
/// the granularity of creation locations in source code.
///
/// This class is optimized to minimize the size of the JSON payloads describing
/// the aggregate statistics, for stable memory usage, and low CPU usage at the
/// expense of somewhat higher overall memory usage. Stable memory usage is more
/// important than peak memory usage to avoid the false impression that the
/// user's app is leaking memory each frame.
///
/// The number of unique widget creation locations tends to be at most in the
/// low thousands for regular flutter apps so the peak memory usage for this
/// class is not an issue.  ¿m8¿m ¿m  ¿m:¿m;¿m)¿m9¿m*¿m8¿mA]¿mÉ¿mÉ$/// Locations with a non-zero count.¿mú¿mù¿må¿mõ¿mç¿m£ÄÊ¿nh¿nhÄ°/// Locations that were added since stats were last exported.
///
/// Only locations local to the current project are included as a performance
/// optimization.¿ná¿nà¿nw¿nÜ¿nx ¿néÖ¯¿o!¿o!Äâ/// Increments the count associated with the creation location of [element] if
/// the creation location is local to the current project. ¿o%¿o.¿o-   ¿täÇJ¿t∂¿t∂$/// Clear all aggregated statistics.   ¿vÿà7¿wZ¿wZh/// Exports the current counts and then resets the stats to prepare to track
/// the next frame of data. ¿wg¿wq¿wp  ¿w|¿wä¿wâ    ¿Äë¿¿  ¿@¿F ¿F¿Y      ¿`B¿t¿t   ¿`¿a ¿¶âH¿Ñõ¿ÑõÑÓ/// A widget that enables inspecting the child widget's structure.
///
/// Select a location on your device or emulator and view what widgets and
/// render object that best matches the location. An outline of the selected
/// widget and terse summary information is shown on device with detailed
/// information is shown in the observatory or in IntelliJ when using the
/// Flutter Plugin.
///
/// The inspector has a select mode and a view mode.
///
/// In the select mode, tapping the device selects the widget that best matches
/// the location of the touch and switches to view mode. Dragging a finger on
/// the device selects the widget under the drag location but does not switch
/// modes. Touching the very edge of the bounding box of a widget triggers
/// selecting the widget even if another widget that also overlaps that
/// location would otherwise have priority.
///
/// In the view mode, the previously selected widget is outlined, however,
/// touching the device has the same effect it would have if the inspector
/// wasn't present. This allows interacting with the application and viewing how
/// the selected widget changes position. Clicking on the select icon in the
/// bottom left corner of the application switches back to select mode. ¿Ñ∆ÄÔ¿Ö
 ¿Ö
¿Ö ;/// Creates a widget that enables inspection for the child.¿Ö 	¿Ö'¿Ö&  ¿Ö/¿Ö>¿Ö=  ¿ÖH.¿ÖW¿ÖV  ¿Ö|2¿Öã¿Öä   ¿Öπ<¿Ö¿Ö'/// The widget that is being inspected. ¿Ö˙Å¿ÜÍ¿ÜÍÄø/// A builder that is called to create the exit select-mode button.
///
/// The `onPressed` callback and key passed as arguments to the builder should
/// be hooked up to the returned widget. ¿áÅå¿àw¿àwÅ-/// A builder that is called to create the button that moves the exit select-
/// mode button to the right or left.
///
/// The `onPressed` callback passed as an argument to the builder should be
/// hooked up to the returned widget.
///
/// The button UI should respond to the `leftAligned` argument.  ¿à†L¿à√¿à√   ¿à†¿à° ¿àöÌ¿àˆ¿àˆ  ¿âK¿âK ¿âK¿â`    ¿âg¿âo¿âo  ¿âà!¿â†¿â†  ¿âÆ¿â∏¿â∏  ¿â…/¿âŸ¿âŸ ¿âÌ¿âˆ¿â˜¿â˝Ä•¿äé¿äéx/// Distance from the edge of the bounding box for an element to consider
/// as selecting the edge of the bounding box.¿äü ¿äßÅò¿ä∏¿ä∏   ¿äß¿ä®¿åCÅ¿åT¿åT   ¿åC¿åD¿çXÄ¬¿ç]¿ç]    ¿éÜœ¿é#¿é#  ¿é7¿éK¿éJ  ¿éT¿éh¿ég  ¿éu¿é}¿é|  ¿éä¿éò¿éó  ¿é£¿é¨¿é´   ¿îÒÉˆ¿ñm¿ñmÅZ/// Returns the list of render objects located at the given position ordered
/// by priority.
///
/// All render objects that are not offstage that match the location are
/// included in the list of matches. Priority is given to matches that occur
/// on the edge of a render object's bounding box and to matches found by
/// [RenderBox.hitTest]. ¿ñu¿ñ}¿ñ|  ¿ñÜ¿ñî¿ñì   ¿òÎÅ¿ò¿ò  ¿ò˚¿ô¿ô   ¿önÄá¿ös¿ös  ¿öÇ¿öì¿öí   ¿ö˘Äã¿ö˛¿ö˛  ¿õ¿õ"¿õ!   ¿õàÉJ¿õç¿õç  ¿õõ¿õ´¿õ™   ¿û÷ÄÁ¿û€¿û€    ¿ü¡Ñ¿ü‘¿ü‘  ¿ü⁄¿üË¿üÁ  ¿ü¡¿ü¬ ¿£ﬂä¿§¿§-/// Mutable selection state of the inspector. ¿§>Ä∑¿§q ¿§q¿§É 0/// Creates an instance of [InspectorSelection].  ¿•¨1¿•ø¿•ø ¿•€¿•‹¿•Õ¿•⁄¿•Œ¿¶¥¿¶∏¿¶∏ ¿¶¡¿®è¿®ù¿®ù  ¿™≤¿™ª¿™ª  	¿§˘Ä∞¿•è¿•èx/// Render objects that are candidates to be selected.
///
/// Tools may wish to iterate through the list of candidates.   ¿•·n¿•Â¿•Â  ¿•¿¶¿¶   ¿¶S^¿¶°¿¶°C/// Index within the list of candidates that is currently selected.   ¿¶∆E¿¶ ¿¶   ¿¶–	¿¶’¿¶‘   ¿ßíÄ˘¿®g¿®gÄ∏/// Selected render object typically from the [candidates] list.
///
/// Setting [candidates] or calling [clear] resets the selection.
///
/// Returns null if the selection is invalid.   ¿®©Ä√¿®≠¿®≠  ¿®µ¿®ƒ¿®√   ¿©pÅ>¿™M¿™MÄ≈/// Selected [Element] consistent with the [current] selected [RenderObject].
///
/// Setting [candidates] or calling [clear] resets the selection.
///
/// Returns null if the selection is invalid.   ¿™ŒÅK¿™“¿™“  ¿™·¿™Î¿™Í   ¿≠MÄõ¿≠∑¿≠∑\/// Whether the selected render object is attached to the tree or has gone
/// out of scope.   ¿ß¿ß6¿ß6/// Set the selection to empty.   ¿¨Å,¿¨"¿¨"     ¿≠ÏÅ∏¿≠Ú¿≠Ú  ¿Æ'3¿Æ- ¿Æ-¿Æ>  ¿Æ@¿ÆO¿ÆN   ¿Æ^"¿Æw¿Æw   ¿ÆÖÄå¿Æ©¿Æ©  ¿Æº¿Æ ¿Æ…  ¿ÆÖ¿ÆÜ¿ØÄç¿Ø&¿Ø&  ¿Ø9¿ØG¿ØF  ¿ØO$¿Øh¿Øg  ¿Ø¿Ø ¿Ø¶É¶¿Ø¨¿Ø¨  ¿Ø⁄Z¿Ø⁄ ¿Ø⁄¿ØÒ  ¿ØÛ%¿∞¿∞  ¿∞(¿∞¿∞*¿∞j¿∞}¿∞}  ¿∞8/¿∞O¿∞O    ¿∞ãÄÇ¿∞è¿∞è  ¿∞ô¿∞≠¿∞¨   ¿±+¿±&¿±&   ¿±¿±¿±@4¿±U¿±U   ¿±@¿±A¿±xt¿±â¿±â  ¿±ö¿±™¿±©  ¿±x¿±y¿±ÅZ¿≤¿≤  ¿≤¿≤¿≤  ¿≤ ¿≤(¿≤'  ¿±¿±Ò ¿≥NÇ¿≥_¿≥_  ¿≥tÄî¿≥t ¿≥t¿≥Ñ  ¿≥Ö¿≥ì¿≥í  ¿≥ö¿≥©¿≥®  ¿≥Ω¿≥∏¿≥ø¿≥≈¿≥∆¿≥Ê¿≥‹¿≥Ë¿≥Ó¿≥Ô¿≥˝¿¥¿≥˛¿¥¿¥¿¥  ¿¥¿¥-¿¥-  ¿µ=¿µ%¿µ%   ¿µ¿µ¿¥;Ä“¿¥U¿¥U  ¿¥X¿¥`¿¥_  ¿¥;¿¥<¿≥N¿≥O¿µRÑ¿∂¿∂Ä≠/// State describing how the inspector overlay should be rendered.
///
/// The equality operator can be used to determine whether the overlay needs to
/// be rendered again. ¿∂2Äø¿∂8 ¿∂8¿∂T  ¿∂[¿∂j¿∂i  ¿∂z¿∂â¿∂à  ¿∂ñ¿∂•¿∂§  ¿∂¥¿∂√¿∂¬  ¿∂œ¿∂ﬁ¿∂›   ¿∂ı¿∑ ¿∑   ¿∑¿∑&¿∑&  ¿∑2'¿∑O¿∑O  ¿∑]¿∑j¿∑j  ¿∑u!¿∑â¿∑â  ¿πh¿π¿π   ¿π¿π¿∑õÅd¿∑µ¿∑µ  ¿∑∏¿∑¿¿∑ø  ¿∑õ¿∑ú¿∂ ¿∂¿∫É†!¿ª≠¿ª≠Å#/// A layer that outlines the selected [RenderObject] and candidate render
/// objects that also match the last pointer location.
///
/// This approach is horrific for performance and is only used here because this
/// is limited to debug mode. Do not duplicate the logic in production code. ¿ª÷Ç¿º ¿º¿º' 8/// Creates a layer that displays the inspector overlay.¿º.¿º=¿º<  ¿ºM¿º\¿º[  ¿ºj¿ºy¿ºx   ¿ΩÙ¿æ¿æ  ¿æÄË¿æÚ¿æÚÄ«/// The rectangle in this layer's coordinate system that the overlay should
/// occupy.
///
/// The scene must be explicitly recomposited after this property is changed
/// (as described at [Layer]). ¿øÄ´¿øù¿øùÄÇ/// Widget inspector root render object. The selection overlay will be painted
/// with transforms relative to this render object. ¿ø≤(¿ø–¿ø–  ¿øﬂ=¿¿¿¿&/// Picture generated from _lastState. ¿¿!¿¿.¿¿.  ¿¿>¿¿F¿¿F   ¿¿_ÄÑ¿¿p¿¿p   ¿¿_¿¿`¿¿ÁÖ<¿¿¯¿¿¯  ¿¡¿¡¿¡  ¿¿Á¿¿Ë¿∆'à{¿∆2¿∆2  ¿∆@"¿∆^¿∆]   ¿Œ¶àt¿Œ´¿Œ´  ¿Œ¬¿Œ ¿Œ…  ¿Œ’¿Œ›¿Œ‹  ¿ŒÈ¿Œ¯¿Œ˜  ¿œ
¿œ¿œ  ¿œ¿œ%¿œ$  ¿œ8	¿œ>¿œ=  ¿œG¿œM¿œL   ¿◊ÄÆ¿◊<¿◊< ¿◊L¿◊L¿◊L¿◊c¿◊x¿◊w  ¿◊É¿◊ã¿◊ä  ¿◊ü¿◊¶¿◊•  ¿◊¿◊¿◊*¿◊+¿◊–Ç“¿ÿ¯¿ÿ¯Å/// Return whether or not a render object belongs to this inspector widget
/// tree.
/// The inspector selection is static, so if there are multiple inspector
/// overlays in the same app (i.e. an storyboard), a selected or candidate
/// render object may not belong to this tree. ¿Ÿ¿Ÿ%¿Ÿ$    ¿€ÓÅÎ¿€Ù¿€Ù  ¿‹/Äô¿‹5 ¿‹5¿‹T  ¿‹[.¿‹j¿‹i  ¿‹è2¿‹û¿‹ù   ¿‹ÃG¿‹Û¿‹Û  ¿›P¿›C¿›C   ¿›lk¿›ü¿›ü   ¿›l¿›m ¿›€åà¿›·¿›·   ¿ﬁ9<¿ﬁM¿ﬁM ¿ﬁr¿ﬁy<¿ﬁç¿ﬁç ¿ﬁ±¿ﬁ∫n¿ﬁ ¿ﬁ  ¿ﬁÍ¿ﬁÛ¿ﬂ'¿ﬂ¿ﬁ˘¿ﬂ¿ﬂ-¿ﬂ5¿ﬂ5  ¿ﬂI¿ﬂN¿ﬂN ¿ﬂ] ¿ﬂfâ1¿ﬂy¿ﬂy  ¿ﬂ¿ﬂç¿ﬂå  ¿ﬂf¿ﬂg¿Ëõl¿Ë†¿Ë†    ¿ÈÄÖ¿È¿È    ¿Èî>¿Èô¿Èô    ¿È÷Äã¿È€¿È€  ¿ÈÒ¿È˙¿È˘    ¿ÍeÇ2¿Ík¿Ík  ¿ÍûÄÜ¿Í§ ¿Í§¿Íª  ¿Í¬¿Í—¿Í–  ¿Í‹¿ÍÎ¿ÍÍ  ¿Î ¿Î¿Î   ¿Î(¿Î5¿Î5  ¿Î?&¿ÎU¿ÎU  ¿Îi%¿Î¿Î  ¿ÎìU¿Î©¿Î© ¿ÎÃ¿Î‘¿ÎÁ¿Î·¿Î’¿Î„¿ÎÏI¿Ï¿Ï ¿Ï¿Ï"¿Ï4¿Ï/¿Ï#¿Ï1 ¿Ï:[¿Ïe¿Ïe   ¿Ï:¿Ï; ¿ÏôáI¿Ïü¿Ïü   ¿ÏÁ¿ÏÓ¿ÏÓ  ¿Ì¿Ì¿Ì   ¿Ì%ÄΩ¿Ì6¿Ì6   ¿Ì%¿Ì&¿ÌÊÉ>¿Ì˘¿Ì˘  ¿Ìˇ¿Ó¿Ó  ¿ÌÊ¿ÌÁ¿Ò(q¿Ò-¿Ò-  ¿ÒB¿ÒL¿ÒK   ¿Òùq¿Ò¢¿Ò¢  ¿Ò∂¿Ò¿¿Òø   ¿ÚÅŒ¿Ú¿Ú  ¿Ú6¿Ú@¿Ú?  ¿ÚJ¿ÚY¿ÚX    ¿Û‰àÍ¿ÛÍ¿ÛÍ  ¿Ù'Ää¿Ù' ¿Ù'¿ÙI  ¿ÙP¿Ù_¿Ù^  ¿Ùr¿ÙÅ¿ÙÄ  ¿Ùè¿Ùû¿Ùù   ¿Ùµ¿Ù√¿Ù√  ¿Ù’¿ÙÂ¿ÙÂ  ¿ÙÚ¿Ù˝¿Ù˝   ¿ıá"¿ı ¿ı   ¿ı&¿ı.¿ı-  ¿ı5	¿ı;¿ı:  ¿ı¿ı¿¸5Äó¿¸F¿¸F  ¿¸T8¿¸Ç¿¸Å  ¿¸5¿¸6 ¿¸–Å¿˝±¿˝±Ä∑/// Interface for classes that track the source code location the their
/// constructor was called from.
///
/// {@macro flutter.widgets.WidgetInspectorService.getChildrenSummaryTree}   ¿˝ ¿˝Ÿ¿˝Ÿ      ¿˝ÁÉ»¿˛O¿˛Oa/// A tuple with file, line, and column number, for displaying human-readable
/// file locations. ¿˛]Å?¿˛c ¿˛c¿˛l  ¿˛s¿˛Ç¿˛Å  ¿˛ã¿˛ö¿˛ô  ¿˛£¿˛≤¿˛±  ¿ˇå	¿ˇí¿ˇë   ¿ˇ†2¿ˇŒ¿ˇŒ/// File path of the location. ¿ˇ◊)¿ˇ¸¿ˇ¸/// 1-based line number. ¿ -¿ ,¿ ,/// 1-based column number. ¿ 7U¿ à¿ à@/// Optional name of the parameter or function at this location.  ¿ ëÄ±¿ ¶¿ ¶    ¿Fg¿Y¿Y   ¿F¿G ¿sÇ©¿
¿
Äê/// Debugging message for DevTools deep links.
///
/// The [value] for this property is a string representation of the Flutter
/// DevTools url. ¿KÅœ¿ï ¿ï¿≠ Å?/// Creates a diagnostics property that displays a deep link to Flutter DevTools.
///
/// The [value] of this property will return a map of data for the Flutter
/// DevTools deep link, including the full `url`, the Flutter DevTools `screenId`,
/// and the `objectId` in Flutter DevTools that this diagnostic references.¿Æ¿∂¿µ  ¿¬
¿ ¿…  ¿‘¿Ÿ¿¿⁄¿ﬁ¿Ó¿„¿¿¿˝¿¿¿    ¿#åì¥¿$¿$q/// A delegate that configures how a hierarchy of [DiagnosticsNode]s are
/// serialized by the Flutter Inspector. ¿$fÅß¿$ﬁ ¿$ﬁ¿$¸ s/// Creates an [InspectorSerializationDelegate] that serialize [DiagnosticsNode]
/// for Flutter Inspector service.¿%¿%	¿%  ¿%¿%¿%  ¿%5'¿%;¿%:  ¿%b ¿%h¿%g  ¿%à¿%é¿%ç  ¿%£¿%©¿%®  ¿%«¿%÷¿%’  ¿%‚$¿%Ë¿%Á  ¿%*¿%Z¿%[¿%~¿%ú¿%º	¿&l¿&v¿&vE/// Service used by GUI tools to interact with the [WidgetInspector]. ¿&ÇÅ¿'ï¿'ïÄ˙/// Optional [groupName] parameter which indicates that the json should
/// contain live object ids.
///
/// Object ids returned as part of the json will remain live at least until
/// [WidgetInspectorService.disposeGroup()] is called on [groupName]. ¿'£e¿'˝¿'˝L/// Whether the tree should only include nodes created by the local project. ¿(i¿(Y¿(Y?/// Maximum descendants of [DiagnosticsNode] before truncating. ¿({(¿(í¿(í ¿({¿(|¿(®"¿(æ¿(æ ¿(®¿(©¿(œ+¿(Ê¿(Ê ¿(œ¿(–¿(ˇÅü¿*¿*Å/// Callback to add additional experimental serialization properties.
///
/// This callback can be used to customize the serialization of DiagnosticsNode
/// objects for experimental features in widget inspector clients such as
/// [Dart DevTools](https://github.com/flutter/devtools). ¿*£M¿*ø¿*ø ¿*Ó¿*Ô¿*›¿*Ì¿*ﬁ¿*ı+¿*˛¿*˛    ¿+$É‡¿+E¿+E  ¿+^¿+o¿+n  ¿+u¿+{¿+z  ¿+$¿+%¿+à¿/ÇZ¿/5¿/5  ¿/E¿/V¿/U  ¿/¿/	¿1fÄõ¿1à¿1à  ¿1ó¿1Æ¿1≠  ¿1¥¿1≈¿1ƒ  ¿1f¿1g¿2Åe¿2'¿2'  ¿28¿2O¿2N  ¿2U¿2f¿2e  ¿2¿2¿3nÅX¿3ê¿3ê  ¿3¢¿3π¿3∏  ¿3ø¿3—¿3–  ¿3n¿3o¿4 Çt¿4˜¿4˜  ¿5¿5¿5  ¿5¿5$¿5#  ¿5:¿5A¿5@  ¿4 ¿4À¿#˛¿#ˇ¿7B[¿7q¿7q  ¿7Ñ¿7ä ¿7ä¿7ò       ¿7B¿7C¿7I¿7i¿7V¿7h¿7J¿7U¿7K¿7W¿7a¿7b¿@ªÑ¬¿A¿A//// Does not hold keys from garbage collection.¿A¿A¿A¿A¿A¿A ¿A,¿A&¿A& ¿A1¿A8¿A?¿A9¿A@¿AA¿AGH¿Ay¿Ay/// Strings, numbers, booleans.¿Aç¿Aé¿Aá¿Aå¿Aà¿Aã ¿Aîj¿Aô¿Aô  ¿A¶¿AØ¿AÆ   ¿BÅ-¿BÆ¿BÆÄó/// Returns the value for the given [key] or null if [key] is not in the map
/// or garbage collected.
///
/// Does not support records to act as keys. ¿B±¿B¥¿B≥   ¿C3Ä»¿Ct¿Ct0/// Associates the [key] with the given [value]. ¿Cx¿C{¿Cz  ¿C¿CÇ¿CÅ   ¿CˇÅ¿D<¿D<7/// Removes the value for the given [key] from the map. ¿DC¿DF¿DE   ¿Es¿E3¿E3#/// Removes all pairs from the map.   ¿@Î¿@Ï     ¢ZÉ3¢_¢_  ¢}¢ã¢ä  ¢í¢õ¢ö   •èÄæ•Ÿ•ŸD/// Calculate bounds for a render object and all of its descendants. •Ò•ˇ•˛   ¿ U^ÉÃ¿ Uz¿ Uz  ¿ Uò¿ UÆ¿ U≠  ¿ U∏¿ U¡¿ U¿  ¿ U»¿ Uﬂ¿ Uﬁ   ¿±N¿∂¿∂  ¿∆¿◊¿÷   ¿Ñ§¿L¿LÅ0/// Transformer to parse and gather information about [DiagnosticsDebugCreator].
///
/// This function will be registered to [FlutterErrorDetails.propertiesTransformers]
/// in [WidgetsBinding.initInstances].
///
/// This is meant to be called only in debug mode. In other modes, it yields an empty list. ¿g$¿Ç¿Å   ¿ßÉ¿¿.¿.l/// Transform the input [DiagnosticsNode].
///
/// Return null if input [DiagnosticsNode] is not applicable. ¿D¿U¿T  ¿Z¿i¿h   ¿
iâ¿
É¿
É  ¿
ù¿
¶¿
•  ¿
Æ¿
Ω¿
º   ¿Ç]¿B¿BÅ/// Returns if an object is user created.
///
/// This always returns false if it is not called in debug mode.
///
/// {@macro flutter.widgets.WidgetInspectorService.getChildrenSummaryTree}
///
/// Currently is local creation locations are only available for
/// [Widget] and [Element]. ¿_¿g¿f   ¿}Å¢¿D¿DÄ¡/// Returns true if a [Widget] is user created.
///
/// This is a faster variant of `debugIsLocalCreationLocation` that is available
/// in debug and profile builds but only works for [Widget]. ¿_¿g¿f   ¿!Å≥¿M¿MÅ#/// Returns the creation location of an object in String format if one is available.
///
/// ex: "file:///path/to/main.dart:4:3"
///
/// {@macro flutter.widgets.WidgetInspectorService.getChildrenSummaryTree}
///
/// Currently creation locations are only available for [Widget] and [Element]. ¿g¿o¿n   ¿÷{¿·¿·  ¿¸¿¿   ¿SÅ«¿E¿EÄÊ/// Returns the creation location of an object if one is available.
///
/// {@macro flutter.widgets.WidgetInspectorService.getChildrenSummaryTree}
///
/// Currently creation locations are only available for [Widget] and [Element]. ¿Z¿c¿b   ¿4Äÿ¿8¿8  ¿F¿Q¿P   ¿ É|¿ #¿ #     ÉúÅÑÑf/// Signature for the builder callback used by
/// [WidgetInspector.exitWidgetSelectionButtonBuilder].  ÑIÑWÑV  ÑgÑ~Ñ}  ÑéÑ¢Ñ°   ÑØÄ˚Ö"Ö"j/// Signature for the builder callback used by
/// [WidgetInspector.moveExitWidgetSelectionButtonBuilder].  Ö]ÖkÖj  ÖtÖãÖä  ÖïÖõÖö   Ö¨Å}Ü∞Ü∞Ä˚/// Signature for a method that registers the service extension `callback` with
/// the given `name`.
///
/// Used as argument to [WidgetInspectorService.initServiceExtensions]. The
/// [BindingBase.registerServiceExtension] implements this signature.  ÜÊÜ˜Üˆ  Ü¸*áá   ¿ Y,Ä´¿ Y£¿ Y£n/// Signature for the selection change callback used by
/// [WidgetInspectorService.selectionChangedCallback].    ¿ ^2¿"¿ cã¿ cãÖR/// Service used by GUI tools to interact with the [WidgetInspector].
///
/// Calls to this object are typically made from GUI tools such as the [Flutter
/// IntelliJ Plugin](https://github.com/flutter/flutter-intellij/blob/master/README.md)
/// using the [Dart VM Service](https://github.com/dart-lang/sdk/blob/main/runtime/vm/service/service.md).
/// This class uses its own object id and manages object lifecycles itself
/// instead of depending on the [object ids](https://github.com/dart-lang/sdk/blob/main/runtime/vm/service/service.md#getobject)
/// specified by the VM Service Protocol because the VM Service Protocol ids
/// expire unpredictably. Object references are tracked in groups so that tools
/// that clients can use dereference all objects in a group with a single
/// operation making it easier to avoid memory leaks.
///
/// All methods in this class are appropriate to invoke from debugging tools
/// using the VM service protocol to evaluate Dart expressions of the
/// form `WidgetInspectorService.instance.methodName(arg1, arg2, ...)`. If you
/// make changes to any instance method of this class you need to verify that
/// the [Flutter IntelliJ Plugin](https://github.com/flutter/flutter-intellij/blob/master/README.md)
/// widget inspector support still works with the changes.
///
/// All methods returning String values return JSON.  ¿ c¶Ä–¿ dG¿ dGÄà/// Ring of cached JSON values to prevent JSON from being garbage
/// collected before it can be requested over the VM service protocol.¿ dX¿ d\¿ dd¿ d]¿ dc¿ de¿ df¿ dl¿ du¿ dm¿ dq¿ dz¿ d~¿ d~ ¿ dî¿ eC¿ e¿ e ¿ e+¿ eB¿ eC¿ g$5¿ g0¿ g0 ¿ gT¿ g^Äı¿ h3¿ h3Äµ/// Ground truth tracking what object(s) are currently selected used by both
/// GUI tools such as the Flutter IntelliJ Plugin and the [WidgetInspector]
/// displayed on the device.¿ h?¿ hQ¿ hR¿ hXÅâ¿ i…¿ i…ÅA/// Callback typically registered by the [WidgetInspector] to receive
/// notifications when [selection] changes.
///
/// The Flutter IntelliJ Plugin does not need to listen for this event as it
/// instead listens for `dart:developer` `inspect` events which also trigger
/// when the inspection target changes on device. ¿ iÊÅ¿ jπ¿ jπÄù/// The VM service protocol does not keep alive object references so this
/// class needs to manually manage groups of objects that should be kept
/// alive.	¿ jË¿ jÈ¿ j√¿ jÁ¿ jƒ¿ jÃ¿ jœ¿ jÊ¿ j–¿ jÓa¿ k¿ k ¿ kM¿ kN¿ k-¿ kL¿ k.¿ k6¿ kSE¿ kq¿ kq ¿ k¿ kÜ¿ kï¿ ká¿ kè¿ kñ¿ kó¿ kú¿ k†¿ k† ¿ k™¿ k∞v¿ l¿ lR/// The pubRootDirectories that are currently configured for the widget inspector. ¿ l+}¿ ly¿ ly//// Memoization for [_isLocalCreationLocation].¿ lë¿ lò¿ l•¿ lô¿ l°¿ l¶¿ lß¿ l≠&¿ l≤¿ l≤ ¿ lŒ¿ l◊!¿ l‹¿ l‹ ¿ lÛ¿ áH9¿ á\¿ á\ ¿ ár¿ áÜ¿ áä¿ áä ¿ áü¿Y¿Y¿Y  ¿Y8¿YF¿YF  ¿YU¿Y^¿Y^  ¿_1Q¿_T¿_T ¿_d¿_Ä¿_Å¿_ÜQ¿_©¿_© ¿_π¿_’¿_÷¿ död¿ dË¿ dË)/// The current [WidgetInspectorService].   ¿ eIÅr¿ fr¿ frÅ/// Enables select mode for the Inspector.
///
/// In select mode, pointer interactions trigger widget selection instead of
/// normal interactions. Otherwise the previously selected widget is
/// highlighted but the application can be interacted with normally. ¿ f¿ fÖ¿ fÑ  ¿ fY¿ fZ¿ føa¿ f◊¿ f◊  ¿ f‡¿ f¯¿ f˜  ¿ fø¿ f¿Y¿ l˝ÇÊ¿ nÔ¿ nÔÅœ/// Registers a service extension method with the given name (full
/// name "ext.flutter.inspector.name").
///
/// The given callback is called when the extension method is called. The
/// callback must return a value that can be converted to JSON using
/// `json.encode()` (see [JsonEncoder]). The return value is stored as a
/// property named `result` in the JSON. In case of failure, the failure is
/// reported to the remote caller and is dumped to the logs. ¿ o¿ o¿ o  ¿ o(*¿ oK¿ oJ  ¿ oX;¿ oÉ¿ oÇ  ¿ n›¿ nﬁ¿ oÁÇ,¿ pu¿ puÄÑ/// Registers a service extension method with the given name (full
/// name "ext.flutter.inspector.name"), which takes no arguments. ¿ põ¿ p¨¿ p´  ¿ pµ.¿ p‹¿ p€  ¿ pÈ;¿ q¿ q   ¿ rÉq¿ sπ¿ sπÅê/// Registers a service extension method with the given name (full
/// name "ext.flutter.inspector.name"), which takes a single optional argument
/// "objectGroup" specifying what group is used to manage lifetimes of
/// object references in the returned JSON (see [disposeGroup]).
/// If "objectGroup" is omitted, the returned JSON will not include any object
/// references to avoid leaking memory. ¿ s‰¿ sı¿ sÙ  ¿ s˛@¿ t7¿ t6  ¿ tD;¿ to¿ tn   ¿ uåÖ¿ x¿ xÇW/// Registers a service extension method with the given name (full
/// name "ext.flutter.inspector.name"), which takes a single argument
/// "enabled" which can have the value "true" or the value "false"
/// or can be omitted to read the current value. (Any value other
/// than "true" is considered equivalent to "false". Other arguments
/// are ignored.)
///
/// Calls the `getter` callback to obtain the value when
/// responding to the service extension method being called.
///
/// Calls the `setter` callback with the new value when the
/// service extension method is called with a new value. ¿ x%¿ x6¿ x5  ¿ x?&¿ x`¿ x_  ¿ xk&¿ xå¿ xã  ¿ xó;¿ x¬¿ x¡   ¿ zßÇ∂¿ |É¿ |ÉÅ¬/// Sends an event when a service extension's state is changed.
///
/// Clients should listen for this event to stay aware of the current service
/// extension state. Any service extension that manages a state should call
/// this method on state change.
///
/// `value` reflects the newly updated service extension value.
///
/// This will be called automatically for service extensions registered via
/// [BindingBase.registerBoolServiceExtension]. ¿ |£¿ |´¿ |™  ¿ |∞¿ |π¿ |∏   ¿ }aÉt¿ ~ô¿ ~ôÅ*/// Registers a service extension method with the given name (full
/// name "ext.flutter.inspector.name") which takes an optional parameter named
/// "arg" and a required parameter named "objectGroup" used to control the
/// lifetimes of object references in the returned JSON (see [disposeGroup]). ¿ ~¿¿ ~—¿ ~–  ¿ ~⁄R¿ %¿ $  ¿ 2;¿ ]¿ \   ¿ ÄŸÑ%¿ Åç¿ ÅçÄ®/// Registers a service extension method with the given name (full
/// name "ext.flutter.inspector.name"), that takes arguments
/// "arg0", "arg1", "arg2", ..., "argn". ¿ Å¥¿ Å≈¿ Åƒ  ¿ ÅŒ?¿ Ç¿ Ç  ¿ Ç;¿ Ç>¿ Ç=   ¿ ÖÇB¿ ÜI¿ ÜIÅ"/// Cause the entire tree to be rebuilt. This is used by development tools
/// when the application code has changed and is being hot-reloaded, to cause
/// the widget tree to pick up any changed implementations.
///
/// This is expensive and should not be called except during development.  ¿ Ü/¿ Ü0¿ á•Éª¿ á™¿ á™  ¿ á¡¿ á÷¿ á’   ¿ ãdÅ2¿ åb¿ åbÄÓ/// Resets the count of errors since the last hot reload.
///
/// This data is sent to clients as part of the 'Flutter.Error' service
/// protocol event. Clients may choose to display errors received after the
/// first error differently.   ¿ åöÇ`¿ ç]¿ ç]Äµ/// Whether structured errors are enabled.
///
/// Structured errors provide semantic information that can be used by IDEs
/// to enhance the display of errors with rich formatting.   ¿ é˛™´¿ ê'¿ ê'Å/// Called to register service extensions.
///
/// See also:
///
///  * <https://github.com/dart-lang/sdk/blob/main/runtime/vm/service/service.md#rpcs-requests-and-responses>
///  * [BindingBase.initServiceExtensions], which explains when service
///    extensions can be used. ¿ ê=2¿ ê_¿ ê^   ¿ π≠Z¿ π≤¿ π≤    ¿ ∫ÅY¿ ∫Ì¿ ∫ÌÄ≤/// Clear all InspectorService object references.
///
/// Use this method only for testing to ensure that object references from one
/// test case do not impact other test cases.  ¿ ∫∆¿ ∫«¿ ∫€¿ ∫‹¿ ªhÅ*¿ º/¿ º/ÄÜ/// Reset all InspectorService state.
///
/// Use this method only for testing to write hermetic tests for
/// WidgetInspectorService.  ¿ ª˜¿ ª¯¿ º¿ º¿ º¿ º¿ ºñÅà¿ ΩQ¿ ΩQÄ†/// Free all references to objects in a group.
///
/// Objects and their associated ids in the group may be kept alive by
/// references from a different group. ¿ Ω^¿ Ωf¿ Ωe  ¿ Ω?¿ Ω@¿ æ"ÅI¿ æ'¿ æ'  ¿ æ@ ¿ æX¿ æW   ¿ øoÉˇ¿ øˇ¿ øˇv/// Returns a unique id for [object] that will remain live at least until
/// [disposeGroup] is called on [groupName]. ¿ ¿¿ ¿¿ ¿  ¿ ¿¿ ¿¿ ¿  ¿ øÍ¿ øÎ¿ √rÅ
¿ ƒ¿ ƒÄá/// Returns whether the application has rendered its first frame and it is
/// appropriate to display the Widget tree in the inspector. ¿ ƒ#¿ ƒ,¿ ƒ+  ¿ √˛¿ √ˇ¿ ƒÄÇ5¿ ≈Ö¿ ≈ÖÄÂ/// Returns the Dart object associated with a reference id.
///
/// The `groupName` parameter is not required by is added to regularize the
/// API surface of the methods in this class called from the Flutter IntelliJ
/// Plugin. ¿ ≈é
¿ ≈ó¿ ≈ñ  ¿ ≈õ¿ ≈§¿ ≈£  ¿ ≈p¿ ≈q¿ ∆πÇ¿¿ »ø¿ »øÅﬁ/// Returns the object to introspect to determine the source location of an
/// object's class.
///
/// The Dart object for the id is returned for all cases but [Element] objects
/// where the [Widget] configuring the [Element] is returned instead as the
/// class of the [Widget] is more relevant than the class of the [Element].
///
/// The `groupName` parameter is not required by is added to regularize the
/// API surface of methods called from the Flutter IntelliJ Plugin. ¿ »Ÿ	¿ »·¿ »‡  ¿ »Â¿ »Ó¿ »Ì  ¿ »™¿ »´¿ …}Ç»¿  W¿  WÄΩ/// Remove the object with the specified `id` from the specified object
/// group.
///
/// If the object exists in other groups it will remain alive and the object
/// id will remain valid. ¿  a
¿  j¿  i  ¿  m¿  u¿  t  ¿  E¿  F¿ ÃIÇ¿ Õ‰¿ Õ‰Å/// Set the list of directories that should be considered part of the local
/// project.
///
/// The local project directories are used to distinguish widgets created by
/// the local project from widgets created from inside the framework
/// or other packages. ¿ Õ˙¿ Œ¿ Œ  ¿ Õ[¿ Õ\¿ Õh¿ Õi¿ Õs¿ Õ€¿ Õy¿ Õ£¿ ŒSÅ“¿ œΩ¿ œΩÅ6/// Resets the list of directories, that should be considered part of the
/// local project, to the value passed in [pubRootDirectories].
///
/// The local project directories are used to distinguish widgets created by
/// the local project from widgets created from inside the framework
/// or other packages.  ¿ œñ¿ œó¿ œ´¿ œ¨¿ –)Çÿ¿ —K¿ —KÅ/// Add a list of directories that should be considered part of the local
/// project.
///
/// The local project directories are used to distinguish widgets created by
/// the local project from widgets created from inside the framework
/// or other packages. ¿ —a¿ —o¿ —n  ¿ —9¿ —:¿ ”Ç˜¿ ‘4¿ ‘4Å/// Remove a list of directories that should no longer be considered part
/// of the local project.
///
/// The local project directories are used to distinguish widgets created by
/// the local project from widgets created from inside the framework
/// or other packages. ¿ ‘M¿ ‘[¿ ‘Z  ¿ ‘"¿ ‘#¿ ÷ ÅR¿ ÷†¿ ÷†\/// Returns the list of directories that should be considered part of the
/// local project. ¿ ÷≥¿ ÷»¿ ÷«  ¿ ÷a¿ ÷b¿ ÷n¿ ÷o¿ ◊VÅÂ¿ ÿ“¿ ÿ“Å[/// Set the [WidgetInspector] selection to the object matching the specified
/// id if the object is valid object to set as the inspector selection.
///
/// Returns true if the selection was changed.
///
/// The `groupName` parameter is not required by is added to regularize the
/// API surface of methods called from the Flutter IntelliJ Plugin. ¿ ÿ„
¿ ÿÏ¿ ÿÎ  ¿ ÿ¿ ÿ˘¿ ÿ¯  ¿ ÿ¿¿ ÿ¡¿ Ÿ?É&¿ ⁄™¿ ⁄™ÅJ/// Set the [WidgetInspector] selection to the specified `object` if it is
/// a valid object to set as the inspector selection.
///
/// Returns true if the selection was changed.
///
/// The `groupName` parameter is not needed but is specified to regularize the
/// API surface of methods called from the Flutter IntelliJ Plugin. ¿ ⁄∑¿ ⁄¿¿ ⁄ø  ¿ ⁄»¿ ⁄—¿ ⁄–  ¿ ⁄ò¿ ⁄ô¿ ‹iÇ!¿ ‹∂¿ ‹∂E/// Notify attached tools to navigate to an object's source location. ¿ ‹»¿ ‹—¿ ‹–   ¿ ﬁéÅ€¿ ﬁÕ¿ ﬁÕ7/// Changes whether widget selection mode is [enabled]. ¿ ﬁË¿ ﬁÓ¿ ﬁÌ  ¿ ﬁ˜¿ ﬁ˝¿ ﬁ¸  ¿ ﬂ¿ ‡mÅõ¿ ‡«¿ ‡«O/// Returns a DevTools uri linking to a specific element on the inspector page. ¿ ‡Á¿ ‡¿ ‡Ô   ¿ ‚ÑÓ¿ ‚î¿ ‚îg/// Returns the DevTools inspector uri for the given vm service connection and
/// inspector reference. ¿ ‚©¿ ‚±¿ ‚∞  ¿ ‚x¿ ‚y¿ Ê˛Å¶¿ Ë7¿ Ë7Å/// Returns JSON representing the chain of [DiagnosticsNode] instances from
/// root of the tree to the [Element] or [RenderObject] matching `id`.
///
/// The JSON contains all information required to display a tree view with
/// all nodes other than nodes along the path collapsed. ¿ ËF	¿ ËN¿ ËM  ¿ ËQ¿ ËY¿ ËX  ¿ Ë#¿ Ë$¿ Ë®ÉÛ¿ Ë∂¿ Ë∂  ¿ Ë∆
¿ Ëœ¿ ËŒ  ¿ Ë“¿ Ë⁄¿ ËŸ   ¿ ÏüÇ¿ Ï≠¿ Ï≠  ¿ Ï«¿ Ï–¿ Ïœ  ¿ ÏŸ¿ ÏË¿ ÏÁ   ¿ Ó¿Å0¿ Ó€¿ Ó€  ¿ Ó˜¿ Ô ¿ Óˇ  ¿ Ô¿ Ô¿ Ô  ¿ Ô$¿ Ô*¿ Ô)   ¿ ÔÙÅa¿ ¿   ¿ 1¿ @¿ ?  ¿ Q¿ Y¿ X   ¿ ÒYÇ5¿ Òo¿ Òo  ¿ ÒÄ¿ Òí¿ Òë  ¿ Òõ'¿ Òª¿ Ò∫  ¿ Ò ¿ Ò–¿ Òœ  ¿ Ò›¿ ÛíÄˆ¿ Ûó¿ Ûó  ¿ Ûµ¿ Ûæ¿ ÛΩ   ¿ ÙåÇ/¿ Ùë¿ Ùë  ¿ ÙÆ¿ Ù∂¿ Ùµ   ¿ ˆøÅy¿ ˆ˛¿ ˆ˛7/// Memoized version of [_isLocalCreationLocationImpl]. ¿ ˜¿ ˜¿ ˜   ¿ ¯<Ç≥¿ ˘˝¿ ˘˝Å1/// Wrapper around `json.encode` that uses a ring of cached values to prevent
/// the Dart garbage collector from collecting objects between when
/// the value is returned over the VM service protocol and when the
/// separate observatory protocol command has to be used to retrieve its full
/// contents. ¿ ˙¿ ˙¿ ˙   ¿ ˙ÛÅˇ¿ ˚	¿ ˚	  ¿ ˚¿ ˚8¿ ˚7  ¿ ˚B!¿ ˚G¿ ˚F   ¿ ¸ˆÄÈ¿ ˝¿ ˝  ¿ ˝#¿ ˝:¿ ˝9  ¿ ˝D'¿ ˝d¿ ˝c  ¿ ˝s ¿ ˝é¿ ˝ç   ¿ ˝„Å¿ ˛x¿ ˛x|/// Returns a JSON representation of the properties of the [DiagnosticsNode]
/// object that `diagnosticsNodeId` references. ¿ ˛Ü¿ ˛é¿ ˛ç  ¿ ˛†¿ ˛®¿ ˛ß  ¿ ˛d¿ ˛e¿ ˇÅo¿ ˇ¿ ˇ  ¿ ˇ!¿ ˇ*¿ ˇ)  ¿ ˇ;¿ ˇC¿ ˇB   ¿ xÅ¿ ˛¿ ˛z/// Returns a JSON representation of the children of the [DiagnosticsNode]
/// object that `diagnosticsNodeId` references. ¿
¿¿  ¿$¿,¿+   ¿áÅ∆¿î¿î  ¿°¿™¿©  ¿º¿ƒ¿√   ¿QÉ8¿Ó¿ÓÇy/// Returns a JSON representation of the children of the [DiagnosticsNode]
/// object that `diagnosticsNodeId` references only including children that
/// were created directly by user code.
///
/// {@template flutter.widgets.WidgetInspectorService.getChildrenSummaryTree}
/// Requires [Widget] creation locations which are only available for debug
/// mode builds when the `--track-widget-creation` flag is enabled on the call
/// to the `flutter` tool. This flag is enabled by default in debug builds.
/// {@endtemplate}
///
/// See also:
///
///  * [isWidgetCreationTracked] which indicates whether this method can be
///    used. ¿¿¿  ¿¿'¿&   ¿çÄ®¿û¿û  ¿≥¿º¿ª   ¿9Ä˚¿£¿£:/// If possible, returns [DiagnosticsNode] for the object. ¿ª¿ƒ¿√  ¿v¿w¿8Å‘¿E¿E  ¿]¿f¿e  ¿w¿¿~   ¿
ÅÓ¿_¿_Å;/// Returns a JSON representation of the children of the [DiagnosticsNode]
/// object that [diagnosticableId] references providing information needed
/// for the details subtree view.
///
/// The details subtree shows properties inline and includes all children
/// rather than a filtered set of important children. ¿y¿Å¿Ä  ¿í¿ö¿ô   ¿Ç?¿¿  ¿*¿3¿2  ¿D¿L¿K   ¿EÅ ¿J¿J  ¿c¿t¿s   ¿Ä∂¿)¿)  ¿C¿T¿S  ¿]'¿}¿|   ¿ÕÅ†¿„¿„  ¿¯¿¿  ¿'¿9¿8   ¿qÄæ¿”¿”V/// Returns a JSON representation of the [DiagnosticsNode] for the root
/// [Element]. ¿·¿È¿Ë   ¿3ÄÊ¿I¿I  ¿X¿`¿_   ¿Å¿º¿ºÄì/// Returns a JSON representation of the [DiagnosticsNode] for the root
/// [Element] showing only nodes that should be included in a summary tree. ¿’¿›¿‹   ¿2Åê¿H¿H  ¿g¿o¿n  ¿s¿‘¿”   ¿∆Åï¿„¿„  ¿¿#¿"   ¿_Ç¡¿|¿|  ¿è¿§¿£   ¿$Üä¿:¿:  ¿W¿h¿g  ¿v¿Ö¿Ñ  ¿ó¿¶¿•  ¿∑¿Ω¿º  ¿‘s¿)¿(  ¿ ¿!≤Çø¿#º¿#ºÅÍ/// Returns a JSON representation of the subtree rooted at the
/// [DiagnosticsNode] object that `diagnosticsNodeId` references providing
/// information needed for the details subtree view.
///
/// The number of levels of the subtree that should be returned is specified
/// by the [subtreeDepth] parameter. This value defaults to 2 for backwards
/// compatibility.
///
/// See also:
///
///  * [getChildrenDetailsSubtree], a method to get children of a node
///    in the details subtree. ¿#Œ¿#÷¿#’  ¿#Á¿#Ô¿#Ó  ¿#˙¿#ˇ¿#˛  ¿$¿$uÅÕ¿$ã¿$ã  ¿$£¿$¨¿$´  ¿$¡¿$ ¿$…  ¿$ÿ¿$›¿$‹   ¿&FÅW¿&´¿&´N/// Returns a [DiagnosticsNode] representing the currently selected [Element]. ¿&Ω¿&∆¿&≈  ¿&⁄¿&‚¿&·  ¿&ó¿&ò¿'°â¿*¨¿*¨Ç”/// Captures an image of the current state of an [object] that is a
/// [RenderObject] or [Element].
///
/// The returned [ui.Image] has uncompressed raw RGBA bytes and will be scaled
/// to be at most [width] pixels wide and [height] pixels tall. The returned
/// image will never have a scale between logical pixels and the
/// size of the output image larger than maxPixelRatio.
/// [margin] indicates the number of pixels relative to the un-scaled size of
/// the [object] to include as a margin to include around the bounds of the
/// [object] in the screenshot. Including a margin can be useful to capture
/// areas that are slightly outside of the normal bounds of an object such as
/// some debug paint information. ¿*º¿*≈¿*ƒ  ¿*“¿*„¿*‚  ¿*Ì¿*˛¿*˝  ¿+	¿+¿+  ¿+"¿+*¿+)  ¿+B¿+H¿+G  ¿*ç¿*é¿+¿+9¿+T¿0∏ìª¿0’¿0’  ¿0Ï¿1¿1    ¿DwÇ≈¿Dî¿Dî  ¿D†¿Dµ¿D¥   ¿G@ÇÀ¿G]¿G]  ¿Gl¿GÅ¿GÄ   ¿JÉπ¿J,¿J,  ¿J?¿JT¿JS   ¿MÃÄﬂ¿MŒ¿MŒ ¿M€¿M€¿M€¿Mﬁ¿MÁ¿MÊ  ¿MÛ¿M˚¿M˙   ¿NØÅ¿N≈¿N≈  ¿Nÿ¿N·¿N‡  ¿Nı¿N˝¿N¸   ¿O∏ÅQ¿O…¿O…  ¿OÎ¿OÙ¿OÛ   ¿QÇ¿R¿RÄÒ/// Returns a [DiagnosticsNode] representing the currently selected [Element]
/// if the selected [Element] should be shown in the summary tree otherwise
/// returns the first ancestor of the selected [Element] shown in the summary
/// tree. ¿R'¿R0¿R/  ¿RD¿RL¿RK   ¿SÄ∞¿S¿S  ¿S?¿SH¿SG   ¿S∆É¿S◊¿S◊  ¿S˙¿T¿T   ¿V“Å¿VË¿VË  ¿W¿W¿W
  ¿W¿W'¿W&   ¿W„Å0¿X|¿X|Äç/// Returns whether [Widget] creation locations are available.
///
/// {@macro flutter.widgets.WidgetInspectorService.getChildrenSummaryTree}   ¿YoÅ¿Yt¿Yt  ¿YÇ¿Yå¿Yã   ¿ZÇÄ˚¿Zá¿Zá  ¿Zì¿Zù¿Zú   ¿[ÅÄ¶¿[Ü¿[Ü  ¿[ñ¿[û¿[ù  ¿[®"¿[∆¿[≈   ¿\+Å∂¿]B¿]BÄ˙/// All events dispatched by a [WidgetInspectorService] use this method
/// instead of calling [developer.postEvent] directly.
///
/// This allows tests for [WidgetInspectorService] to track which events were
/// dispatched by overriding this method. ¿]L¿]T¿]S  ¿]^¿]t¿]s  ¿]¿]á¿]Ü  ¿]0¿]1¿]è¿]ÂÅH¿^Ò¿^ÒÄÔ/// All events dispatched by a [WidgetInspectorService] use this method
/// instead of calling [developer.inspect].
///
/// This allows tests for [WidgetInspectorService] to track which events were
/// dispatched by overriding this method. ¿^˘¿_¿_  ¿^ﬂ¿^‡¿_‹\¿_·¿_·  ¿_Ú¿_˚¿_˙  ¿`¿`	¿`   ¿`<Ñ‰¿`A¿`A  ¿`J¿`X¿`W   ¿e$Å.¿f¿fÄ⁄/// This method is called by [WidgetsBinding.performReassemble] to flush caches
/// of obsolete values after a hot reload.
///
/// Do not call this method directly. Instead, use
/// [BindingBase.reassembleApplication].    ¿πo¿πy¿πy ¿πç¿πêF¿πú¿πú 	¿π∑¿πº¿πΩ¿π≈¿π’¿π∆¿πÀ¿πœ¿π”¿πÿS¿π‰¿π‰ 	¿∫	¿∫¿∫¿∫¿∫*¿∫¿∫¿∫"¿∫'¿∫-S¿∫9¿∫9 	¿∫`¿∫e¿∫f¿∫n¿∫¿∫o¿∫t¿∫x¿∫|¿⁄¶&¿⁄≥¿⁄≥ ¿⁄»¿⁄Œ#¿⁄€¿⁄€ ¿⁄Ó¿⁄ÙÄî¿€q¿€qo/// Interpret pointer up events within with this margin as indicating the
/// pointer is moving off the device.¿€Ö¿€ã`¿€õ¿€õ ¿€´¿€¥¿€Í¿€∫¿€µ¿€º¿€¡¿€Ã¿€¬¿€◊¿€œ¿€Ÿ¿€Â¿€ﬂ¿€Á¿√<¿›¿› ¿˝¿˛¿Ì¿¸¿Ó¿˘¿0¿¿ ¿/¿0¿$¿.¿%¿7üâ¿@ò¿@òáˇ/// Annotation which marks a function as a widget factory for the purpose of
/// widget creation tracking.
///
/// When widget creation tracking is enabled, the framework tracks the source
/// code location of the constructor call for each widget instance. This
/// information is used by the DevTools to provide an improved developer
/// experience. For example, it allows the Flutter inspector to present the
/// widget tree in a manner similar to how the UI was defined in your source
/// code.
///
/// [Widget] constructors are automatically instrumented to track the source
/// code location of constructor calls. However, there are cases where
/// a function acts as a sort of a constructor for a widget and a call to such
/// a function should be considered as the creation location for the returned
/// widget instance.
///
/// Annotating a function with this annotation marks the function as a widget
/// factory. The framework will then instrument that function in the same way
/// as it does for [Widget] constructors.
///
/// Tracking will not work correctly if the function has optional positional
/// parameters.
///
/// Currently this annotation is only supported on extension methods.
///
/// {@tool snippet}
///
/// This example shows how to use the [widgetFactory] annotation to mark an
/// extension method as a widget factory:
///
/// ```dart
/// extension PaddingModifier on Widget {
///   @widgetFactory
///   Widget padding(EdgeInsetsGeometry padding) {
///     return Padding(padding: padding, child: this);
///   }
/// }
/// ```
///
/// When using the above extension method, the framework will track the
/// creation location of the [Padding] widget instance as the source code
/// location where the `padding` extension method was called:
///
/// ```dart
/// // continuing from previous example...
/// const Text('Hello World!')
///     .padding(const EdgeInsets.all(8));
/// ```
///
/// {@end-tool}
///
/// See also:
///
/// * the documentation for [Track widget creation](https://flutter.dev/to/track-widget-creation).¿@®¿@∂¿@∑   ÄÆ  dart:ui ê∫ <ÄÜÄ§Ä•ÄøÄ»Ä…ÄﬁÅÅÅBÅ^ÅoÅyÅÇÅíÅßÅ∂ÅœÅ‚ÅÛÇÇÇ5ÇGÇHÇrÇõÇƒÇÍÇÎÉ ÉÉ,ÉEÉeÉáÉõÉúÉÀÑÑ.ÑCÑaÑàÑ¶ÑÆÑØÑﬁÖÖIÖ´Ö¨Ö¸ÜÜÜbÜ®Ü”á*á+ábáfá∞áŒáààà#à$à0à]à}àÅàÇàéàõà≈àÂâââ%âuâyâ{â|â√ää;äfä≠ä¡ä·ä‚ä¯ããã!ãYãçã«ãÀãÃãÿååIåÖåâåäåñåˆç:çÑçàçâçïçÙé7éÄéÑéÖéëé£é∑éŸéÔèè"è6èGèMè†è˘è˝è˛ê
êDêlêöêûêüê´ê‡ëë4ë8ë9ëEëÄë´ë‹ë‡ë·ëÌí'íMíyí}í~íäí’ì	ìCìGìHìTìúìÕîîî	îîJîmîñîöîõîßî—îÚïïïï*ïJïfïàïåïçïôï◊ññ5ñ9ñ:ñFñpñëñ∏ñºñΩñ…ñÚóó8ó<ó=óIóóó«ó˝òòòò;ò^òáòãòåòòò≠ò¡ò‡ò˜ôô(ô<ôMôSô¨ööööölöüöÿö‹ö›öÈõõ4õ[õ_õ`õlõƒúúPúTúUúaúØú„ùù!ù"ù.ùEùëùﬁû)ûcûÑûàûâûïû®ûΩûÿû‹û›ûÈü	ü$üEüIüJüVüfüxüêüîüïü°üœüÛ††!†"†.†V†o†é†í†ì†ü†√†€†˘†˝†˛°
°2°P°t°x°y°Ö°Æ°À°Ó°Ú°Û°ˇ¢/¢S¢W¢Y¢Z¢ß¢Ù¢ı£#£Y£ê£›§%§B§õ§‹§‚§„••n•t•z•{•å•é•è•‘¶¶L¶N¶O¶ü¶ß&ß2ß_ßÄßÑßÜßáß’ßÁßˇ®Z®ö®“®˛©=©n©ï©´©¥©∫©æ©ø©Â™™™;™_™`™Ø™À™Ã´´´a´p´î´ï´⁄´‡¨0¨y¨â¨è¨ﬁ¨Ì≠≠≠f≠á≠ß≠¿≠‚≠Ê≠ÁÆÆ3Æ7Æ8Æ\ÆmÆÄÆ¨Æ˙Ø ØØ"Ø$Ø%ØcØgØ∂Ø›∞+∞{∞Õ±±d±w±≤±—±˝≤ ≤M≤l≤õ≤ú≤ª≤º≤—≤˙≥%≥B≥h≥i≥u≥ã≥∞≥◊≥¸¥¥-¥Ç¥è¥º¥◊¥›¥·¥‚µµFµVµwµ®µ’∂ ∂∂@∂m∂ò∂†∂≥∂Ω∂›∂·∂‚∑∑.∑S∑ê∑¿∑ˆ∏1∏Z∏π∏∆∏Â∏Î∏Ô∏∏¸ππ@πhπlπmπôπºπ π–∫!∫m∫ë∫±∫Œ∫Ï∫∫Ò∫˝ªªHªhªèª∏ºº)ºbºjºwºüº∆ºÔΩΩ/Ω=ΩCΩGΩHΩTΩ£Ω¿ææFæÅæéæ∑æ€æ¸øø$ø*ø.ø/ø;ørø∂ø‘ø˛¿ @ ¿ @@¿ @g¿ @è¿ @ï¿ @∫¿ @ÿ¿ A¿ A+¿ A1¿ A5¿ A6¿ Aá¿ Aç¿ A€¿ B,¿ Be¿ Bk¿ Bº¿ B˜¿ B˝¿ CK¿ CÑ¿ CŸ¿ D(¿ D<¿ DB¿ Dë¿ D”¿ E¿ Em¿ E®¿ EÆ¿ Eæ¿ Eƒ¿ F¿ Fc¿ F®¿ F¯¿ G¿ G:¿ GS¿ Gp¿ Gç¿ Gö¿ GÀ¿ G¸¿ H-¿ H3¿ H{¿ H∆¿ H˘¿ I-¿ II¿ IP¿ IQ¿ IÖ¿ I÷¿ J$¿ J]¿ J©¿ J»¿ K¿ KL¿ KY¿ Kë¿ K·¿ L-¿ Lj¿ LÉ¿ L£¿ L¨¿ L≤¿ L≥¿ M¿ M7¿ Mg¿ Mì¿ M‰¿ N¿ N)¿ NI¿ Np¿ Nq¿ Nï¿ N°¿ N‚¿ NÙ¿ O¿ OD¿ OL¿ OR¿ OS¿ Où¿ OÍ¿ P/¿ Pn¿ Po¿ Pâ¿ Pä¿ Pî¿ PÎ¿ P˚¿ Q¿ Q¿ Q¿ Q*¿ Q.¿ Q0¿ Q1¿ QÄ¿ Qç¿ Që¿ Q‚¿ R"¿ R?¿ RÜ¿ Rß¿ R˛¿ Rˇ¿ SN¿ Sl¿ Sm¿ Sõ¿ S°¿ SÔ¿ T;¿ Tä¿ T´¿ T”¿ T‘¿ U	¿ U¿ UB¿ U[¿ U]¿ U^¿ Uñ¿ U∂¿ U∆¿ UÂ¿ UÍ¿ V.¿ VE¿ VV¿ VZ¿ V≤¿ V‡¿ W¿ W)¿ Wn¿ W°¿ W“¿ Wı¿ X¿ Xm¿ Xâ¿ Xò¿ X†¿ X¶¿ Xæ¿ X¬¿ Y¿ Y)¿ Y+¿ Y,¿ Yd¿ Yõ¿ Yÿ¿ YŸ¿ Z%¿ ZI¿ ZM¿ ZÉ¿ Zñ¿ Zµ¿ ZÏ¿ [¿ [X¿ [®¿ [Á¿ [˛¿ \¿ \¿ \¿ \=¿ \A¿ \B¿ \a¿ \b¿ \t¿ \u¿ \±¿ \ƒ¿ \≈¿ \ˇ¿ ]¿ ]¿ ]"¿ ]Q¿ ]S¿ ]T¿ ]é¿ ] ¿ ]Ë¿ ^+¿ ^/¿ ^1¿ ^2¿ ^x¿ ^|¿ ^Ã¿ _$¿ _è¿ _⁄¿ `[¿ `®¿ `¯¿ aB¿ ax¿ a|¿ a…¿ b¿ b^¿ b¨¿ c¿ cL¿ cP¿ cÖ¿ c§¿ cË¿ d1¿ dx¿ dó¿ dò¿ dƒ¿ dˇ¿ eF¿ eG¿ et¿ ez¿ e…¿ f¿ fW¿ fl¿ fè¿ f∏¿ fº¿ fΩ¿ f ¿ g¿ g¿ g!¿ g"¿ g[¿ g\¿ g´¿ g˘¿ h¿ hU¿ hV¿ hû¿ hÃ¿ h“¿ i!¿ ip¿ i§¿ i„¿ i‰¿ j0¿ j{¿ jà¿ jÏ¿ kQ¿ kö¿ k≠¿ kÆ¿ l¿ l(¿ l)¿ l[¿ l™¿ l´¿ l’¿ l˙¿ l˚¿ m@¿ mj¿ mp¿ mº¿ n¿ nN¿ nú¿ n€¿ nË¿ o
¿ o$¿ oT¿ oï¿ oú¿ o‡¿ o‰¿ oÂ¿ p*¿ pn¿ pó¿ p±¿ pÂ¿ q&¿ q-¿ qK¿ q]¿ qñ¿ q‘¿ q›¿ r	¿ r¿ r¿ r¿ rZ¿ r´¿ rÙ¿ s7¿ sà¿ s≤¿ s‡¿ s˙¿ t@¿ tÅ¿ tà¿ t¶¿ t∏¿ tÒ¿ uI¿ uR¿ u~¿ uÖ¿ uâ¿ uä¿ uœ¿ v¿ v\¿ v†¿ vÁ¿ v˚¿ w¿ w<¿ w{¿ wÅ¿ wø¿ w˙¿ x!¿ x;¿ xg¿ xì¿ x‘¿ x€¿ x˘¿ y¿ yD¿ yu¿ y≥¿ y“¿ z
¿ z¿ zd¿ zm¿ zô¿ z†¿ z§¿ z•¿ zÁ¿ zÌ¿ {=¿ {ã¿ {Æ¿ {¥¿ {ˆ¿ {¸¿ |J¿ ||¿ |¡¿ }
¿ }<¿ }R¿ }Z¿ }^¿ }_¿ }§¿ }ı¿ ~B¿ ~í¿ ~º¿ ~÷¿ .¿ o¿ v¿ î¿ ¶¿ ﬂ¿ Ä¿ Ä8¿ Äã¿ Äñ¿ Äü¿ ÄÀ¿ Ä“¿ Ä÷¿ Ä◊¿ Å¿ Å[¿ ÅÜ¿ Å∞¿ Å ¿ Ç¿ ÇP¿ ÇW¿ Çu¿ Çá¿ Ç¿¿ Ç”¿ Çˇ¿ É]¿ Éh¿ Éµ¿ É„¿ ÉÛ¿ Ñ¿ Ñr¿ Ñ}¿ Ñø¿ Ñ»¿ ÑÙ¿ Ñ˚¿ Ñˇ¿ Ö ¿ ÖM¿ Öù¿ Ö€¿ Ö·¿ Ü-¿ Ü:¿ ÜZ¿ Üñ¿ ÜΩ¿ Ü˘¿ á¿ á ¿ áA¿ áE¿ áF¿ áÉ¿ áÑ¿ á¢¿ á£¿ á‡¿ à¿ à ¿ àG¿ àq¿ àù¿ à∫¿ àﬂ¿ â¿ â(¿ â5¿ âA¿ âB¿ â{¿ âû¿ â≈¿ â·¿ ä¿ äH¿ ä¶¿ ä≥¿ ã¿ ã¿ ã¿ ã2¿ ã]¿ ãa¿ ãb¿ ãû¿ ã§¿ ãÓ¿ å<¿ å[¿ åw¿ åì¿ åó¿ åò¿ å≈¿ åÀ¿ ç¿ çV¿ ç{¿ ç¬¿ ç◊¿ çÒ¿ é¿ éD¿ ép¿ éû¿ éΩ¿ é∆¿ éŸ¿ é„¿ é˜¿ é˚¿ é¸¿ è)¿ è/¿ è?¿ èE¿ èµ¿ èˇ¿ ê ¿ ês¿ ê ¿ êÀ¿ êÚ¿ ë,¿ ë2¿ ëb¿ ër¿ ë¢¿ ëµ¿ ëø¿ ë¿¿ í	¿ í
¿ í-¿ íq¿ í¿¿ í›¿ ì;¿ ì`¿ ìi¿ ìï¿ ìú¿ ìù¿ ì¿¿ ì¯¿ îL¿ îi¿ î∫¿ ï¿ ï¿ ï0¿ ï9¿ ïe¿ ïl¿ ïm¿ ïí¿ ï„¿ ï˘¿ ñ¿ ñl¿ ñ£¿ ñ»¿ ñ¸¿ ó¿ ó¿ óC¿ óp¿ óá¿ óæ¿ ó¯¿ òB¿ òg¿ òâ¿ òù¿ ò∞¿ òﬁ¿ òÚ¿ ò˛¿ ô	¿ ô7¿ ô@¿ ôA¿ ôh¿ ô±¿ ô»¿ ôÒ¿ ô¸¿ ö*¿ ö3¿ ö4¿ öY¿ ö¢¿ ö‘¿ ö˘¿ õ(¿ õ<¿ õH¿ õo¿ õó¿ õÆ¿ õﬂ¿ ú¿ ú\¿ úz¿ úª¿ úË¿ ù&¿ ù4¿ ù5¿ ùÉ¿ ùñ¿ ùæ¿ ù ¿ ù’¿ û¿ û¿ û¿ û¿ û8¿ û|¿ ûó¿ û≥¿ û»¿ û—¿ û˝¿ ü¿ ü.¿ ün¿ üî¿ ü∞¿ ü≈¿ üŒ¿ ü˙¿ †¿ †&¿ †k¿ †é¿ †∫¿ †¡¿ †Á¿ °$¿ °c¿ °ç¿ °¢¿ °´¿ °◊¿ °ﬁ¿ ¢¿ ¢M¿ ¢y¿ ¢û¿ ¢≥¿ ¢º¿ ¢Ë¿ ¢Ô¿ £¿ £^¿ £ä¿ £Ø¿ £ƒ¿ £Õ¿ £˘¿ § ¿ §&¿ §r¿ §û¿ §∆¿ §€¿ §‰¿ •¿ •¿ •5¿ •~¿ •¢¿ •Œ¿ •’¿ •˚¿ ¶?¿ ¶a¿ ¶ç¿ ¶î¿ ¶∫¿ ¶¸¿ ß¿ ßI¿ ßP¿ ßv¿ ß∑¿ ß◊¿ ®¿ ®
¿ ®0¿ ®o¿ ®ç¿ ®π¿ ®¿¿ ®¡¿ ®Á¿ ©1¿ ©Z¿ ©Ü¿ ©ç¿ ©é¿ ©¥¿ ™¿ ™-¿ ™Y¿ ™`¿ ™a¿ ™ã¿ ™Ã¿ ™Ï¿ ´¿ ´¿ ´I¿ ´ï¿ ´¿¿ ´Ï¿ ´Û¿ ¨¿ ¨i¿ ¨†¿ ¨Ã¿ ¨”¿ ¨Ò¿ ≠6¿ ≠Z¿ ≠Ü¿ ≠ç¿ ≠´¿ ≠¿ Æ)¿ Æ`¿ Æ°¿ Æ√¿ ÆÎ¿ Ø
¿ Ø1¿ Øq¿ Ø~¿ Øâ¿ Øí¿ Øæ¿ Ø≈¿ ØÎ¿ ∞0¿ ∞T¿ ∞Ä¿ ∞á¿ ∞≠¿ ∞˘¿ ±$¿ ±P¿ ±W¿ ±X¿ ±}¿ ±»¿ ±Ò¿ ≤¿ ≤$¿ ≤B¿ ≤Ä¿ ≤π¿ ≤Á¿ ≥¿ ≥J¿ ≥K¿ ≥}¿ ≥£¿ ≥ÿ¿ ¥¿ ¥o¿ ¥à¿ ¥æ¿ ¥˝¿ µ¿ µP¿ µ[¿ µx¿ µ¨¿ µ∂¿ ∂¿ ∂*¿ ∂+¿ ∂ê¿ ∂ô¿ ∂≈¿ ∂Ã¿ ∂Í¿ ∑3¿ ∑[¿ ∑á¿ ∑é¿ ∑¨¿ ∑Í¿ ∏¿ ∏3¿ ∏:¿ ∏X¿ ∏ô¿ ∏π¿ ∏Â¿ ∏Ï¿ π
¿ πO¿ πs¿ πü¿ π¶¿ π™¿ π´¿ π¬¿ π„¿ ∫¿ ∫¿ ∫	¿ ∫=¿ ∫C¿ ∫î¿ ∫ƒ¿ ∫Ÿ¿ ∫Ê¿ ª¿ ª¿ ª7¿ ªP¿ ªa¿ ªe¿ ªf¿ ªé¿ ªî¿ ª◊¿ ªı¿ º
¿ º¿ º(¿ ºA¿ ºY¿ ºp¿ ºè¿ ºì¿ ºî¿ º≈¿ ºÀ¿ Ω¿ Ω=¿ ΩJ¿ Ωm¿ Ω∑¿ Ω’¿ Ω„¿ ΩÈ¿ æ¿ æ¿ æ ¿ æd¿ æ~¿ æ†¿ æ¿¿ æÌ¿ ø¿ ø+¿ ø3¿ øb¿ øh¿ øl¿ øm¿ øπ¿ øË¿ øı¿ ¿(¿ ¿B¿ ¿U¿ ¿[¿ ¿\¿ ¿ü¿ ¿∞¿ ¿‰¿ ¿Î¿ ¡¿ ¡;¿ ¡Q¿ ¡¥¿ ¡Ì¿ ¬¿ ¬"¿ ¬B¿ ¬|¿ ¬™¿ ¬ ¿ ¬◊¿ √¿ √,¿ √N¿ √V¿ √\¿ √k¿ √o¿ √p¿ √Ω¿ √¸¿ ƒ	¿ ƒ9¿ ƒy¿ ƒ}¿ ƒ~¿ ƒº¿ ƒ¬¿ ≈¿ ≈`¿ ≈n¿ ≈{¿ ≈±¿ ≈«¿ ≈⁄¿ ≈‡¿ ≈·¿ ∆"¿ ∆:¿ ∆ï¿ ∆õ¿ ∆≤¿ ∆∂¿ ∆∑¿ «¿ «¿ «!¿ «r¿ «¿¿ »¿ »¿ »b¿ »®¿ »µ¿ »˚¿ …$¿ …A¿ …]¿ …c¿ …v¿ …z¿ …{¿ …≈¿ …“¿ …ÿ¿  '¿  C¿  P¿  Å¿  ó¿  •¿  ´¿  ¨¿  ˆ¿ À¿ Àq¿ Àw¿ À¥¿ Ã¿ Ã¿ ÃB¿ ÃF¿ ÃG¿ Ãï¿ Ã§¿ Ã™¿ Ã˘¿ Õ@¿ ÕY¿ Õf¿ Õu¿ Õü¿ ÕŸ¿ Õ›¿ Œ¿ ŒL¿ ŒP¿ ŒQ¿ Œù¿ Œﬂ¿ ŒÂ¿ œ4¿ œ{¿ œî¿ œ©¿ œ∂¿ œŸ¿ œˇ¿ –"¿ –&¿ –'¿ –s¿ –Ç¿ –à¿ –◊¿ —¿ —7¿ —D¿ —Ñ¿ —ù¿ —ˇ¿ “ ¿ “K¿ “r¿ “£¿ “©¿ “™¿ “€¿ “˛¿ ”¿ ”¿ ”O¿ ”k¿ ”q¿ ”¿¿ ‘¿ ‘ ¿ ‘-¿ ‘p¿ ‘ó¿ ‘•¿ ‘´¿ ‘ƒ¿ ’&¿ ’'¿ ’t¿ ’§¿ ’•¿ ’÷¿ ’˘¿ ’˝¿ ’˛¿ ÷J¿ ÷_¿ ÷l¿ ÷Å¿ ÷’¿ ◊¿ ◊G¿ ◊O¿ ◊S¿ ◊T¿ ◊£¿ ◊Ì¿ ◊Û¿ ÿ$¿ ÿ*¿ ÿx¿ ÿæ¿ ÿÀ¿ Ÿ¿ Ÿ8¿ Ÿ<¿ Ÿ=¿ Ÿä¿ Ÿ¬¿ Ÿ»¿ Ÿ˘¿ Ÿˇ¿ ⁄P¿ ⁄ñ¿ ⁄£¿ ⁄ﬁ¿ ⁄Ù¿ €2¿ €]¿ €í¿ €ß¿ €„¿ ‹¿ ‹5¿ ‹J¿ ‹P¿ ‹b¿ ‹f¿ ‹g¿ ‹Ø¿ ‹⁄¿ ‹Ô¿ ‹¿ ›9¿ ›U¿ ›É¿ ›«¿ ›˛¿ ﬁ;¿ ﬁb¿ ﬁÅ¿ ﬁá¿ ﬁã¿ ﬁå¿ ﬁ∆¿ ﬂ¿ ﬂa¿ ﬂ~¿ ﬂ⁄¿ ﬂ‡¿ ﬂÙ¿ ‡9¿ ‡`¿ ‡f¿ ‡j¿ ‡k¿ ‡Ω¿ ‡˙¿ ·J¿ ·ë¿ ·≥¿ ·Ê¿ ·Ó¿ ·Ù¿ ‚¿ ‚	¿ ‚
¿ ‚[¿ ‚v¿ ‚ã¿ ‚¿¿ ‚Ò¿ „¿ „¿ „b¿ „å¿ „≤¿ „ÿ¿ „·¿ „Ë¿ „È¿ ‰"¿ ‰o¿ ‰∫¿ ‰¯¿ Â9¿ Âq¿ Âπ¿ Ê¿ Ê-¿ ÊU¿ Êù¿ Ê¥¿ Ê˜¿ Ê˚¿ Ê¸¿ ÁJ¿ Áì¿ Áô¿ ÁÊ¿ Ë!¿ Ë.¿ Ëe¿ Ë°¿ Ë•¿ Ë¶¿ ËÊ¿ È¿ ÈK¿ Èì¿ È–¿ È€¿ Í¿ Íl¿ Íx¿ Í¿ ÍÄ¿ Í∑¿ Î¿ Î¿ Î¿ ÎS¿ Î§¿ Î¡¿ Î˚¿ ÏU¿ ÏÑ¿ Ïë¿ Ïò¿ Ïú¿ Ïù¿ Ï˚¿ Ì;¿ Ì^¿ Ìì¿ ÌÕ¿ Ìˇ¿ Ó%¿ Ó[¿ Ón¿ Óz¿ ÓÑ¿ Óå¿ Óí¿ Óπ¿ ÓΩ¿ Óæ¿ ÓÛ¿ Ô¿ Ô ¿ Ô:¿ ÔA¿ Ôh¿ Ô∏¿ Ô≈¿ ÔÌ¿ ÔÒ¿ ÔÚ¿ -¿ M¿ c¿ i¿ †¿ √¿ ‚¿ Ò¿ Ò¿ ÒR¿ ÒV¿ ÒW¿ Ò|¿ Òó¿ Ò∆¿ Ò„¿ ÒÍ¿ Ú¿ Ú)¿ Ú6¿ ÚÖ¿ Ú—¿ Û¿ ÛT¿ ÛÖ¿ Ûã¿ Ûè¿ Ûê¿ Û∆¿ Ù¿ Ù/¿ ÙC¿ ÙI¿ ÙÖ¿ Ùâ¿ Ùä¿ Ùƒ¿ Ù˘¿ Ù˙¿ ıL¿ ıs¿ ı•¿ ıË¿ ˆ¿ ˆ ¿ ˆ[¿ ˆÉ¿ ˆò¿ ˆ†¿ ˆ¶¿ ˆ∏¿ ˆº¿ ˆΩ¿ ˆ˜¿ ˜-¿ ˜o¿ ˜é¿ ˜®¿ ˜Æ¿ ˜Ò¿ ¯"¿ ¯5¿ ¯9¿ ¯:¿ ¯ä¿ ¯–¿ ˘¿ ˘f¿ ˘v¿ ˘{¿ ˘∑¿ ˘Ù¿ ˙¿ ˙R¿ ˙à¿ ˙’¿ ˙Ï¿ ˙¿ ˙Ò¿ ˚¿ ˚>¿ ˚e¿ ˚k¿ ˚–¿ ˚ˇ¿ ¸d¿ ¸á¿ ¸¢¿ ¸™¿ ¸∞¿ ¸Ô¿ ¸Û¿ ¸Ù¿ ˝¿ ˝@¿ ˝o¿ ˝ï¿ ˝ú¿ ˝‹¿ ˝‡¿ ˝·¿ ˛0¿ ˛b¿ ˛o¿ ˛¥¿ ˛˛¿ ˇ¿ ˇ¿ ˇO¿ ˇô¿ ˇ±¿ ˇ–¿ ˇ÷¿ ˇÔ¿ ¿ V¿ j¿ q¿ u¿ v¿ √¿ ı¿8¿Ä¿Ñ¿Ö¿–¿#¿w¿ì¿®¿Ø¿»¿¿/¿C¿J¿N¿O¿ú¿Í¿¿¿j¿∏¿	¿W¿l¿r¿Ç¿à¿÷¿Â¿3¿Ü¿ä¿ã¿œ¿¿2¿6¿7¿t¿â¿Õ¿Ò¿¿ ¿1¿5¿6¿ã¿’¿Ì¿	¿	¿	¿	a¿	}¿	ñ¿	´¿	≤¿
	¿
¿
¿
[¿
®¿
Ã¿
“¿¿V¿¶¿˚¿ˇ¿ ¿X¿¢¿¯¿L¿h¿á¿ú¿£¿º¿¿#¿7¿>¿B¿C¿{¿™¿Ω¿√¿È¿¿ ¿&¿a¿´¿¬¿’¿€¿¿¿¿?¿Y¿Ü¿å¿∆¿ ¿À¿Ù¿¿B¿H¿Ü¿∑¿˝¿¿¿N¿U¿j¿n¿o¿π¿ ¿ı¿,¿0¿1¿l¿Ñ¿ƒ¿¿¿¿¿e¿≥¿È¿+¿/¿0¿c¿{¿œ¿Ù¿˚¿¿:¿U¿p¿∏¿ø¿√¿ƒ¿
¿.¿4¿k¿¨¿»¿„¿˝¿¿X¿\¿]¿±¿Ë¿.¿r¿∫¿˝¿˛¿?¿[¿¿°¿¡¿»¿…¿¿!¿"¿S¿r¿ì¿≥¿–¿$¿I¿P¿¿¿¿¡¿¿D¿Ü¿¢¿—¿Ÿ¿¿k¿Ü¿Ø¿∑¿ﬂ¿˝¿<¿k¿¿¿ ¿“¿˘¿ˇ¿  ¿ ¿ X¿ ~¿ ú¿ ª¿ ﬂ¿ ˆ¿!¿!{¿!Ñ¿!§¿!´¿!Ø¿!∞¿!Ò¿">¿"u¿"{¿" ¿#¿#-¿#3¿#C¿#I¿#í¿#≥¿$¿$n¿$r¿$s¿$ü¿$Ω¿$‘¿$Í¿$¿%:¿%R¿%e¿%k¿%É¿%è¿%µ¿%”¿%˜¿&¿&/¿&8¿&?¿&C¿&D¿&ï¿&¢¿&Ó¿'¿'S¿'Y¿'ö¿'û¿'ü¿'Â¿(¿(¿(_¿(Æ¿(Ò¿)+¿){¿)…¿*¿*g¿*ã¿*ò¿*∏¿*Œ¿*È¿+¿+¿+>¿+[¿+h¿+°¿+¥¿+∫¿+·¿,.¿,h¿,{¿,Å¿,Ç¿,´¿,‚¿-	¿-¿--¿-N¿-f¿-g¿-∑¿.¿.U¿.n¿.ô¿.Æ¿.∂¿.º¿.Ω¿.¸¿/¿/H¿/N¿/n¿/Å¿/á¿/à¿/∞¿/≈¿0¿0¿0¿0F¿0Z¿0n¿0å¿0™¿0±¿0µ¿0∂¿1¿1E¿1ä¿1¡¿1˘¿2C¿2[¿2±¿2∑¿2—¿2›¿3¿3!¿3<¿3`¿3w¿3¢¿3¬¿3ı¿4¿4-¿4à¿4Æ¿4€¿4Á¿4Ë¿5F¿5¶¿5Ì¿6[¿6≈¿7¿7U¿7ü¿7“¿7„¿7¿7Ò¿83¿8ó¿8‹¿9¿9Y¿9Ä¿9€¿:%¿:k¿:≥¿:Ò¿:ˇ¿;¿;¿;¿;N¿;á¿;œ¿<¿<[¿<í¿<£¿<÷¿=¿=R¿=ì¿=“¿>¿>'¿>7¿>z¿>à¿>†¿>·¿?¿?¿?¿?(¿?U¿?É¿?º¿?˘¿@8¿@I¿@J¿@ê¿@¬¿A¿AW¿Aè¿A»¿B	¿B<¿Bo¿BÇ¿Bí¿B«¿C ¿C=¿C|¿Cç¿Cõ¿C≥¿C‘¿C‡¿D¿D¿D¿D¿Dp¿Dt¿Du¿D¬¿DÎ¿E ¿En¿Eó¿E±¿E‡¿F¿FQ¿F{¿Fù¿F¿¿Fÿ¿F‡¿FÊ¿G9¿G=¿G>¿Gé¿G∑¿G¿H=¿Hf¿HÄ¿HØ¿HÁ¿I ¿IJ¿Il¿Iè¿Iß¿IØ¿Iµ¿J¿J¿J¿Ja¿Jä¿J€¿J˚¿K#¿K*¿K~¿Kü¿K»¿Kœ¿K¯¿L¿LA¿Ly¿Lõ¿L—¿M	¿M+¿ML¿Md¿Ml¿Mr¿M≈¿M…¿M ¿N¿N+¿NQ¿Ng¿No¿Nu¿N®¿N¨¿N≠¿O	¿O!¿O_¿O™¿O±¿Oµ¿O∂¿P
¿Pl¿P£¿Q¿Q
¿Q¿Q[¿Q©¿Q˘¿R¿RX¿R¿RΩ¿R√¿S¿S¿S¿S^¿Sø¿S√¿Sƒ¿T¿T?¿TÑ¿Tä¿TÏ¿U¿Uc¿U~¿U…¿V¿V#¿V4¿V>¿VF¿Vb¿Vh¿VÀ¿Vœ¿V–¿W3¿WK¿Wä¿W’¿W‹¿W‡¿W·¿X"¿X(¿Xu¿Xò¿XÏ¿Y¿Y¿Y¿Y5¿Y6¿YS¿Yl¿Ym¿Yò¿Yµ¿Y˚¿Z/¿ZB¿Zt¿Z{¿Z¿ZÄ¿Z©¿ZŒ¿[¿[¿[4¿[t¿[z¿[~¿[¿[Œ¿\$¿\(¿\)¿\s¿\¨¿\≤¿]¿].¿];¿]ü¿]ﬁ¿]‚¿]„¿^-¿^[¿^a¿^±¿^›¿^Í¿_¿_*¿_.¿_/¿_Ñ¿_Ÿ¿_⁄¿`¿`5¿`9¿`:¿`g¿`q¿`«¿`Ù¿aD¿aç¿a›¿aˇ¿b¿b¿b9¿b:¿bá¿bº¿bı¿c$¿cr¿cë¿c©¿c≥¿cÿ¿cÌ¿c˜¿d¿d8¿dU¿du¿dç¿dº¿e¿e¿e¿e¿e!¿e"¿et¿e°¿eß¿e‹¿f¿f$¿f7¿fO¿fS¿fU¿fV¿fû¿f¢¿fÒ¿g9¿gP¿g£¿g§¿g∑¿g«¿g»¿h¿h¿h¿h5¿h6¿hQ¿hc¿hd¿h{¿hå¿hú¿h†¿h°¿hº¿h—¿hﬂ¿h„¿hÂ¿hÊ¿i7¿iq¿iu¿i∆¿j¿jg¿j≥¿j‡¿j‰¿k2¿k¿kö¿kø¿kÈ¿kÓ¿l6¿lÄ¿lò¿lù¿l‚¿m¿m>¿m?¿mf¿m†¿m°¿m·¿mÁ¿n7¿nK¿nã¿nå¿n›¿o¿o8¿ob¿oç¿oõ¿o°¿o·¿p#¿p?¿pM¿pS¿p¿pÄ¿pö¿pœ¿q¿qP¿qt¿qé¿qñ¿q¥¿q–¿q‡¿r8¿rA¿rZ¿r{¿rÉ¿rù¿r™¿r≈¿rÀ¿rÃ¿s¿sh¿sµ¿s¸¿t¿t#¿tA¿t\¿td¿t}¿tÉ¿tá¿tà¿tØ¿t∆¿u¿uc¿u®¿uÚ¿v?¿vq¿v¢¿v∑¿vΩ¿v—¿v’¿v÷¿w%¿wC¿wô¿wﬁ¿wÌ¿x¿x:¿xZ¿x`¿xa¿xö¿x«¿xÈ¿y¿y¿y	¿yC¿yf¿yú¿yÊ¿z¿zR¿z±¿z≈¿zﬂ¿z˛¿{ ¿{(¿{T¿{Z¿{[¿{§¿{«¿|¿|@¿|y¿|¨¿|ˇ¿}¿}A¿}]¿}{¿}õ¿}Ω¿} ¿}’¿}÷¿}ˇ¿~/¿~c¿~ì¿~õ¿~«¿~Õ¿~Œ¿~·¿~˚¿¿¿¿¿>¿]¿^¿j¿£¿•¿¶¿È¿Ì¿Ä8¿ÄÖ¿Äœ¿Å¿Å-¿Å1¿Åf¿Åj¿Å∫¿Ç¿ÇV¿Ç°¿ÇÈ¿É¿É¿Éd¿ÉØ¿Ñ ¿ÑM¿Ñï¿Ñƒ¿Ö¿Ö¿Ö+¿ÖD¿Öx¿Ö∞¿Ö∂¿Ö∑¿Ö·¿Ö˜¿Ö¯¿Ü>¿ÜD¿Üï¿Ü¿¿á¿á¿á]¿áÖ¿áã¿áŸ¿à¿à¿àI¿àù¿àû¿à™¿àÌ¿àÔ¿à¿âI¿âd¿âe¿âÖ¿âÜ¿â´¿â¨¿â∆¿â«¿â˙¿â˚¿äG¿äx¿ä§¿ä•¿ä±¿ä∆¿ä›¿äﬁ¿ã7¿ãâ¿ã≠¿ã¥¿ãÔ¿å<¿å@¿åA¿åM¿å`¿åº¿ç¿ç5¿ç<¿çQ¿çU¿çV¿çç¿ç»¿é¿é¿é¿é3¿éP¿éq¿éÜ¿éü¿é∂¿éº¿é“¿è¿è(¿èy¿èú¿è∞¿è∂¿ê¿ê¿êR¿êä¿ê¡¿ë¿ë1¿ëC¿ëK¿ëê¿ë⁄¿í¿í1¿í9¿í:¿ír¿í´¿í¯¿ì¿ì¿ì¿ì¿ìJ¿ìt¿ìÜ¿ì–¿î¿î<¿îÅ¿îü¿îß¿î≠¿îº¿î‘¿î⁄¿îÍ¿îÓ¿îÔ¿ï>¿ïQ¿ïW¿ï¢¿ïÒ¿ñ=¿ñX¿ñõ¿ñÿ¿ó¿ó¿ói¿óõ¿ó¬¿óˆ¿ò¿ò#¿ò$¿òz¿ò ¿ò‰¿òË¿òÈ¿ô¿ô'¿ô5¿ô;¿ô<¿ôj¿ô¿¿ô˙¿öA¿öB¿ög¿ök¿öl¿öõ¿öÃ¿öÚ¿öˆ¿ö˜¿õ*¿õ[¿õÅ¿õÖ¿õÜ¿õµ¿ú¿úS¿ú£¿úÙ¿ù8¿ùj¿ù«¿ù‡¿ùÁ¿û¿û3¿û@¿û}¿û…¿ûœ¿û”¿û‘¿ûÍ¿ü¿ü¿ü¿ü?¿üh¿ü¥¿ü∫¿üæ¿üø¿üÀ¿üÚ¿†;¿†Ä¿†∆¿†ÿ¿†Ú¿°¿°(¿°M¿°p¿°ô¿°≈¿°Î¿¢P¿¢[¿¢å¿¢Ÿ¿£¿£\¿£ª¿£»¿£—¿£ÿ¿£‹¿£ﬁ¿£ﬂ¿§¿§<¿§o¿§à¿§¥¿§Ï¿§Ú¿§ˆ¿§˜¿•0¿•6¿•v¿•™¿•ﬂ¿¶¿¶%¿¶5¿¶L¿¶P¿¶Q¿¶ó¿¶≤¿¶ƒ¿¶›¿¶Ò¿ß¿ß¿ß¿ß/¿ß@¿ßd¿ßt¿ßã¿ßè¿ßê¿ß”¿ßŸ¿®¿®#¿®S¿®å¿®ç¿®ß¿®Ã¿®È¿©¿©J¿©c¿©i¿©m¿©n¿©æ¿©ƒ¿™¿™¿™>¿™^¿™´¿™Ø¿™∞¿™Ã¿™ı¿´!¿´?¿´V¿´o¿´}¿´É¿´®¿´…¿´˜¿¨¿¨¿¨¿¨¿¨6¿¨\¿¨Ä¿¨Ã¿¨Â¿¨Ú¿≠	¿≠'¿≠@¿≠F¿≠J¿≠K¿≠ò¿≠¨¿≠È¿≠Î¿≠Ï¿Æ%¿Æ[¿Æ\¿ÆÇ¿ÆÉ¿Æè¿Æ‘¿Ø¿Ø¿Ø¿Ø¿Øw¿Øü¿Ø£¿Ø•¿Ø¶¿Øÿ¿∞5¿∞6¿∞h¿∞â¿∞µ¿∞‘¿∞Ó¿∞Ù¿±
¿±¿±¿±¿±=¿±>¿±J¿±u¿±v¿±Ç¿±∏¿±È¿±Ì¿±Ó¿±˙¿≤1¿≤O¿≤e¿≤É¿≤÷¿≤Ù¿≥7¿≥@¿≥G¿≥K¿≥M¿≥N¿≥Y¿≥r¿≥≤¿≥÷¿¥	¿¥
¿¥¿¥8¿¥9¿¥E¿¥h¿¥î¿¥®¿¥Æ¿µ
¿µ¿µ¿µ¿µO¿µQ¿µR¿µï¿µô¿µÈ¿∂ ¿∂¿∂0¿∂W¿∂v¿∂í¿∂∞¿∂À¿∂Ï¿∂Ú¿∂Û¿∑¿∑0¿∑[¿∑s¿∑ò¿∑ô¿∑•¿∑»¿∑Ù¿∏¿∏¿∏B¿∏n¿∏î¿∏⁄¿∏¸¿π ¿π¿π¿πl¿πn¿πo¿πê¿πÿ¿∫-¿∫Ç¿∫É¿∫Œ¿ª¿ª	¿ªZ¿ªß¿ª‘¿º¿º*¿ºI¿ºf¿ºä¿ºë¿ºØ¿ºø¿ºŸ¿ºÏ¿ºˆ¿Ω¿ΩD¿ΩZ¿Ω®¿Ω“¿Ω›¿ΩÁ¿ΩÌ¿ΩÒ¿ΩÚ¿æ¿æ¿æa¿æo¿æu¿æƒ¿æÂ¿æˇ¿ø ¿øQ¿øá¿øØ¿ø∞¿ø‹¿ø›¿¿¿¿¿¿¿¿<¿¿\¿¿]¿¿i¿¿|¿¿ô¿¿≤¿¿À¿¿‡¿¿‰¿¿Â¿¿Ò¿¡¿¡;¿¡I¿¡O¿¡P¿¡Ü¿¡á¿¡º¿¡ ¿¡–¿¡—¿¬¿¬V¿¬y¿¬ö¿¬“¿¬‰¿¬Ï¿√1¿√7¿√è¿√ÿ¿ƒ¿ƒd¿ƒe¿ƒ≤¿ƒ“¿ƒ¿≈!¿≈I¿≈g¿≈n¿≈o¿≈é¿≈®¿≈√¿≈Í¿≈¿∆ ¿∆$¿∆%¿∆f¿∆§¿∆„¿«¿«[¿«{¿«¿¿«¡¿«›¿«Ì¿»¿»L¿»M¿»k¿»{¿»§¿»¬¿»¸¿»˝¿…)¿…n¿…y¿…à¿…º¿…Î¿ ¿ /¿ 0¿ Å¿ À¿À¿ÀO¿À\¿Àm¿À§¿ÀÁ¿À¸¿Ã¿Ã¿Ã:¿ÃZ¿Ãu¿Ã|¿Ãö¿ÃÂ¿Õ¿Õ`¿Õa¿Õz¿Õä¿Õ°¿Õæ¿ÕŒ¿ÕÊ¿ÕÙ¿Œ¿Œ¿Œ¿Œc¿Œ{¿Œü¿Œ£¿Œ§¿Œæ¿Œ—¿ŒÂ¿œ¿œ¿œ4¿œC¿œX¿œ^¿œq¿œ‘¿–¿–u¿–ú¿–ª¿––¿–Ë¿—¿—2¿—u¿—°¿—À¿——¿—“¿—Ô¿“F¿“y¿“ã¿“©¿“ø¿“Â¿“ˇ¿”¿”¿”+¿”;¿”b¿”ê¿”•¿‘¿‘¿‘#¿‘$¿‘F¿‘~¿‘ó¿‘ª¿‘¡¿‘¬¿‘ı¿’<¿’ç¿’∂¿’‡¿÷
¿÷R¿÷Y¿÷¢¿◊¿◊¿◊¿◊¿◊(¿◊5¿◊_¿◊¿◊õ¿◊∞¿◊∑¿◊…¿◊Õ¿◊Œ¿ÿ¿ÿ'¿ÿs¿ÿ¿¿ÿÒ¿Ÿ-¿ŸW¿Ÿu¿Ÿ´¿Ÿœ¿⁄3¿⁄_¿⁄g¿⁄á¿⁄ç¿⁄ü¿⁄£¿⁄•¿⁄¶¿⁄Œ¿⁄Û¿⁄Ù¿€>¿€d¿€ä¿€ã¿€Ì¿€Ó¿‹-¿‹W¿‹ã¿‹√¿‹…¿‹ ¿›¿›i¿›j¿›v¿›ÿ¿›⁄¿›€¿ﬁ7¿ﬁw¿ﬁ∑¿ﬁ∏¿ﬁı¿ﬂ%¿ﬂ*¿ﬂ+¿ﬂF¿ﬂG¿ﬂc¿ﬂd¿ﬂp¿ﬂó¿ﬂ…¿‡¿‡¿‡D¿‡ì¿‡„¿‡Ù¿·"¿·h¿·É¿·•¿·ÿ¿‚ ¿‚¿‚D¿‚W¿‚~¿‚Ÿ¿‚Ï¿„¿„0¿„>¿„R¿„S¿„y¿„™¿„ƒ¿„Ÿ¿‰¿‰=¿‰s¿‰ú¿‰©¿‰¥¿‰¡¿‰ﬂ¿Â'¿ÂT¿Ây¿Â∏¿Â—¿Ê¿Ê:¿ÊK¿Êp¿Ê≤¿Ê√¿ÊÙ¿Á¿ÁJ¿Áw¿ÁÑ¿Áè¿Áò¿Áü¿Á†¿Á∑¿Á¸¿ËB¿Ës¿Ëç¿Ëî¿Ëò¿Ëô¿ËΩ¿È¿È¿È	¿È0¿ÈC¿ÈW¿È}¿Èá¿Èç¿Èë¿Èí¿ÈÆ¿Èœ¿È”¿È‘¿Í¿Í¿Í+¿ÍN¿ÍX¿Í^¿Íb¿Íd¿Íe¿Íú¿Íæ¿Íÿ¿Í¸¿Î¿Î%¿Î&¿Î=¿Îg¿Îê¿Îë¿ÎÍ¿Ï7¿Ï8¿ÏD¿Ïñ¿Ïò¿Ïô¿ÏÂ¿Ì¿Ì"¿Ì#¿Ì/¿ÌB¿Ìf¿Ìá¿Ì™¿Ì ¿Ìﬂ¿Ì„¿Ì‰¿Ì¿Ó¿Ó)¿ÓZ¿Ót¿Óç¿Ó©¿Ó˙¿Ô¿Ôd¿Ô•¿Ô¥¿Ô¡¿Ôﬂ¿Ô˙¿M¿\¿v¿»¿◊¿˘¿Ò¿Ò¿Ò¿Ò!¿Ò%¿Ò&¿ÒW¿Òñ¿Òö¿Òõ¿ÒÀ¿Ú¿Ú¿Ú¿Úf¿Ú∑¿Ú€¿ÚÚ¿Ú¯¿Ú˘¿Û¿Û@¿Ûc¿Ûm¿Ûz¿Û´¿ÛÕ¿Û◊¿Û›¿Û·¿Û„¿Û‰¿Ù%¿ÙL¿Ùn¿Ùã¿Ù¨¿Ù≤¿Ù≥¿Ù”¿Ù¿ı¿ı¿ı¿ıB¿ı}¿ı∞¿ı∆¿ı‘¿ı⁄¿ı€¿ˆ+¿ˆÜ¿ˆ¨¿ˆ∫¿ˆ¿¿ˆ¡¿ˆ„¿˜
¿˜1¿˜2¿˜]¿˜s¿˜å¿˜©¿˜Ò¿¯¿¯5¿¯6¿¯U¿¯e¿¯å¿¯∫¿¯ª¿¯ﬁ¿˘#¿˘V¿˘É¿˘≤¿˘Ù¿˙8¿˙9¿˙[¿˙ß¿˙Ì¿˙Ó¿˚¿˚#¿˚u¿˚â¿˚ê¿˚ë¿˚´¿˚…¿˚◊¿¸'¿¸.¿¸2¿¸3¿¸?¿¸ê¿¸…¿¸Õ¿¸œ¿¸–¿˝¿˝9¿˝=¿˝à¿˝¢¿˝»¿˝‰¿˝Ê¿˝Á¿˛5¿˛I¿˛[¿˛o¿˛á¿˛ü¿˛π¿ˇ¿ˇP¿ˇà¿ˇó¿ˇù¿ˇû¿ˇø¿ˇ‘¿ˇ’¿ˇ¿ ¿ ¿  ¿ 4¿ 5¿ x¿ é¿ è¿ ¥¿ “¿ Ê¿ ˙¿¿8¿?¿C¿D¿P¿Æ¿∞¿±¿ ¿¿R¿V¿´¿“¿÷¿2¿è¿§¿ƒ¿»¿¿#¿V¿v¿ë¿û¿§¿®¿»¿¿7¿t¿í¿ò¿π¿˘¿¿#¿>¿M¿g¿o¿u¿y¿ì¿§¿¶¿ß¿“¿÷¿¿x¿ô¿°¿‰¿¿S¿n¿â¿©¿∆¿‚¿˙¿	!¿	A¿	h¿	ë¿
¿
¿
&¿
1¿
:¿
B¿
b¿
f¿
h¿
i¿
Ã¿¿.¿F¿ä¿÷¿¿(¿=¿D¿H¿I¿d¿•¿‹¿/¿D¿L¿R¿d¿h¿i¿§¿Ã¿¿7¿g¿í¿ì¿„¿3¿y¿ò¿Â¿¿G¿Ä¿ÿ¿˙¿¿¿¿¿@¿Z¿ì¿∫¿ÿ¿/¿>¿K¿V¿m¿Œ¿ÿ¿Ï¿Ú¿¿¿¿)¿\¿`¿p¿r¿s¿¢¿¶¿Ú¿¿I¿ù¿£¿¿E¿ì¿Œ¿¿¿¿H¿L¿ç¿ë¿‹¿‡¿!¿=¿p¿à¿ñ¿‘¿¿I¿O¿`¿h¿z¿|¿}¿≠¿±¿¿?¿p¿≤¿œ¿¿ ¿!¿v¿z¿¢¿¶¿Ò¿ı¿E¿x¿¥¿”¿’¿÷¿¿P¿R¿S¿ó¿õ¿Ê¿Í¿:¿l¿Œ¿¿¿¿i¿¶¿√¿¿3¿4¿\¿Å¿ï¿§¿®¿¬¿ﬁ¿˛¿ ¿ ¿ ¿ <¿ [¿ ~¿ •¿ »¿ …¿!¿!:¿!Ç¿!¨¿!˚¿"¿"5¿"N¿"i¿"Ü¿"•¿"Æ¿"µ¿"∂¿"ﬂ¿#¿#=¿#j¿#n¿#â¿#ã¿#å¿#’¿#˛¿$¿$d¿$∑¿$‹¿$ˇ¿%¿%1¿%^¿%Ñ¿%ü¿%√¿%ﬁ¿&¿&¿&¿&W¿&¿&Ä¿& ¿&È¿&Ô¿'=¿'Ö¿'†¿'°¿'¿(
¿(¿(M¿(x¿(y¿(Ö¿(•¿(¶¿(≤¿(Ã¿(Õ¿(Ÿ¿(¸¿(˝¿)E¿)K¿)ù¿)È¿*%¿*}¿*†¿*°¿*Ú¿*Û¿+!¿+"¿+.¿+ë¿+Œ¿+Ù¿,¿,>¿,D¿,\¿,ó¿,ù¿,‚¿-¿-¿-_¿-¢¿-™¿-Ô¿.¿.N¿.V¿.\¿.è¿.Ë¿.Ó¿/¿/¿/¿/¿/]¿/¢¿/Î¿04¿0Ä¿0«¿1¿1O¿1_¿1c¿1d¿1p¿1Õ¿1˛¿2¿2¿2¿2n¿2¬¿2Ú¿3V¿3g¿3k¿3l¿3x¿3Ÿ¿4¿4'¿4_¿4´¿4±¿4√¿4«¿4»¿4‘¿5¿5¿56¿5V¿5]¿5à¿5§¿5ƒ¿6¿6W¿6é¿6‘¿6Ï¿74¿7;¿7?¿7A¿7B¿7k¿7Ç¿7ú¿7û¿7ü¿7Ï¿8
¿8¿8\¿8•¿8Ó¿9:¿9á¿9ë¿9ï¿9‚¿:)¿:x¿:∆¿:€¿:ﬂ¿;-¿;{¿;•¿;©¿;ˆ¿<¿<
¿<P¿<T¿<h¿<l¿<∏¿<‚¿<Ê¿<Ú¿=¿=1¿=d¿=õ¿=£¿=©¿=±¿=µ¿=˝¿>G¿>Ö¿>â¿>ï¿>¿¿>ﬂ¿?
¿?¿?¿?&¿?*¿?8¿?<¿?ü¿?Ô¿@7¿@T¿@É¿@∫¿@ª¿@Î¿@˛¿A¿AD¿AE¿Ag¿Aë¿Aí¿Aµ¿A˚¿Aˇ¿B ¿BO¿Bk¿Bq¿B†¿B∫¿B◊¿Bˆ¿C¿C&¿C,¿C0¿C1¿Cd¿Cä¿Cß¿C«¿C‘¿CÚ¿C¯¿C¸¿C˝¿D7¿DL¿Di¿Dè¿Dú¿D ¿DÊ¿D˚¿E¿E¿E¿E,¿E=¿E_¿Ex¿E|¿E~    8_ProxyLayer_MulticastCanvas_calculateSubtreeBoundsHelper_calculateSubtreeBounds_ScreenshotContainerLayer_ScreenshotData_ScreenshotPaintingContext_DiagnosticsPathNode_followDiagnosticableChainInspectorReferenceData_WidgetInspectorServiceWidgetInspectorService_LocationCount_ElementLocationStatsTracker_WidgetForTypeTestsWidgetInspector_WidgetInspectorStateInspectorSelection_InspectorOverlay_RenderInspectorOverlay_TransformedRect_InspectorOverlayRenderState_kMaxTooltipLines_kTooltipBackgroundColor"_kHighlightedRenderObjectFillColor$_kHighlightedRenderObjectBorderColor_InspectorOverlayLayer_kScreenEdgeMargin_kTooltipPadding_kOffScreenMargin_messageStyle_ExitWidgetSelectionButtonGroup$_ExitWidgetSelectionButtonGroupState_TooltipGestureDetector_TooltipGestureDetectorState"_ExitWidgetSelectionTooltipPainter_HasCreationLocation	_Location_isDebugCreatordebugTransformDebugCreator_parseDiagnosticsNode_describeRelevantUserCodeDevToolsDeepLinkPropertydebugIsLocalCreationLocationdebugIsWidgetLocalCreation_describeCreationLocation_getObjectCreationLocation_getCreationLocation_locationToId
_locations_toLocationId_locationIdMapToJsonInspectorSerializationDelegate_WidgetFactorywidgetFactoryWeakMap=flutter.widgets.WidgetInspectorService.getChildrenSummaryTreeÄ⁄Requires [Widget] creation locations which are only available for debug
mode builds when the `--track-widget-creation` flag is enabled on the call
to the `flutter` tool. This flag is enabled by default in debug builds. ob
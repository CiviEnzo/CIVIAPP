Ä˛detachtoString_containerLayerestimatedBoundsrepaintCompositedChild_repaintCompositedChildupdateLayerProperties%debugInstrumentRepaintCompositedChild
paintChild_compositeChildappendLayer_isRecording_currentLayer	_recorder_canvascanvas_startRecordingaddCompositionCallbackstopRecordingIfNeededsetIsComplexHintsetWillChangeHintaddLayer	pushLayercreateChildContextpushClipRectpushClipRRectpushClipPathpushColorFilterpushTransformpushOpacityisTightisNormalizeddebugAssertIsValid_ownerlistenerdisposeonNeedVisualUpdateonSemanticsOwnerCreatedonSemanticsUpdateonSemanticsOwnerDisposedrequestVisualUpdaterootNode	_rootNode_shouldMergeDirtyNodes_nodesNeedingLayoutdebugDoingLayout_debugDoingLayout_debugDoingChildLayoutflushLayout#_debugAllowMutationsToDirtySubtrees_enableMutationsToDirtySubtrees"_nodesNeedingCompositingBitsUpdateflushCompositingBits_nodesNeedingPaintdebugDoingPaint_debugDoingPaint
flushPaintsemanticsOwner_semanticsOwner debugOutstandingSemanticsHandles_outstandingSemanticsHandlesensureSemantics_updateSemanticsOwner_didDisposeSemanticsHandle_debugDoingSemantics_nodesNeedingSemanticsflushSemanticsdebugDescribeChildrendebugFillProperties	_children	_manifold_debugParent_debugSetParent%_debugRootSuffixForTimelineEventNamesattach!_debugAllowChildListModifications
adoptChild	dropChildvisitChildrensemanticsEnabled
reassembledebugDisposed_debugDisposed
parentDatasetupParentDatadepth_depthredepthChildredepthChildrenparent_parentsemanticsParentdebugCreator_reportExceptiondebugDoingThisResize_debugDoingThisResizedebugDoingThisLayout_debugDoingThisLayoutdebugActiveLayout_debugActiveLayout_withDebugActiveLayoutCleareddebugCanParentUseSize_debugCanParentUseSize_debugMutationsLocked_debugCanPerformMutationsdebugLayoutParentownerattacheddebugNeedsLayout_needsLayout_relayoutBoundary debugDoingThisLayoutWithCallback_doingThisLayoutWithCallbackconstraints_constraintsdebugAssertDoesMeetConstraintsdebugCheckingIntrinsics._debugRelayoutBoundaryAlreadyMarkedNeedsLayoutmarkNeedsLayoutmarkParentNeedsLayout%markNeedsLayoutForSizedByParentChange_cleanChildRelayoutBoundary!_propagateRelayoutBoundaryToChild_setRelayoutBoundaryscheduleInitialLayout_layoutWithoutResizelayoutdebugResetSizesizedByParentperformResizeperformLayoutinvokeLayoutCallbackdebugDoingThisPaint_debugDoingThisPaintdebugActivePaint_debugActivePaintisRepaintBoundary!debugRegisterRepaintBoundaryPaintalwaysNeedsCompositing_wasRepaintBoundaryupdateCompositedLayerlayer_layerHandle
debugLayer_needsCompositingBitsUpdatemarkNeedsCompositingBitsUpdate_needsCompositingneedsCompositing_updateCompositingBitsdebugNeedsPaint_needsPaintdebugNeedsCompositedLayerUpdate_needsCompositedLayerUpdatemarkNeedsPaintmarkNeedsCompositedLayerUpdate_skippedPaintingOnLayerscheduleInitialPaintreplaceRootLayer_paintWithContextpaintBounds
debugPaintpaintapplyPaintTransformpaintsChildgetTransformTodescribeApproximatePaintClipdescribeSemanticsClipscheduleInitialSemanticsdescribeSemanticsConfigurationsendSemanticsEvent_cachedSemanticsConfiguration_semanticsConfigurationsemanticBoundsdebugNeedsSemanticsUpdate_needsSemanticsUpdate
_semanticsdebugSemanticsclearSemanticsmarkNeedsSemanticsUpdate_updateSemantics_getSemanticsForParent_marksExplicitInMergeGroupvisitChildrenForSemanticsassembleSemanticsNodehandleEventtoStringShorttoStringDeeptoStringShallowshowOnScreendescribeForErrordebugValidateChild_childchildpreviousSiblingnextSibling_debugUltimatePreviousSiblingOf_debugUltimateNextSiblingOf_childCount
childCount_firstChild
_lastChild_insertIntoChildListinsertaddaddAll_removeFromChildListremove	removeAllmove
firstChild	lastChildchildBefore
childAftersystemFontsDidChange'_hasPendingSystemFontsDidChangeCallBack_scheduleSystemFontsUpdate dropsSemanticsOfPreviousSiblingsmergeUpFragmentssiblingMergeGroups_ancestorChaincompileChildrenconfigmarkAsExplicithasConfigForParent_tagsForChildrenaddTagsaddAncestor_mergeIntoParent_config_isConfigWritable_mergesToSibling_siblingMergeGroups_mergeSiblingGroup_computeSemanticsGeometry_ensureConfigIsWritable_isExplicit_needsGeometryUpdate_paintClipRect_semanticsClipRect
_transform_rect	transformsemanticsClipRectpaintClipRectrect_computeValues_transformRect!_applyIntermediatePaintTransforms_temporaryTransformHolder_computeClipRect_intersectRectsdropFromTreemarkAsHidden_markAsHidden
ParentDataPaintingContextCallbackPaintingContextConstraintsRenderObjectVisitorLayoutCallback_LocalSemanticsHandlePipelineOwnerPipelineOwnerVisitorPipelineManifold_flutterRenderingLibraryRenderObjectRenderObjectWithChildMixinContainerParentDataMixinContainerRenderObjectMixin"RelayoutWhenSystemFontsChangeMixin_SemanticsFragment_ContainerSemanticsFragment_InterestingSemanticsFragment_RootSemanticsFragment_IncompleteSemanticsFragment_SwitchableSemanticsFragment_SemanticsGeometryDiagnosticsDebugCreatorÅÂPictureRecorderDiagnosticPropertiesBuilderDiagnosticsNodeDiagnosticsPropertyDoublePropertyEnumPropertyErrorDescription	ErrorHintErrorSummaryFlagPropertyFlutterErrorInformationCollectorIntPropertyStringPropertyHitTestEntryHitTestResultsetupParentData	protectedmustCallSupervoidoverrideStringcanvasOffsetCanvasrepaintCompositedChildClipContextContainerLayerRectisRepaintBoundarybool_needsPaintdebugAlsoPaintedParent!debugRegisterRepaintBoundaryPaintincludedParentincludedChildOffsetLayer_layerHandlelayerupdateCompositedLayeroldLayerattachedoffsetremoveAllChildren	identical_needsCompositedLayerUpdatedebugCreatorruntimeTypechildContextpaintBounds_paintWithContextzerostopRecordingIfNeeded_wasRepaintBoundarycustomContextdebugOnProfilePaintcallgetSaveCountLayerremoveappendPictureLayerRendererBindinginstancecreatePictureRecordercreateCanvasCompositionCallbackaddCompositionCallbackVoidCallbackdebugRepaintRainbowEnabledPaintstylePaintingStylestrokestrokeWidthcolordebugCurrentRepaintColortoColordrawRectdeflatedebugPaintLayerBordersEnabledColorpictureendRecordingisComplexHintwillChangeHintalwaysNeedsCompositinghasChildrenchildPaintBoundsneedsCompositingClipRectLayerCliphardEdgeclipBehaviornoneshiftclipRectclipRectAndPaintClipRRectLayerRRect	antiAlias	clipRRectclipRRectAndPaintPathClipPathLayerclipPathclipPathAndPaintColorFilterColorFilterLayercolorFilterMatrix4TransformLayertranslationValuesdxdymultiply	translate	transformMatrixUtilsinverseTransformRectsavestoragerestoreOpacityLayerintalphaobjectRuntimeTypehashCodeBoxConstraintsdebugAssertIsValid==toStringdebugDumpRenderTree	immutabledoublenanRenderConstrainedBoxadditionalConstraintslayoutvisitChildrenvisitChildrenForSemanticsinvokeLayoutCallbackTSemanticsHandle kFlutterMemoryAllocationsEnabledFlutterMemoryAllocationsdispatchObjectCreatedlibrary	classNameobjectsemanticsOwneraddListenerdispatchObjectDisposedremoveListener_didDisposeSemanticsHandleDiagnosticableTreeMixinrequestVisualUpdateSemanticsUpdateFlutterViewSemanticsUpdateCallbackdetachattachListkReleaseModeMap#debugEnhanceLayoutTimelineArgumentslengthFlutterTimeline	startSync	arguments
isNotEmptysortadepthbiaddAllgetRange_needsLayoutowner_layoutWithoutResizechildflushLayoutisEmpty
finishSyncnode_needsCompositingBitsUpdate_updateCompositingBitsclearflushCompositingBits"debugEnhancePaintTimelineArgumentsupdateLayerProperties_skippedPaintingOnLayer
flushPaintsemanticsEnabledSemanticsOwnerSemanticsBinding debugOutstandingSemanticsHandles
DeprecatedensureSemantics_listeneronSemanticsUpdatedisposeSetscheduleInitialSemanticstoList_needsSemanticsUpdate_updateSemanticssendSemanticsUpdateflushSemanticstoDiagnosticsNodedebugFillPropertiesadddefaultValue_debugParent	drawFramecontainsforEach
adoptChild
ListenableonNeedVisualUpdateSchedulerBindingensureVisualUpdate	RenderBoxRenderObjectElementPictureImageSizesize
RenderViewhitTestmarkNeedsLayoutHitTestTargetdebugPaintSizeEnabledBindingBasereassembleApplication
reassemble
parentData_depthredepthChildrenOverlayPortalvisibleForOverriding_parentparentDebugCreatorwidgetsObject
StackTracereportErrorFlutterErrorDetails	exceptionstackcontextinformationCollector
kDebugModeDiagnosticsTreeStyletruncateChildrenpragma	fromPartserrorPropertydebugDoingLayout#_debugAllowMutationsToDirtySubtrees_doingThisLayoutWithCallback_debugMutationsLockeddebugLayoutParentdebugActiveLayoutdebugDoingThisLayoutperformLayoutisSemanticBoundary
StateError_relayoutBoundary_debugDoingThisLayoutdebugPrintMarkNeedsLayoutStacksdebugPrintStacklabel_nodesNeedingLayout_setRelayoutBoundary_debugDoingLayoutdebugPrintLayouts
debugPrintedebugProfileLayoutsEnabledtoTimelineArgumentsisAppliedConstraintcurrentsplitPatternRegExpmatchAsPrefixMatch
groupCountgrouptrimparentUsesSizeisTightcomputeDryLayout	GlobalKey_enableMutationsToDirtySubtreesRepaintBoundaryLayerHandlemarkNeedsCompositingBitsUpdate"_nodesNeedingCompositingBitsUpdate_nodesNeedingPaintremoveWheretdebugDoingPaintdebugPrintMarkNeedsPaintStacksmarkNeedsPaintRenderOpacity_debugDoingPaintdebugProfilePaintsEnableddescribeForError
paintChildRenderOffstagepaintsChildrootNodeidentityindexapplyPaintTransforminvertpushClipRectSemanticsNodeRenderViewportBasecacheExtent_debugDoingSemantics_semanticsOwner_nodesNeedingSemanticsSemanticsConfigurationSemanticsEvent	sendEventisMergedIntoParentsendSemanticsEventexplicitChildNodeschildConfigurationsDelegateclearSemanticssemanticsParent_semanticsConfiguration
_semanticsmergeIntoParentisPartOfNodeMergingblockUserActionsareUserActionsBlockedcompileChildrenparentSemanticsClipRectparentPaintClipRectelevationAdjustmentresultsiblingNodesconfigany+isBlockingSemanticsOfPreviouslyPaintedNodeshasBeenAnnotatedisBlockingUserActionsisMergingSemanticsOfDescendants$ChildSemanticsConfigurationsDelegatetagsForChildrenrenderChild_getSemanticsForParent dropsSemanticsOfPreviousSiblingsmergeUpFragmentsfragmentaddAncestoraddTagssiblingMergeGroupssiblingMergeGroupsiblingMergingFragmentmarkAsExplicit"ChildSemanticsConfigurationsResultmergeUpmapIterable	isMergeUphasConfigForParentisCompatibleWithj
updateWithchildrenInInversePaintOrderPointerEventdescribeIdentityDiagnosticLevelinfodebugtoStringDeepprefixLineOneprefixOtherLinesminLevel	wrapWidthtoStringShallowjoinervalueifTrueleveltooltipmissingIfNullshowInViewportSingleChildScrollViewDurationCurveCurveseaseshowOnScreen
descendantrectdurationcurveshallownameSingleChildRenderObjectWidget	ChildTypeErrorSpacer_child	dropChildredepthChildnextSiblingpreviousSibling
firstChild	lastChildParentDataTypeRenderBoxContainerDefaultsMixinContainerBoxParentDataMultiChildRenderObjectWidget!SlottedContainerRenderObjectMixinequals_childCountafter_firstChild
_lastChild_debugUltimatePreviousSiblingOf_debugUltimateNextSiblingOf_insertIntoChildListinsert_removeFromChildListsystemFontsDidChangeTextPainter	ParagraphSchedulerPhasetransientCallbacksidleschedulerPhase'_hasPendingSystemFontsDidChangeCallBackscheduleFrameCallbackdebugDisposedPaintingBindingsystemFonts_scheduleSystemFontsUpdatefirstSemanticsTag_tagsForChildren_ancestorChainrootmatrixEqualssemanticBoundsisInvisible_mergesToSiblingabsorb_computeSemanticsGeometrytransformRectexpandToIncludesemanticsClipRect	intersectpaintClipRectidtags
followedBysiblingGrouplast_isExplicitskip	elevationdropFromTreemarkAsHiddenisHiddenassembleSemanticsNodesiblingNode	ancestorsaddTagForChildrencopydescribeSemanticsClipdescribeApproximatePaintClipisZerosetZerosetIdentitySemanticsFlaghidden
ClipContextSemanticsHandleDiagnosticableTreeMixin
ListenableHitTestTargetRenderObject
ParentData_SemanticsFragment_InterestingSemanticsFragmentDiagnosticsProperty´GîØß≠`Õÿ†òQ¶¨ëÉÑQDiagnosticPropertiesBuilderDiagnosticsNodeDiagnosticsPropertyDoublePropertyEnumPropertyErrorDescription	ErrorHintErrorSummaryFlagPropertyFlutterErrorInformationCollectorIntPropertyStringProperty Çﬁpackage:flutter/foundation.dartÑzÑöHitTestEntryHitTestResult ÑSpackage:flutter/gestures.dart  Ñúpackage:flutter/painting.dart 
ÅèÅ£PictureRecorder Åy   ÅâÅåuiÅådart:ui  Åß   package:flutter/animation.dart  Å–   package:flutter/foundation.dart  Å˙   package:flutter/gestures.dart  Ç"   package:flutter/painting.dart  ÇJ   package:flutter/scheduler.dart  Çs   package:flutter/semantics.dart  Çù   binding.dart  Ç¥   
debug.dart  Ç…   
layer.dart¿Ÿ- ¿Kdïµ <ÄÜÄ§Ä•ÄøÄ√ÄÚÄˆÅÅ2ÅNÅnÅwÅxÅ•Å¶ÅœÅ˘Ç!ÇIÇrÇõÇúÇ≥Ç»Ç›ÇﬁÉÉÉ5ÉNÉkÉÉÉôÉ≥É∆É‹ÉÚÑÑ&Ñ;ÑSÑúÑƒÑ≈ÖÖÖ[Ö£Ö◊Ö€ÖÈÖÌÜ8Ü}ÜêÜÕÜ⁄ÜÎÜ˛Üˇáá,á.á/ádáháπàà	à?àòàôàØà≥ââJâîâ®â¨â˝äMäùäÁãããLãäã∂ãÿãﬁå&å=åJåâåäå≤å≥ç çGçMçàçéç⁄ç¯ç˘é é&éqéæèè+è1èAèGèóè∏êê9êçêëêíêπê”ê¸ëë&ëKë[ëíë¡ëÒííí*í4í|íöí¿ííÒì>ìâì‘ì˚îHî}îäî«îÂî˜ï$ï9ïEïkï≈ï”ñ ñTñ∑óóó@óFóuóvó≥óËó¯òBòUò_ò`ò•ò›òﬁô-ôaôûô»ôÃôÕöö!ölöπõõBõHõXõ^õÆõœú	úKúkúôúöúÁùùù=ùPùZù≤ùæùÈû;ûúûÂûÏüüNüRüSü†ü†$†*†:†@†ç†ß†‹†ˆ°°K°R°b°Å°ê°»°Ì°ˆ¢	¢¢¢¢<¢B¢ê¢ﬂ£/£f£v£û£±£ª£º£ﬂ£˛§$§r§ª§Á••E•r••¨•≤•∂•∑•Û¶¶3¶p¶q¶≥¶Óß1ß>ßmßìßõß≠ßÊ®®g®|®à®é®√©©<©_©c©d©∞©ø©≈™™T™Å™á™‘™Á™Ù´´1´E´h´l´m´á´≥´√´⁄¨¨$¨E¨T¨{¨û¨ø¨«¨⁄¨‰¨˙¨˛¨ˇ≠≠3≠T≠g≠h≠å≠í≠‹Æ&ÆEÆQÆgÆÇÆõÆ°ÆƒÆŸÆ›ÆﬁÆ˘ØØGØâØ ØˆØ˙Ø˚∞L∞[∞a∞Ø∞˝±G±á±ç±…±œ±ﬂ≤
≤P≤ç≤ë≤í≤Õ≤”≥≥n≥Ω≥ ≥–¥¥j¥|¥â¥ö¥ª¥‘¥‚¥Ë¥¯µ µ<µPµ}µüµ€∂∂!∂L∂h∂|∂©∂À∂¸∑-∑5∑H∑R∑ä∑§∑∫∑Œ∑“∑”∏#∏7∏=∏å∏’∏‰∏Íπ5πÖπ—πÛ∫∫0∫I∫O∫x∫|∫}∫–∫÷ª&ªoªºªÓªÙº?ºèº€º˝ΩΩ;ΩTΩZΩÑΩàΩâΩæΩƒææPæVæ£æıøEøãøëø°øßøı¿ @¿ @!¿ @>¿ @V¿ @Z¿ @[¿ @¨¿ @˚¿ AK¿ Am¿ As¿ A¬¿ B¿ B¿ B ¿ Be¿ Bµ¿ C¿ CS¿ Cñ¿ C´¿ C±¿ D¿ DS¿ D†¿ DÒ¿ EA¿ E¿ EÖ¿ Eï¿ Eõ¿ EÊ¿ E˙¿ F¿ F+¿ FP¿ Fe¿ FÅ¿ Fà¿ F÷¿ G'¿ GI¿ Go¿ Gu¿ Gí¿ GØ¿ GÏ¿ G˛¿ H)¿ H0¿ H1¿ HT¿ H~¿ HÇ¿ HÉ¿ HÀ¿ H—¿ I¿ I$¿ Is¿ I£¿ Iß¿ I®¿ I◊¿ I›¿ J/¿ Jw¿ JÆ¿ J˙¿ KJ¿ Kà¿ KÃ¿ K“¿ L ¿ Ld¿ Ly¿ L¿ L«¿ M¿ MY¿ Mn¿ Mt¿ M≈¿ N¿ N¿ N#¿ Ns¿ N¥¿ N∫¿ O¿ O	¿ OS¿ O†¿ O‰¿ P4¿ PÑ¿ PÃ¿ Q¿ QN¿ Qc¿ QÇ¿ Qù¿ Q∞¿ Q√¿ QÍ¿ R¿ R.¿ R5¿ RZ¿ Rw¿ Rä¿ Rê¿ R»¿ R‰¿ S#¿ S/¿ SS¿ Sz¿ S≈¿ SŸ¿ SÊ¿ TI¿ T\¿ Tb¿ Tf¿ Tg¿ Tû¿ T§¿ TÛ¿ T˘¿ U>¿ UD¿ Uî¿ U◊¿ U›¿ V-¿ Vx¿ Vü¿ V•¿ Vˆ¿ W8¿ W>¿ Wè¿ Wï¿ W‹¿ W˝¿ X¿ X+¿ X<¿ XQ¿ Xx¿ X†¿ Xæ¿ X≈¿ XÍ¿ Y¿ Y¿ Y ¿ YT¿ Yè¿ Y´¿ YÏ¿ Y¯¿ Z¿ ZE¿ Zé¿ Z¢¿ ZØ¿ [¿ [%¿ [+¿ [/¿ [0¿ [Z¿ [`¿ [Ø¿ [µ¿ [˙¿ \ ¿ \P¿ \ì¿ \ô¿ \Ë¿ ]3¿ ]O¿ ]U¿ ]•¿ ]Ê¿ ]Ï¿ ^0¿ ^6¿ ^}¿ ^ú¿ ^∑¿ ^ ¿ ^€¿ ^Ó¿ _¿ _=¿ _Z¿ _a¿ _Ü¿ _£¿ _∂¿ _º¿ _¿ `(¿ `D¿ `É¿ `è¿ `≥¿ `⁄¿ a#¿ a7¿ aD¿ a•¿ a∏¿ aæ¿ a¬¿ a√¿ aı¿ a˚¿ b=¿ bC¿ bî¿ b∫¿ b¿¿ c¿ cW¿ c]¿ c§¿ c™¿ c˜¿ dI¿ dô¿ dﬂ¿ e¿ e¿ e3¿ eZ¿ ez¿ eÅ¿ eƒ¿ eÈ¿ f¿ f"¿ f&¿ f'¿ fX¿ f^¿ f≠¿ f≥¿ g¿ g*¿ g0¿ g|¿ gÕ¿ h¿ h¿ h]¿ hü¿ h•¿ hÏ¿ i¿ i(¿ i;¿ iR¿ iy¿ ió¿ iû¿ i≈¿ j¿ j"¿ jQ¿ jm¿ jÆ¿ j⁄¿ jÎ¿ j˙¿ k¿ k¿ k|¿ kÖ¿ kô¿ k¶¿ k≥¿ kƒ¿ kı¿ l¿ l*¿ l=¿ lC¿ lG¿ lH¿ lz¿ lÄ¿ lÕ¿ l˘¿ lˇ¿ mO¿ mò¿ mË¿ mÓ¿ n;¿ n{¿ nÅ¿ n»¿ nŒ¿ o¿ om¿ oΩ¿ p¿ p¿ p2¿ pA¿ ph¿ pÑ¿ pã¿ p∆¿ p–¿ pÊ¿ pˇ¿ q+¿ q=¿ qA¿ qB¿ qN¿ qe¿ q‡¿ q‚¿ q„¿ r¿ r¿ r^¿ rü¿ r£¿ r…¿ rÕ¿ s¿ si¿ sç¿ së¿ s‡¿ t0¿ t}¿ tÅ¿ t—¿ u¿ um¿ u∫¿ u«¿ uÀ¿ v¿ vb¿ v¨¿ vÌ¿ w=¿ wç¿ w€¿ x!¿ x=¿ xA¿ xê¿ x€¿ y*¿ yt¿ y™¿ y˙¿ z¿ z¿ zd¿ z≤¿ {¿ {¿ {¿ {o¿ {¿¿ {À¿ {Ë¿ |9¿ |Å¿ |ò¿ |ô¿ |„¿ |˜¿ |¯¿ }:¿ }S¿ }T¿ }Ç¿ }à¿ }À¿ }—¿ ~ ¿ ~<¿ ~B¿ ~ê¿ ~‡¿ /¿ x¿ ±¿ Ä¿ ÄS¿ Äd¿ Äj¿ Ä∏¿ Å¿ Å>¿ ÅD¿ ÅÜ¿ Å¢¿ Å»¿ Å¯¿ Åˇ¿ Ç¿ Ç2¿ Ç6¿ Ç8¿ Ç9¿ Ç~¿ ÇÇ¿ ÇŸ¿ É¿ É¿ ÉV¿ ÉZ¿ Éã¿ ÉŸ¿ É⁄¿ Ñ¿ Ñd¿ Ñ§¿ Ñ‹¿ Ö¿ ÖG¿ Öz¿ Öß¿ ÖΩ¿ Ö∆¿ ÖÃ¿ ÖÕ¿ ÖÈ¿ Ü¿ Ü$¿ Ü(¿ Ü)¿ ÜG¿ ÜH¿ Üí¿ Ü≤¿ Ü≥¿ Üø¿ Ü“¿ á¿ áJ¿ áv¿ áƒ¿ á ¿ áÀ¿ áÁ¿ à¿ à%¿ àN¿ àR¿ àT¿ àU¿ àå¿ àê¿ à‡¿ â1¿ â~¿ âñ¿ âö¿ âÂ¿ ä,¿ äv¿ ä¢¿ äÎ¿ ã9¿ ãâ¿ ã⁄¿ å(¿ åp¿ å∂¿ ç¿ çO¿ çè¿ ç€¿ é)¿ év¿ éz¿ é…¿ è¿ è`¿ è~¿ èÇ¿ è”¿ ê!¿ êp¿ êΩ¿ ë	¿ ëW¿ ëò¿ ëú¿ ëË¿ í6¿ íÜ¿ í–¿ íˇ¿ ì2¿ ìR¿ ìX¿ ì•¿ ìÚ¿ î¿ î*¿ îG¿ îi¿ îÖ¿ î®¿ îØ¿ îÔ¿ ï'¿ ïS¿ ïí¿ ï≈¿ ïÍ¿ ñ ¿ ñ	¿ ñ¿ ñ¿ ñ¿ ñd¿ ñà¿ ñé¿ ñﬂ¿ ó,¿ óy¿ óò¿ óû¿ óÂ¿ ò2¿ ò{¿ ò•¿ ò¶¿ òÏ¿ òÚ¿ ô:¿ ôP¿ ô¿ ôÄ¿ ô◊¿ ô›¿ ö2¿ ö_¿ öì¿ öî¿ ö‹¿ ö‚¿ õ#¿ õS¿ õT¿ õö¿ õ†¿ õ¿ ú¿ ú6¿ ú\¿ úy¿ úÜ¿ úÆ¿ ú¥¿ ú∏¿ úπ¿ ú˛¿ ù)¿ ùD¿ ùj¿ ùà¿ ùñ¿ ùú¿ ùµ¿ ùÃ¿ ùÈ¿ ùÌ¿ ùÓ¿ û:¿ ûÖ¿ û¬¿ û«¿ ü¿ ü\¿ ü•¿ ü›¿ ü‚¿ †¿ †n¿ †º¿ °¿ °¿ °D¿ °Å¿ °Ç¿ °¿¿ °∆¿ ¢¿ ¢¿ ¢O¿ ¢k¿ ¢ù¿ ¢ø¿ ¢Ê¿ ¢Á¿ £)¿ £/¿ £¿ £ ¿ § ¿ §¿ §O¿ §f¿ §¿ §≤¿ §ƒ¿ §˜¿ •,¿ •h¿ •ö¿ •ß¿ •±¿ •∆¿ •“¿ •Û¿ ¶+¿ ¶V¿ ¶_¿ ¶e¿ ¶u¿ ¶ï¿ ¶®¿ ¶≤¿ ¶º¿ ¶Î¿ ß¿ ßW¿ ßá¿ ß◊¿ ®¿ ®5¿ ®a¿ ®ì¿ ®Ë¿ ®˝¿ ©¿ ©¿ ©J¿ ©É¿ ©¨¿ ©∏¿ ©¬¿ ™¿ ™0¿ ™X¿ ™`¿ ™a¿ ™s¿ ™ö¿ ™Ø¿ ™ª¿ ™¿ ´¿ ´¿ ´#¿ ´H¿ ´é¿ ´ó¿ ´ß¿ ´Õ¿ ´ﬂ¿ ¨¿ ¨*¿ ¨?¿ ¨K¿ ¨f¿ ¨å¿ ¨î¿ ¨ö¿ ¨û¿ ¨ü¿ ¨Ì¿ ≠>¿ ≠ã¿ ≠⁄¿ Æ¿ Æ;¿ Æ<¿ Æj¿ Æ™¿ Æ…¿ Æ›¿ ÆÌ¿ Ø#¿ ØU¿ Øh¿ Ør¿ Ø|¿ Øé¿ Øû¿ Ø√¿ Ø’¿ ∞¿ ∞#¿ ∞/¿ ∞5¿ ∞9¿ ∞:¿ ∞å¿ ∞ç¿ ∞≈¿ ∞À¿ ±¿ ±-¿ ±M¿ ±f¿ ± ¿ ±–¿ ≤4¿ ≤~¿ ≤¬¿ ≤È¿ ≤Ò¿ ≤˜¿ ≥'¿ ≥Z¿ ≥~¿ ≥Ñ¿ ≥ê¿ ≥¬¿ ¥¿ ¥¿ ¥&¿ ¥J¿ ¥P¿ ¥T¿ ¥U¿ ¥ë¿ ¥í¿ ¥œ¿ ¥’¿ µ¿ µ¿ µX¿ µy¿ µ©¿ µ ¿ µÀ¿ ∂¿ ∂¿ ∂Q¿ ∂°¿ ∂Ú¿ ∂¯¿ ∑A¿ ∑W¿ ∑p¿ ∑£¿ ∑µ¿ ∑Á¿ ∏¿ ∏W¿ ∏à¿ ∏ï¿ ∏ü¿ ∏¥¿ ∏¿¿ ∏·¿ π¿ πC¿ πL¿ πR¿ π\¿ πn¿ πè¿ π§¿ π∞¿ π¿ ∫¿ ∫¿ ∫^¿ ∫Å¿ ∫Ÿ¿ ª
¿ ªf¿ ªô¿ ª≈¿ ªÈ¿ º%¿ º:¿ ºu¿ ºÉ¿ ºñ¿ º¬¿ ºŒ¿ ºÿ¿ º‡¿ Ω¿ Ω1¿ Ω9¿ ΩG¿ Ωk¿ Ω±¿ Ω∫¿ Ω ¿ Ω‹¿ Ω˛¿ æ¿ æ¿ æ:¿ æ`¿ æh¿ æn¿ ær¿ æs¿ æ¿¿ æ∆¿ ø¿ øg¿ øò¿ ø‚¿ ¿,¿ ¿y¿ ¿ã¿ ¿ë¿ ¿⁄¿ ¿˜¿ ¡0¿ ¡S¿ ¡T¿ ¡f¿ ¡l¿ ¡∏¿ ¬¿ ¬G¿ ¬V¿ ¬ú¿ ¬Õ¿ √¿ √¿ √X¿ √Ä¿ √Å¿ √ì¿ √ô¿ √‰¿ ƒ4¿ ƒm¿ ƒ|¿ ƒ¿ ≈G¿ ≈Ç¿ ≈Ü¿ ≈ƒ¿ ≈Î¿ ∆¿ ∆<¿ ∆@¿ ∆A¿ ∆b¿ ∆∏¿ ∆›¿ ∆Ì¿ «¿ «p¿ «{¿ «Ã¿ «ı¿ «˝¿ »'¿ »I¿ »g¿ »è¿ »ï¿ »ô¿ »ö¿ »¿¿ »Â¿ …¿ …)¿ …-¿ ….¿ …S¿ …ò¿ …ô¿ …Â¿ …Û¿ …˘¿  .¿  w¿  }¿   ¿ À¿ ÀD¿ ÀJ¿ Àì¿ À≠¿ À–¿ Àﬁ¿ À‰¿ À˝¿ ÃQ¿ ÃW¿ Ã|¿ Ãå¿ ÃØ¿ Ã¬¿ ÃÃ¿ Ã÷¿ Õ¿ Õ0¿ Õ{¿ Õ°¿ ÕŸ¿ Œ¿ Œ<¿ ŒF¿ ŒN¿ Œ|¿ Œ±¿ Œ—¿ ŒŸ¿ ŒÁ¿ œ¿ œU¿ œ^¿ œn¿ œÄ¿ œ¶¿ œª¿ œ«¿ œ‚¿ –¿ –¿ –¿ –¿ –¿ –'¿ –Y¿ –w¿ –≈¿ –Ã¿ ––¿ –—¿ –›¿ —"¿ —M¿ —Æ¿ —≤¿ —≥¿ —»¿ —…¿ “¿ “"¿ “#¿ “B¿ “á¿ “®¿ “π¿ “Ω¿ “æ¿ ”¿ ”¿ ”i¿ ”o¿ ”∫¿ ‘	¿ ‘,¿ ‘W¿ ‘v¿ ‘ê¿ ‘√¿ ‘‡¿ ‘·¿ ’¿ ’2¿ ’8¿ ’<¿ ’=¿ ’j¿ ’p¿ ’ª¿ ÷¿ ÷.¿ ÷@¿ ÷_¿ ÷ï¿ ÷´¿ ÷˙¿ ◊K¿ ◊å¿ ◊ç¿ ◊¿¿ ◊÷¿ ◊‹¿ ◊‡¿ ◊·¿ ÿ&¿ ÿm¿ ÿª¿ Ÿ
¿ Ÿ:¿ Ÿá¿ Ÿà¿ Ÿ¥¿ Ÿ∫¿ ⁄	¿ ⁄V¿ ⁄£¿ ⁄Ó¿ €;¿ €ä¿ €€¿ €˚¿ ‹¿ ‹B¿ ‹f¿ ‹l¿ ‹Ω¿ ›¿ ›¿ ›=¿ ›f¿ ›é¿ ›∂¿ ﬁ¿ ﬁ)¿ ﬁB¿ ﬁf¿ ﬁl¿ ﬁâ¿ ﬁ©¿ ﬁØ¿ ﬁ≥¿ ﬁ¥¿ ﬁ˝¿ ﬂ¿ ﬂT¿ ﬂf¿ ﬂl¿ ﬂª¿ ‡
¿ ‡2¿ ‡Z¿ ‡Å¿ ‡⁄¿ ‡˜¿ ·¿ ·4¿ ·:¿ ·W¿ ·m¿ ·s¿ ·w¿ ·x¿ ·¿¿ ·∆¿ ·÷¿ ·‹¿ ‚¿ ‚*¿ ‚_¿ ‚¿ ‚É¿ ‚Ñ¿ ‚Ω¿ ‚√¿ „¿ „a¿ „≤¿ „∏¿ „Ù¿ ‰¿ ‰&¿ ‰D¿ ‰c¿ ‰Ö¿ ‰±¿ ‰ˇ¿ Â¿ Â%¿ ÂA¿ Âb¿ Âí¿ Â≤¿ Â÷¿ Â⁄¿ Â‹¿ Â›¿ Ê¿ Ê"¿ ÊO¿ Êí¿ Êì¿ Êª¿ Êø¿ Êˇ¿ ÁL¿ Áõ¿ ÁÈ¿ Ë6¿ Ë]¿ Ëa¿ Ë±¿ È¿ ÈH¿ Èh¿ Èl¿ È∫¿ Í¿ Í>¿ Íâ¿ ÍÀ¿ Í—¿ Î!¿ Îc¿ Îi¿ Îy¿ Î¿ Î∆¿ Ï¿ Ï!¿ Ï"¿ Ïp¿ Ïæ¿ Ï◊¿ Ï›¿ Ì.¿ Ì{¿ Ì»¿ ÌÁ¿ ÌÌ¿ Ó4¿ ÓÉ¿ Ó—¿ Ó◊¿ ÓÁ¿ ÓÌ¿ Ô6¿ Ôx¿ Ôñ¿ Ôò¿ Ôô¿ Ô„¿ Ô‰¿ ¿ 
¿ N¿ n¿ r¿ µ¿ π¿ Ò¿ ÒU¿ Ò†¿ Ò¿¿ Òƒ¿ Ú¿ Ú]¿ Ú¶¿ Úˆ¿ ÛC¿ Ûí¿ Û‚¿ Ù	¿ Ù¿ ÙQ¿ Ùx¿ Ù|¿ Ùç¿ Ùë¿ Ùﬁ¿ ı.¿ ı¿ ıô¿ ıù¿ ıÈ¿ ˆ7¿ ˆá¿ ˆÿ¿ ˜¿ ˜¿ ˜A¿ ˜E¿ ˜ã¿ ˜Ÿ¿ ¯&¿ ¯q¿ ¯¿¿ ˘¿ ˘^¿ ˘¨¿ ˘Ù¿ ˙C¿ ˙ê¿ ˙€¿ ˚¿ ˚ ¿ ˚o¿ ˚ø¿ ¸¿ ¸L¿ ¸P¿ ¸_¿ ¸c¿ ¸™¿ ¸Ò¿ ˝¿ ˝¿ ˝_¿ ˝∞¿ ˝¸¿ ˛I¿ ˛é¿ ˛œ¿ ˛”¿ ˇ#¿ ˇV¿ ˇZ¿ ˇn¿ ˇr¿ ˇΩ¿ ˇÏ¿ ˇ¿ =¿ ã¿ ‹¿$¿n¿º¿	¿.¿2¿`¿d¿µ¿¿Q¿°¿Ú¿	¿¿]¿m¿q¿±¿ˇ¿¿¿a¿∞¿¥¿Á¿Î¿=¿ç¿‹¿'¿r¿v¿ƒ¿¿`¿¨¿˚¿	J¿	¿	–¿
 ¿
-¿
Å¿
≥¿
∆¿
Ú¿1¿\¿Ä¿ñ¿ü¿•¿Í¿¿¿¿k¿∫¿¿4¿:¿{¿Ã¿¿7¿=¿â¿è¿ü¿•¿“¿Ë¿ˇ¿%¿;¿[¿Ñ¿û¿¶¿™¿´¿—¿◊¿¿0¿D¿T¿u¿à¿í¿ß¿´¿¨¿À¿Ã¿¿
¿U¿§¿Ô¿.¿w¿«¿ﬂ¿Â¿0¿W¿]¿ô¿™¿Ω¿⁄¿¿T¿Z¿y¿â¿÷¿Ë¿¿)¿L¿∫¿»¿’¿Ú¿¿¿¿¿ ¿!¿Q¿W¿§¿Û¿C¿Å¿á¿“¿¿Q¿è¿‡¿,¿x¿≥¿Õ¿Œ¿¿¿e¿ñ¿Õ¿Ù¿¿F¿L¿P¿Q¿ã¿ë¿·¿)¿f¿l¿∫¿¿U¿§¿Í¿:¿@¿à¿ÿ¿˜¿¿$¿%¿v¿Ö¿ã¿Ã¿Ÿ¿ ¿ %¿ G¿ h¿ á¿ ç¿ ë¿ í¿ Ã¿ “¿!#¿![¿!h¿!Ñ¿!Ö¿!¿¿!∆¿"¿"-¿"F¿"G¿"è¿"ï¿"√¿"…¿#¿#)¿#A¿#q¿#r¿#∫¿#¿¿$¿$b¿$s¿$Ä¿$®¿$À¿$€¿$˚¿%¿%<¿%D¿%ç¿%†¿%™¿%´¿%«¿%ﬁ¿&¿&$¿&>¿&R¿&o¿&u¿&é¿&í¿&ì¿&Â¿&Î¿':¿'ç¿'û¿'´¿'“¿'ı¿(¿(C¿(k¿(ã¿(®¿(¬¿(÷¿(Ï¿(Ú¿)	¿)/¿)O¿)S¿)T¿)ò¿)û¿)Ó¿*#¿*$¿*b¿*h¿*Ü¿*å¿*ú¿*¢¿*ˆ¿+¿+¿+\¿+z¿+ï¿+≥¿+…¿+Ô¿,&¿,D¿,i¿,ø¿,¿-N¿-n¿-Õ¿-ﬁ¿.3¿.à¿.Ÿ¿/¿/v¿/Ö¿/é¿/ï¿/ô¿/ö¿/Â¿/Î¿08¿0E¿0¿0•¿0¶¿0Ò¿0˜¿1D¿1Q¿1ã¿1±¿1≤¿1Ì¿1Û¿2@¿2L¿2ê¿2ª¿2º¿3¿3L¿3ö¿3∑¿3÷¿3Ù¿4¿4V¿4É¿4ì¿4…¿4Í¿4˝¿5¿5%¿55¿5k¿5~¿5à¿5õ¿5ü¿5†¿5¿5¸¿6¿6B¿6H¿6é¿6À¿6Î¿6Ï¿7¿7¿7I¿7O¿7ü¿7Ô¿81¿87¿8Ö¿8¨¿8¬¿8“¿8Ó¿9&¿9f¿9ì¿9¿¿9“¿:	¿:¿:"¿:*¿:+¿:Z¿:®¿:˘¿;¿;G¿;^¿;s¿;{¿;|¿;©¿;“¿<¿<Y¿<µ¿<Î¿=>¿=ã¿=⁄¿>¿>)¿>y¿>í¿>©¿>≥¿>¥¿>Î¿?,¿?=¿?b¿?s¿?}¿?Ö¿?Ü¿?‘¿?˚¿@Q¿@≥¿@…¿@ ¿@¿A(¿Ay¿Aï¿A˚¿B¿B5¿Bg¿By¿B∞¿BΩ¿BÍ¿C6¿CU¿Cå¿Cô¿C•¿C≠¿CÆ¿C‘¿D¿Dp¿D”¿E ¿E2¿ED¿E{¿Eà¿Eù¿F¿F¿F¿F$¿F%¿FV¿Fó¿F†¿FÓ¿G¿G-¿Gê¿G˜¿H.¿H/¿He¿Hv¿Hù¿H»¿H¯¿I¿I=¿IH¿Is¿IÊ¿J¿J8¿JC¿Je¿Jí¿Jª¿JŸ¿K¿K¿K0¿K¥¿L¿L#¿L-¿L7¿LJ¿LN¿LO¿L†¿LÕ¿L”¿M$¿Mq¿M∫¿M¿¿N¿ND¿Nî¿NÂ¿N˙¿O¿O/¿OO¿O_¿O|¿Oè¿Oô¿O≤¿O∂¿O∑¿OÙ¿O˙¿P:¿PZ¿PÄ¿Pô¿Pö¿P¯¿P˛¿Q3¿Q9¿Qo¿Qñ¿Qó¿Q’¿Q€¿R'¿R]¿Rc¿R°¿R◊¿S¿S/¿ST¿Sq¿Sç¿S°¿SÔ¿T6¿Tk¿T´¿T€¿T˜¿U¿U¿U=¿Uh¿Uê¿Uñ¿UÀ¿V
¿V9¿VT¿Vl¿Vr¿V¡¿W
¿W=¿Wb¿WÑ¿Wä¿Wé¿Wè¿W”¿WŸ¿X)¿XT¿XZ¿Xò¿Xﬁ¿X¸¿Y¿Y¿Y;¿YN¿Yä¿Yé¿Yè¿Yœ¿Y’¿Z&¿Zr¿Zø¿Zˆ¿Z¸¿[2¿[P¿[f¿[v¿[ì¿[¶¿[∞¿[√¿[«¿[»¿[‰¿[Â¿\1¿\7¿\~¿\∫¿\‰¿]1¿]o¿]≤¿]“¿]ÿ¿^&¿^t¿^z¿^¿¿_¿_D¿_x¿_æ¿`	¿`¿`^¿`Æ¿`¿a?¿aè¿a—¿aÙ¿aı¿bG¿bî¿b¡¿b¬¿c¿c¿cL¿cr¿c¿cü¿cø¿d$¿d*¿dD¿dH¿dI¿df¿dg¿d∏¿e¿eW¿e§¿eœ¿e‹¿f¿f¿fW¿f•¿f…¿fœ¿g¿gp¿g¬¿gÈ¿h¿h¿hS¿hx¿h≥¿h∆¿hÃ¿hÍ¿i¿iM¿ip¿iã¿iŒ¿i‰¿iÏ¿iÚ¿j¿j/¿j3¿j4¿jÖ¿j÷¿k¿k"¿k6¿k<¿kç¿k€¿l(¿lg¿lm¿lΩ¿lÚ¿l¯¿mH¿më¿m·¿n.¿n{¿n»¿o¿o¿oI¿oó¿o⁄¿o‡¿o˜¿o˝¿pF¿pê¿pﬂ¿q¿q[¿q¨¿q»¿qŒ¿q˙¿rF¿ra¿rà¿r†¿r‡¿rÓ¿rÙ¿s¿s4¿sP¿sü¿sÏ¿t¿t1¿t9¿tG¿tM¿tr¿të¿tû¿tπ¿t‘¿tË¿u¿uc¿uo¿uÜ¿uî¿u¬¿uË¿u¿uˆ¿u˙¿u˚¿vJ¿v\¿vb¿v¶¿v˜¿wF¿ww¿w}¿w´¿w∏¿wŸ¿x ¿x¿x:¿xh¿xë¿x±¿xæ¿xÍ¿x¿y¿y¿y¿yZ¿yß¿yÊ¿yÏ¿z5¿z;¿zi¿zö¿z±¿zŒ¿z“¿z”¿{"¿{I¿{ó¿{◊¿|¿|;¿|a¿|g¿|k¿|l¿|∫¿} ¿},¿}:¿}@¿}í¿}æ¿}˝¿~6¿~:¿~;¿~Ñ¿~‘¿~Ê¿¿@¿è¿¿¿ﬂ¿Ä¿Ä¿Ä¿Äf¿Äl¿Äπ¿Äﬂ¿ÄÂ¿Å)¿ÅJ¿Åg¿Å}¿Å¢¿Å…¿Å¿Ç¿Ç¿ÇD¿ÇW¿Ça¿Çã¿Çè¿Çê¿ÇΩ¿Ç›¿Ç˜¿É¿ÉK¿Éo¿Éö¿É∆¿É÷¿É˙¿Ñ¿ÑT¿Ñu¿Ñî¿ÑÕ¿Ñ’¿ÑË¿ÑÚ¿Ñ¸¿Ö¿Ö5¿ÖN¿ÖÅ¿Öá¿Öó¿ÖÕ¿ÖÚ¿Ü¿Ü*¿Ü4¿ÜN¿Üd¿Üh¿Üi¿Üö¿Ü†¿ÜÔ¿á>¿áé¿áº¿á¬¿à¿à`¿à±¿à˝¿âA¿âë¿âÃ¿â“¿ä¿äj¿ä≤¿ä∏¿ã¿ãU¿ã¢¿ãœ¿ã¸¿åD¿åa¿åò¿åÀ¿å›¿ç¿ç^¿çh¿ç}¿çâ¿ç›¿ç„¿çÔ¿é¿é8¿é[¿é´¿é«¿è)¿è_¿è•¿è»¿èˆ¿ê¿ê¿ê%¿êh¿ê≥¿ë¿ëA¿ëè¿ëø¿ë¿í¿í6¿íå¿íﬂ¿ì¿ì:¿ìK¿ìZ¿ìf¿ìå¿ìó¿ì†¿ìß¿ìÀ¿ìÔ¿î¿îo¿î—¿î·¿ï¿ï#¿ï-¿ï.¿ïf¿ïx¿ï∆¿ñ¿ñ6¿ñf¿ñ≤¿ñ’¿ñÔ¿ó'¿óN¿óu¿óä¿óñ¿óó¿ó ¿ó˙¿ò¿ò¿ò<¿òb¿òj¿òx¿ò~¿òû¿òü¿òÌ¿ô<¿ôä¿ôº¿ôÓ¿ôÙ¿ö¿ö¿öC¿ön¿ö~¿ö¢¿ö¡¿ö’¿õ7¿õB¿õJ¿õ]¿õg¿õÄ¿õí¿õ∏¿õÕ¿õŸ¿õÂ¿õ˛¿ú¿ú>¿úU¿úc¿ú~¿ú≥¿úª¿úÕ¿úÙ¿ù	¿ù¿ù¿ùH¿ùX¿ù|¿ù≤¿ù”¿ùÊ¿ù¿ù˙¿û¿û3¿ûE¿ûo¿ûÑ¿ûê¿û©¿û‹¿û‚¿ûÚ¿ü(¿üM¿ür¿üÖ¿üè¿ü©¿üø¿ü¿¿ü˜¿†¿†!¿†%¿†&¿†r¿†ª¿°¿°T¿°•¿°“¿°ﬂ¿°˙¿°˚¿¢H¿¢w¿¢}¿¢≈¿£¿£V¿£\¿£¨¿£˚¿§*¿§0¿§Ä¿§∆¿•¿•(¿•5¿•X¿•Y¿•ò¿•⁄¿•‡¿¶/¿¶z¿¶≈¿¶˛¿ß¿ßC¿ßX¿ß^¿ßØ¿ß˛¿®*¿®7¿®O¿®P¿®í¿®ò¿®Á¿©2¿©}¿©∂¿©º¿™¿™]¿™´¿™¸¿´¿´¿´_¿´≠¿´Ú¿¨B¿¨ã¿¨√¿¨–¿¨Ë¿¨È¿≠0¿≠Ä¿≠Õ¿Æ¿Æ5¿Æ;¿Æå¿Æ⁄¿Ø+¿Øt¿Øz¿ØÀ¿∞¿∞!¿∞W¿∞d¿∞µ¿∞ÿ¿∞˚¿±&¿±O¿±Y¿±ã¿±Ø¿±π¿±…¿±ı¿±˚¿±ˇ¿≤ ¿≤¿≤¿≤R¿≤X¿≤•¿≤≤¿≤Í¿≥¿≥¿≥C¿≥I¿≥ñ¿≥¢¿≥‰¿¥¿¥¿¥U¿¥[¿¥¨¿¥ı¿µF¿µX¿µ^¿µÆ¿∂¿∂J¿∂û¿∂»¿∂Œ¿∑¿∑0¿∑6¿∑é¿∑µ¿∑∂¿∏¿∏<¿∏B¿∏í¿∏Ø¿∏⁄¿∏˙¿π¿π"¿π#¿π^¿πd¿π≤¿∫¿∫+¿∫1¿∫Ç¿∫–¿∫›¿ª	¿ª
¿ª+¿ª,¿ªk¿ªq¿ª¿¿ª∆¿º¿º`¿º±¿Ω ¿ΩK¿Ω[¿Ωa¿ΩÆ¿Ωÿ¿Ωﬁ¿æ1¿æÇ¿æœ¿ø!¿ø4¿øã¿øŸ¿¿+¿¿J¿¿p¿¿t¿¿u¿¿∫¿¿¿¿¡¿¡]¿¡™¿¡˘¿¬L¿¬ö¿¬‡¿√,¿√z¿√Ø¿√µ¿ƒ¿ƒP¿ƒö¿ƒÊ¿≈5¿≈Ñ¿≈£¿≈©¿≈¯¿∆E¿∆ë¿∆û¿∆´¿∆…¿«,¿«K¿«O¿«P¿«]¿«Ö¿«ë¿«´¿«Û¿»:¿»[¿»b¿»Ö¿»â¿»ä¿»‹¿»›¿…1¿…7¿…à¿…€¿…Î¿…Ò¿ ¿ A¿ ]¿ m¿ ê¿ £¿ ≠¿ ¿¿ ƒ¿ ≈¿À¿ÀX¿À^¿ÀÆ¿À˛¿Ã¿Ã¿ÃM¿Ãî¿Ã€¿Õ"¿Õg¿Õú¿Õ¢¿ÕÁ¿Œ-¿Œf¿Œê¿Œ≠¿Œ‘¿Œ‚¿ŒË¿œ¿œ2¿œb¿œí¿œ¢¿œ™¿œ´¿–¿–3¿–C¿–K¿–Q¿–é¿–ß¿–‚¿–Ë¿–Ï¿–Ì¿—.¿—r¿—x¿—…¿—Ò¿—˜¿“6¿“s¿“ë¿“Ô¿”¿”¿”¿”4¿”\¿”j¿”p¿”®¿”«¿”¿‘¿‘:¿‘\¿‘d¿‘l¿‘£¿‘√¿‘…¿’¿’c¿’Ø¿÷¿÷Q¿÷Ü¿÷°¿÷Ã¿◊!¿◊L¿◊d¿◊ü¿◊ ¿◊‚¿◊Ô¿ÿ¿ÿ ¿ÿ$¿ÿ%¿ÿd¿ÿj¿ÿª¿Ÿ¿ŸT¿Ÿç¿Ÿì¿Ÿ…¿Ÿœ¿⁄¿⁄j¿⁄Ø¿⁄˚¿€6¿€S¿€i¿€y¿€ï¿€®¿€≤¿€≈¿€…¿€ ¿€Â¿€Ê¿‹%¿‹+¿‹|¿‹»¿›¿›N¿›T¿›ä¿›∑¿›Õ¿››¿ﬁ	¿ﬁ¿ﬁ&¿ﬁ9¿ﬁ=¿ﬁ>¿ﬁj¿ﬁk¿ﬁ≤¿ﬁ∏¿ﬁ˝¿ﬂJ¿ﬂö¿ﬂÈ¿‡¿‡¿‡R¿‡é¿‡î¿‡‘¿·!¿·c¿·i¿·y¿·¿·Õ¿‚¿‚/¿‚I¿‚f¿‚ú¿‚≥¿‚¡¿‚«¿‚ﬂ¿„%¿„G¿„{¿„ç¿„ª¿‰¿‰¿‰!¿‰-¿‰p¿‰¶¿‰◊¿‰Ú¿Â¿ÂE¿ÂM¿Ân¿Âé¿Âõ¿Â≠¿Â€¿Ê8¿ÊB¿ÊW¿Êc¿Ê≠¿Ê˜¿Á;¿Áy¿ÁÇ¿Áø¿Á˛¿Ë"¿Ë(¿Ë,¿Ë-¿Ëz¿Ëá¿Ëç¿Ëﬁ¿È2¿È}¿ÈÃ¿Í¿Í¿Íl¿Íº¿Íﬂ¿ÍÂ¿Íı¿Í˚¿ÎK¿Îä¿Î¥¿Î—¿Ï¿Ï=¿ÏK¿ÏQ¿Ïy¿Ïø¿Ï·¿Ì¿ÌX¿Ìé¿Ì∏¿Ì”¿Ó ¿Ó&¿Ó.¿Ó;¿ÓS¿ÓY¿Ó]¿Ó^¿ÓÆ¿Ó¸¿ÔM¿Ôñ¿Ôœ¿ÔÚ¿¿'¿_¿á¿≤¿”¿ˆ¿Ò¿ÒI¿Ò†¿Ò±¿Òª¿ÒÏ¿ÚH¿ÚY¿Úc¿ÚÑ¿Úå¿Ú¶¿Ú¨¿Ú∞¿Ú±¿Ú¸¿Û¿ÛP¿Ûx¿Û~¿Û¬¿Û˙¿Ù¿Ù0¿ÙU¿Ù{¿Ùö¿Ù¬¿ÙÊ¿Ùˇ¿ı(¿ı,¿ı-¿ır¿ı≥¿ı≈¿ıÀ¿ˆ¿ˆA¿ˆ^¿ˆ~¿ˆî¿ˆπ¿ˆﬂ¿ˆ˛¿˜Q¿˜s¿˜ó¿˜≠¿˜±¿˜≤¿˜ı¿¯¿¯"¿¯D¿¯|¿¯¬¿¯ﬁ¿˘.¿˘K¿˘X¿˘t¿˘ø¿˘⁄¿˘Á¿˘Û¿˘˚¿˙¿˙¿˙d¿˙≤¿˚ ¿˚O¿˚õ¿˚Ë¿¸1¿¸I¿¸W¿¸]¿¸ì¿¸∆¿¸ÿ¿˝
¿˝X¿˝b¿˝w¿˝É¿˝◊¿˝›¿˝Ì¿˛¿˛<¿˛p¿˛ò¿˛Œ¿˛Ô¿ˇ¿ˇ#¿ˇ1¿ˇS¿ˇè¿ˇ´¿ˇ˚¿ ¿ -¿ f¿ ¨¿ Ã¿¿q¿µ¿∆¿#¿3¿?¿I¿Å¿ô¿Á¿ˇ¿¿(¿y¿≠¿∫¿÷¿$¿q¿±¿æ¿¿#¿+¿>¿H¿p¿Ä¿£¿”¿Û¿3¿F¿P¿i¿í¿ø¿…¿Á¿@¿ò¿±¿‹¿‚¿Ú¿¿E¿i¿|¿Ü¿º¿‡¿Ê¿Í¿Î¿	7¿	Å¿	á¿	◊¿	¿
¿
	¿
D¿
Å¿
Ç¿
Õ¿
”¿¿d¿≤¿ˇ¿%¿+¿y¿…¿¿.¿4¿Ä¿ ¿¿K¿É¿Ñ¿‘¿Ô¿ı¿E¿é¿î¿ﬁ¿*¿v¿ø¿¿D¿í¿¥¿∏¿π¿ ¿¿V¿¢¿Û¿¿¿Y¿¶¿Ú¿B¿í¿Ø¿‚¿¿¿¿¿Z¿•¿ª¿¡¿¿[¿v¿|¿Œ¿¿¿d¿¨¿’¿€¿&¿j¿ä¿ü¿•¿Ò¿@¿é¿›¿Ô¿ ¿6¿Ü¿ø¿∆¿¿(¿J¿ò¿∞¿–¿—¿Ô¿!¿"¿E¿m¿ë¿í¿¥¿‹¿˜¿O¿å¿ß¿Ø¿—¿˜¿\¿l¿Ü¿÷¿·¿¿4¿<¿B¿C¿_¿{¿û¿»¿  ¿ [¿ ¨¿ ¥¿ ∫¿ ‘¿!¿!¿!¿!,¿!`¿!°¿!Í¿!¿"¿"]¿"z¿"Ä¿"√¿"«¿"»¿#¿#Q¿#í¿#ò¿#Œ¿#‘¿$¿$A¿$G¿$ó¿$‰¿%4¿%n¿%∫¿%ª¿&¿&Q¿&ù¿&È¿':¿'Ü¿'—¿'ﬁ¿'‰¿(/¿(|¿(»¿(„¿(È¿):¿)à¿)÷¿*&¿*u¿*∫¿*¿¿*–¿*÷¿+"¿+^¿+§¿+•¿+¥¿+µ¿+¸¿,!¿,'¿,n¿,Ö¿,ã¿,‘¿,¯¿-¿-+¿-P¿-z¿-ö¿-Ω¿-È¿.¿.8¿.<¿.=¿.é¿.î¿.ﬂ¿.˚¿/¿/J¿/ï¿/‰¿0,¿0|¿0√¿0…¿0ﬂ¿0Â¿15¿1H¿1N¿1\¿1£¿1µ¿2¿2:¿2K¿2l¿2í¿2±¿2ª¿2¡¿2›¿2¯¿3¿3
¿3¿3&¿33¿3z¿3õ¿3ü¿3†¿3ı¿3˚¿4F¿4Å¿4á¿4¬¿4»¿5¿5O¿5x¿5Ü¿5å¿5Õ¿5˙¿6¿6M¿6S¿6W¿6X¿6Ü¿6ø¿6¿¿6˜¿7(¿7h¿7Æ¿7º¿7˙¿8J¿8æ¿8«¿8Õ¿8¯¿8¸¿8˝¿9=¿9g¿9Ç¿9É¿9‘¿9⁄¿:¿:-¿:E¿:Y¿:_¿:Å¿:Ö¿:Ü¿:´¿:»¿:…¿:Ù¿:˙¿;H¿;å¿;≥¿;π¿<¿<¿<9¿<R¿<k¿<q¿<Ç¿<Ü¿<á¿<–¿<÷¿=%¿=+¿=t¿=¿¿=—¿=Î¿>¿>$¿>M¿>k¿>s¿>w¿>x¿>¿¿>∆¿?¿?^¿?ä¿?Æ¿?À¿@¿@9¿@e¿@s¿@y¿@z¿@≈¿A¿A_¿A´¿A¨¿A“¿B.¿B/¿BQ¿Bü¿B‰¿C¿C¿C7¿CÉ¿C°¿C¢¿CÒ¿DA¿Dã¿D©¿D‘¿E¿EQ¿E`¿Eh¿Ei¿Eí¿E‰¿F5¿Fd¿Fé¿F∂¿Fæ¿Fø¿F„¿G9¿G~¿G—¿H#¿Hl¿H|¿HÑ¿Hä¿H—¿I"¿If¿Iµ¿J¿JT¿Jf¿J±¿J„¿JÈ¿K¿K9¿KT¿Kµ¿KÊ¿L¿L¿L¿L¿L¿L\¿Lx¿LÀ¿L„¿M1¿MÉ¿Më¿Mó¿M∞¿MÍ¿M¿N0¿Ny¿NΩ¿Nƒ¿N›¿O¿O¿O>¿O|¿OØ¿OÈ¿P)¿P*¿PC¿PÅ¿Pá¿P∞¿PÙ¿Q0¿Qs¿Qâ¿Q´¿Q≤¿QÀ¿QÔ¿Qı¿RB¿RN¿R≤¿Rπ¿RΩ¿Ræ¿S
¿S8¿S[¿S¿SÜ¿SÍ¿SÎ¿T.¿Tç¿TË¿UB¿U¶¿Uˇ¿VX¿V¶¿V“¿W*¿Wm¿W—¿X"¿XS¿Xô¿X‘¿XÒ¿YE¿Yw¿Y©¿Y≤¿YÔ¿Z¿Z6¿Zb¿Zå¿Zæ¿Z»¿Z–¿[.¿[R¿[i¿[û¿[®¿[ˆ¿\E¿\c¿\ò¿\—¿\‚¿]¿]¿]¿]Y¿]•¿]⁄¿^#¿^W¿^π¿^Ô¿_
¿_Q¿__¿_k¿_®¿_≤¿_∫¿_¬¿_√¿`¿`¿`.¿`}¿`†¿`®¿`ﬁ¿a3¿aP¿aY¿ax¿a‘¿b(¿bJ¿bî¿b ¿b˜¿cE¿cQ¿cl¿cx¿cÅ¿cŸ¿d¿dV¿dÖ¿d–¿dÁ¿dÚ¿d˙¿e ¿e¿e$¿e%¿eJ¿em¿eï¿eµ¿eÁ¿f,¿fr¿fô¿fÆ¿f˘¿g¿g,¿gX¿gê¿g€¿g‰¿gÒ¿h6¿h|¿h©¿h¡¿hÌ¿i¿iO¿id¿iØ¿i∏¿iﬂ¿j=¿j`¿jh¿jn¿jì¿j¶¿j™¿j´¿jŒ¿k¿k ¿k'¿kÜ¿kª¿kˇ¿l)¿l;¿lC¿lò¿lº¿lƒ¿lÁ¿m¿mg¿m±¿m◊¿n¿n¿n¿n¿ne¿nÜ¿nå¿nê¿në¿n ¿n–¿o ¿oi¿o{¿oÅ¿o∫¿o˛¿p>¿pZ¿p^¿p_¿põ¿p°¿p–¿q!¿qk¿qª¿qÊ¿qÏ¿r8¿rP¿rV¿r£¿rÓ¿s¿s=¿sU¿sx¿sû¿s§¿sƒ¿t=¿t†¿t§¿t•¿t±¿t≤¿u¿u¿uW¿uX¿ui¿uj¿u∏¿v ¿v¿v¿v\¿v®¿vΩ¿w¿w\¿w™¿w◊¿x¿x¿x¿xo¿x£¿x§¿xœ¿x€¿xˆ¿y"¿y;¿yW¿yv¿yç¿yï¿yŸ¿y¿z¿zW¿zy¿zè¿zô¿z…¿z—¿zÎ¿{¿{¿{/¿{Q¿{Y¿{Ç¿{∂¿{æ¿{’¿{Ù¿{¸¿|¿|¿|¿|¿|&¿|¿|Ä¿|Ω¿}¿},¿}8¿}P¿}o¿}í¿}»¿}‡¿}Á¿~¿~1¿~W¿~É¿~ü¿~Ω¿~∆¿~Õ¿~—¿~“¿¿E¿K¿ñ¿“¿ﬁ¿ÄC¿Äm¿Ä¥¿Äª¿Äø¿Ä¿¿ÄÕ¿ÄŸ¿Å¿ÅI¿Å]¿Åº¿Å√¿Å◊¿Å˚¿Ç¿Ç$¿Ç@¿Çf¿Ço¿Çv¿Çä¿Ç±¿Ç«¿Ç€¿É'¿ÉD¿ÉM¿ÉT¿Éh¿É¬¿É…¿Ñ(¿Ñ<¿Ñò¿Ñü¿Ñ≥¿Ö¿Ö¿Ö*¿Ö>¿Öu¿Ö…¿Ü!¿Ü*¿Ü1¿ÜE¿ÜY¿Üw¿Ü≤¿Ü◊¿Ü‡¿ÜÁ¿ÜÎ¿ÜÏ¿Ü¯¿á@¿áA¿áí¿á£¿á©¿áÙ¿à8¿à>¿àé¿àÕ¿â¿âe¿â™¿â ¿â–¿ä¿ä]¿äc¿äs¿äy¿ä≈¿ä˛¿ã¿ã2¿ãB¿ãi¿ãà¿ãè¿ã±¿ãÕ¿ãı¿å	¿å%¿å;¿åD¿åJ¿åN¿åO¿å†¿å∂¿åº¿ç¿ç[¿çâ¿çè¿çﬂ¿é,¿éP¿éc¿é¢¿é©¿é·¿éÂ¿éÁ¿éË¿è¿è!¿èb¿è¢¿è¶¿èÎ¿ê¿êh¿êπ¿êﬁ¿ê‰¿ë¿ë¿ë4¿ëd¿ët¿ëï¿ëÕ¿ëÂ¿í6¿íi¿ív¿íí¿íﬁ¿ì)¿ì{¿ìÃ¿ìŸ¿ìÚ¿î¿îj¿îÑ¿îª¿î»¿î·¿ï	¿ï\¿ïz¿ïö¿ï—¿ïﬁ¿ïÍ¿ïÚ¿ñ¿ñ¿ñ ¿ñ$¿ñ%¿ñ:¿ñ;¿ñc¿ñÖ¿ñ•¿ñø¿ñŸ¿ñﬂ¿ñÛ¿ó¿ó(¿ó.¿ó2¿ó3¿ó?¿ód¿ó}¿óò¿óú¿óù¿ó©¿óª¿óœ¿óÂ¿óÈ¿óÍ¿óˆ¿ò¿ò+¿òH¿òN¿òR¿òS¿ò_¿òì¿ò≠¿ò≈¿òÀ¿òœ¿ò–¿ò‹¿ô¿ô'¿ôl¿ôã¿ôè¿ôë¿ôí¿ôœ¿ô”¿ö¿ö`¿öú¿ö»¿õ¿õN¿õl¿õm¿õ†¿õ∫¿õª¿õ›¿õÈ¿õ˚¿ú¿ú&¿úp¿úw¿ú‹¿ú¿úÙ¿úˆ¿ú˜¿ù5¿ù9¿ùä¿ù†¿ù§¿ù˜¿û¿û¿û`¿û¨¿û·¿ü/¿ü3¿üÜ¿üÿ¿üÈ¿üÌ¿†S¿†W¿†e¿†i¿†≤¿†”¿†ı¿°¿°T¿°V¿°l¿°ª¿¢¿¢;¿¢s¿¢£¿¢‡¿¢Ê¿£¿£¿£¿£R¿£ú¿£Œ¿§¿§.¿§k¿§q¿§ç¿§ë¿§í¿§©¿§™¿§»¿§Ì¿§Ó¿•?¿•d¿•j¿•ô¿•ü¿•∫¿•Í¿•˙¿¶¿¶S¿¶k¿¶º¿¶Ô¿¶¸¿ß¿ßd¿ßØ¿®¿®R¿®_¿®x¿®†¿®¿©
¿©A¿©N¿©g¿©è¿©‚¿™ ¿™ ¿™W¿™d¿™p¿™x¿™ã¿™ï¿™¶¿™™¿™´¿™≈¿™ﬁ¿´!¿´q¿´¢¿´◊¿´Ì¿¨
¿¨#¿¨N¿¨¿¨†¿≠ ¿≠6¿≠>¿≠Y¿≠u¿≠Ç¿≠•¿≠«¿Æ¿ÆX¿Æ™¿Æ€¿Ø-¿ØR¿ØÉ¿Ø∞¿ØÃ¿Ø€¿∞%¿∞T¿∞ó¿∞»¿∞˜¿±5¿±Å¿±ª¿≤¿≤?¿≤{¿≤±¿≤π¿≤ø¿≤√¿≤ƒ¿≥¿≥¿≥i¿≥õ¿≥–¿¥¿¥)¿¥>¿¥®¿¥Ø¿¥˛¿µ ¿µA¿µX¿µd¿µé¿µÁ¿∂B¿∂ò¿∂ü¿∂Œ¿∂“¿∂”¿∑¿∑3¿∑Y¿∑]¿∑^¿∑®¿∑”¿∑Ô¿∑Û¿∑Ù¿∏#¿∏s¿∏º¿π ¿π¿πQ¿πu¿π¶¿π≥¿πÔ¿∫9¿∫â¿∫è¿∫æ¿∫·¿ª¿ª"¿ªZ¿ª†¿ªÙ¿ª˙¿º&¿ºN¿ºd¿ºh¿ºi¿ºñ¿ºú¿º÷¿º˜¿Ω¿Ω.¿Ω2¿Ω3¿Ωy¿Ω¿Ωµ¿Ω ¿ΩÓ¿æ
¿æ\¿æó¿æ≈¿æÔ¿ø¿ø¿ø!¿ø9¿øP¿øe¿øi¿øj¿ø¥¿ø∫¿¿	¿¿Z¿¿è¿¿¬¿¿›¿¿¯¿¡¿¡6¿¡Ü¿¡∫¿¡»¿¡Œ¿¡Ô¿¬¿¬5¿¬9¿¬:¿¬F¿¬k¿¬Ñ¿¬®¿¬ƒ¿¬ﬂ¿√1¿√\¿√b¿√f¿√g¿√s¿√Ö¿√ô¿√Ω¿√Ÿ¿√Ô¿ƒA¿ƒl¿ƒr¿ƒv¿ƒw¿ƒÉ¿ƒû¿ƒ¬¿ƒﬁ¿ƒ˘¿≈K¿≈v¿≈|¿≈Ä¿≈Å¿≈ç¿≈¡¿≈Â¿∆¿∆¿∆i¿∆î¿∆ö¿∆û¿∆ü¿∆»¿∆Ù¿∆ı¿«¿«G¿«H¿«ã¿«∑¿«Ÿ¿»)¿»U¿»Y¿»Z¿»ò¿»√¿»Â¿…5¿…]¿…a¿…b¿…n¿…†¿…‡¿…˛¿ #¿ 8¿ M¿ í¿ ¥¿ ≈¿ œ¿ „¿À7¿Àe¿Àm¿Às¿Àà¿Àå¿Àé¿Àè¿Àﬂ¿À¯¿À¸¿ÃI¿Ãò¿ÃΩ¿Ã¯¿Õ8¿Õ>¿Õ¿Õ¬¿Œ¿Œd¿Œj¿ŒÆ¿ŒÕ¿Œ”¿œ#¿œB¿œO¿œ`¿œÄ¿œó¿œõ¿œú¿œ‘¿œ˙¿–¿–M¿–¥¿–¯¿–ˇ¿—2¿—@¿—F¿—z¿—≈¿—¸¿“3¿“A¿“n¿“”¿“‹¿“Ú¿”¿”¿”"¿”&¿”'¿”3¿”X¿”q¿”æ¿‘¿‘\¿‘í¿‘‰¿‘Ë¿‘È¿‘ı¿’¿’=¿’í¿’¶¿’™¿’¨¿’≠¿’˙¿÷¿÷
¿÷-¿÷~¿÷ù¿÷Ô¿◊;¿◊_¿◊ß¿◊®¿◊Ë¿ÿ*¿ÿ+¿ÿr¿ÿ√¿ÿ…¿ÿŸ¿ÿﬂ¿Ÿ-¿Ÿk¿Ÿö¿Ÿõ¿ŸË¿⁄)¿⁄e¿⁄g¿⁄h¿⁄µ¿⁄Ë¿⁄Ï¿€5¿€Z¿€ô¿€π¿€Ó¿‹¿‹¿‹¿‹a¿‹b¿‹n¿‹±¿‹Ÿ¿‹›¿‹ﬁ¿‹Í¿›L¿›N¿›O¿›ù¿›Â¿›È¿ﬁ:¿ﬁã¿ﬁπ¿ﬂ¿ﬂ%¿ﬂF¿ﬂ{¿ﬂ™¿ﬂ´¿ﬂ˘¿‡¿‡D¿‡E¿‡p¿‡q¿‡ü¿‡•¿‡µ¿‡ª¿·
¿·>¿·â¿·π¿‚¿‚4¿‚M¿‚y¿‚°¿‚ ¿‚Û¿„"¿„(¿„)¿„w¿„ª¿„·¿„‚¿‰-¿‰D¿‰J¿‰ò¿‰“¿‰Î¿‰Ï¿Â¿Â¿Âd¿Âµ¿ÂÓ¿ÂÙ¿Ê>¿ÊÅ¿Êç¿Êœ¿Ê–¿Á ¿Á7¿Áh¿Ái¿Áu¿Á⁄¿Á€¿Ë¿Ë¿ËE¿ËK¿Ëk¿Ëô¿Ë∂¿Ë·¿È¿È	¿È
¿ÈM¿ÈS¿Èö¿ÈË¿Í¿Í
¿ÍS¿Íê¿Íº¿Íﬁ¿Í‚¿Í‰¿ÍÂ¿Î6¿ÎN¿ÎR¿Î°¿Î≤¿Î˜¿ÏZ¿Ï[¿Ïg¿ÏÄ¿Ï£¿Ï¬¿ÏÎ¿Ì¿ÌC¿ÌJ¿Ìç¿Ì∫¿Ì„¿Ó¿Ó3¿Ó4¿Óa¿Óâ¿Ó¥¿Óª¿ÓÌ¿Ô7¿Ôi¿Ôó¿Ôò¿Ôæ¿Ôø¿Ô˚¿A¿h¿à¿¬¿Ù¿Ò¿Ò0¿ÒT¿Ò]¿Òc¿Ò∞¿Ò“¿Ú¿Ú¿Úk¿Ú∂¿Û¿ÛS¿Ûa¿Ûî¿Û™¿ÛÆ¿ÛØ¿Ûª¿ÛÈ¿ÛÍ¿ÙE¿ÙF¿ÙR¿Ùl¿Ùö¿Ùû¿Ùü¿Ù´¿ÙÓ¿ı¿ı¿ı¿ı¿ı]¿ı´¿ıØ¿ˆ¿ˆ<¿ˆá¿ˆ‘¿˜
¿˜¿˜¿˜Z¿˜í¿˜ñ¿˜ó¿˜£¿˜º¿˜Ë¿¯¿¯9¿¯b¿¯ë¿¯ò¿¯‰¿˘¿˘¿˘¿˘¿˘9¿˘:¿˘F¿˘`¿˘l¿˘y¿˘§¿˘Ò¿˙¿˙¿˙¿˙¿˙¿˙l¿˙ê¿˙î¿˙‹¿˚*¿˚M¿˚Q¿˚õ¿˚Í¿¸8¿¸â¿¸’¿˝¿˝¿˝b¿˝Æ¿˝ˆ¿˛¿˛V¿˛w¿˛ö¿˛æ¿˛Í¿ˇ5¿ˇO¿ˇÑ¿ˇµ¿ˇ‡¿ˇ˙¿ 8¿ Y¿ Ö¿ ã¿ è¿ ê¿ Ø¿ —¿ Û¿¿¿\¿]¿x¿õ¿∫¿⁄¿˘¿ˇ¿R¿d¿É¿û¿À¿¿j¿∂¿…¿ ¿¿_¿Ü¿»¿ ¿6¿d¿ö¿÷¿#¿:¿h¿§¿Ê¿ ¿2¿î¿⁄¿¿G¿i¿î¿£¿Ô¿˚¿	+¿	d¿	Ü¿	≠¿	º¿
 ¿
¿
I¿
à¿
î¿
û¿
¶¿
Ì¿"¿d¿¶¿∞¿◊¿‰¿¸¿¿,¿t¿¨¿›¿#¿L¿z¿Ü¿ê¿¿¿⁄¿‚¿Ë¿Ï¿Ì¿H¿I¿U¿n¿ë¿∞¿Ÿ¿¿1¿8¿g¿≥¿¿U¿[¿s¿í¿≥¿ª¿’¿ˆ¿¿)¿C¿L¿ù¿„¿¿i¿∑¿Ì¿¿F¿ê¿æ¿ ¿‘¿¿6¿r¿¶¿Ù¿C¿í¿⁄¿Ù¿¿%¿-¿;¿A¿B¿Ü¿æ¿Ó¿ı¿ˆ¿8¿v¿|¿}¿ú¿Î¿¿¿E¿k¿å¿º¿¬¿√¿ﬂ¿¿¿-¿V¿ï¿Õ¿¿(¿I¿Q¿W¿ì¿´¿œ¿Ô¿¿¿"¿q¿ß¿Û¿?¿s¿ó¿»¿¿<¿F¿N¿ï¿µ¿Ù¿+¿M¿g¿ê¿ô¿«¿Õ¿Œ¿Ù¿0¿=¿å¿í¿®¿Ô¿ +¿ }¿ œ¿ ˇ¿!,¿!Z¿!Ä¿!Ø¿!‰¿!Ï¿!Ú¿"¿"-¿"1¿"2¿"d¿"ê¿"∏¿"ø¿"ﬂ¿"˝¿#9¿#m¿#í¿#ú¿#¨¿#∞¿#±¿#Ω¿#‰¿$¿$¿$¿$¿$a¿$ß¿$∆¿$Î¿$˝¿%¿%&¿%N¿%T¿%X¿%Y¿%e¿%ì¿%¨¿%˙¿&C¿&^¿&¿&Æ¿&¥¿&∏¿&π¿&‹¿&˙¿'¿':¿'@¿'D¿'E¿'a¿'b¿'n¿'à¿'†¿'§¿'•¿'„¿'Â¿'Ê¿(.¿(2¿(Ä¿(∏¿(”¿)¿)!¿)p¿)Ω¿*¿*^¿*u¿*°¿*…¿*Ù¿*˚¿+H¿+L¿+M¿+e¿+Å¿+ú¿+Ø¿+∞¿+€¿,¿,¿,<¿,q¿,r¿,ß¿,‘¿,’¿,˚¿-¿-¿-m¿-s¿-É¿-â¿-Ó¿.V¿.m¿.ê¿.Ø¿.—¿.◊¿.˘¿.˙¿/¿/Q¿/{¿/|¿/¿¿/˝¿0=¿0ì¿0î¿0”¿1¿1m¿1Ü¿1Â¿1Ù¿2@¿2î¿2ü¿2Û¿3?¿3@¿3x¿3∫¿3‹¿4¿4¿4P¿4ú¿4º¿4Î¿5¿5H¿5Ü¿5›¿5ˇ¿6¿6¿6¿6#¿6$¿6T¿6≠¿6œ¿7¿7I¿7e¿7Ä¿7à¿7é¿7í¿7ì¿7¡¿8 ¿8¿8+¿81¿8_¿8w¿8}¿8ª¿8ø¿8¿¿8ˇ¿9L¿9X¿9]¿9≠¿9Ï¿:¿:C¿:h¿:¿:Ö¿:≥¿:ﬂ¿;
¿;¿;.¿;V¿;z¿;{¿;ù¿;≠¿;Ã¿<'¿<2¿<h¿<°¿<º¿<ƒ¿<Ê¿<ˆ¿=¿=n¿=y¿=´¿>¿>$¿>,¿>2¿>3¿>f¿>°¿>ﬁ¿>Ì¿?
¿?¿?¿?¿?¿?S¿?X¿?ß¿?æ¿?√¿@¿@\¿@ü¿@†¿@Ï¿A:¿A?¿Aè¿A∏¿A—¿AÍ¿B¿B%¿BD¿BJ¿Bw¿Bƒ¿BÏ¿C>¿CÄ¿CÅ¿C”¿C¯¿D9¿DZ¿Da¿Db¿DÑ¿D•¿D≤¿D‘¿E¿EN¿E£¿E©¿E≠¿EÆ¿E·¿Eˆ¿F¿F¿F-¿F1¿F2¿FÖ¿F–¿FÌ¿G¿G8¿G<¿G=¿Gà¿G“¿GÎ¿GÒ¿H;¿H}¿HÉ¿Hì¿Hô¿HË¿I¿I0¿I2¿I3¿Iá¿Iã¿I‚¿J2¿JE¿Jâ¿J‘¿J˜¿K¿Kb¿Kd   Ä»/// @docImport 'dart:ui';
///
/// @docImport 'package:flutter/widgets.dart';
///
/// @docImport 'box.dart';
/// @docImport 'proxy_box.dart';
/// @docImport 'view.dart';
/// @docImport 'viewport.dart';
ÅxÅçÅåÅèÅ£Å¶   Åœ   Å˘   Ç!   ÇI   Çr   Çú   Ç≥   Ç»   ÇﬁÉÑQÑSÑzÑöÑú  Ñ≈ÇhÜÉÜÉÅ∑/// Base class for data associated with a [RenderObject] by its parent.
///
/// Some render objects wish to store data on their children, such as the
/// children's input parameters to the parent's layout algorithm or the
/// children's position relative to other children.
///
/// See also:
///
///  * [RenderObject.setupParentData], which [RenderObject] subclasses may
///    override to attach specific types of parent data to children.    ÜíkÜÚÜÚ:/// Called when the RenderObject is removed from the tree.  ÜœÜ–Ü‹Ü›á*áá   áá àô¿ iHãêãêÇ/// A place to paint.
///
/// Rather than holding a canvas directly, [RenderObject]s paint using a painting
/// context. The painting context has a [Canvas], which receives the
/// individual draw operations, and also has functions for painting child
/// render objects.
///
/// When painting a child render object, the canvas held by the painting context
/// can change because the draw operations issued before and after painting the
/// child might be recorded in separate compositing layers. For this reason, do
/// not hold a reference to the canvas across operations that might paint
/// child render objects.
///
/// New [PaintingContext] objects are created automatically when using
/// [PaintingContext.repaintCompositedChild] and [pushLayer]. ã∏Ä–åL åLå[ ~/// Creates a painting context.
///
/// Typically only called by [PaintingContext.repaintCompositedChild]
/// and [pushLayer].å\åbåa  åråxåw  å?å@åå$å°å°  åµÅAçÁçÁÅ/// An estimate of the bounds within which the painting context's [canvas]
/// will record painting commands. This can be useful for debugging.
///
/// The canvas will allow painting outside these bounds.
///
/// The [estimatedBounds] rectangle is in the [canvas] coordinate system. ≠≠$≠$  ≠5≠I≠I  ≠V≠^≠^  ´oÅé´x´x    ≠jÅrÆ^Æ^Ä“/// The canvas on which to paint.
///
/// The current canvas can change whenever you paint a child using this
/// context, which means it's fragile to hold a reference to the canvas
/// returned by this getter.  ÆGÆHç˚Çïè∆è∆Å®/// Repaint the given render object.
///
/// The render object must be attached to a [PipelineOwner], must have a
/// composited layer, and must be in need of painting. The render object's
/// layer, if any, is re-used, along with any layers in the subtree that don't
/// need to be repainted.
///
/// See also:
///
///  * [RenderObject.isRepaintBoundary], which determines if a [RenderObject]
///    has a composited layer. è›èÎèÍ  èÚ#è¯è˜  êêîâ7ê†ê†  êΩêÀê   ê◊#ê›ê‹  ë ëë  êıôœÖÇõ›õ›ÅÎ/// Update the composited layer of [child] without repainting its children.
///
/// The render object must be attached to a [PipelineOwner], must have a
/// composited layer, and must be in need of a composited layer update but
/// not in need of painting. The render object's layer is re-used, and none
/// of its children are repaint or their layers updated.
///
/// See also:
///
///  * [RenderObject.isRepaintBoundary], which determines if a [RenderObject]
///    has a composited layer. õÛúú    üUÇ¡†µ†µÅC/// In debug mode, repaint the given render object using a custom painting
/// context that can record the results of the painting operation in addition
/// to performing the regular paint of the child.
///
/// See also:
///
///  * [repaintCompositedChild], for repainting a composited child without
///    instrumentation. †‡†Ó†Ì  †˙#° †ˇ  °#&°=°<  °¢Éõ£6£6Å/// Paint a child [RenderObject].
///
/// If the child has its own composited layer, the child will be composited
/// into the layer subtree associated with this painting context. Otherwise,
/// the child will be painted into the current PictureLayer for this context. £A£O£N  £U£]£\   •πÉ©•æ•æ  •Œ•‹•€  •‚•Í•È   ©fÇ™˚™˚Åp/// Adds a layer to the recording requiring that the recording is already
/// stopped.
///
/// Do not call this function directly: call [addLayer] or [pushLayer]
/// instead. This function is called internally when all layers not
/// generated from the [canvas] are added.
///
/// Subclasses that need to customize how layers are added should override
/// this method. ´´´  ™È™ÍÆ‡ÅÆÂÆÂ    Ø˝Çì≤≤Åˆ/// Adds a [CompositionCallback] for the current [ContainerLayer] used by this
/// context.
///
/// Composition callbacks are called whenever the layer tree containing the
/// current layer of this painting context gets composited, or when it gets
/// detached and will not be rendered again. This happens regardless of
/// whether the layer is added via retained rendering or not.
///
/// {@macro flutter.rendering.Layer.compositionCallbacks}
///
/// See also:
///   *  [Layer.addCompositionCallback]. ≤0≤E≤D   ≤îÖ=¥°¥°Å’/// Stop recording to a canvas if recording has started.
///
/// Do not call this function directly: functions in this class will call
/// this method as needed. This function is called internally to ensure that
/// recording is stopped before adding layers or finalizing the results of a
/// paint.
///
/// Subclasses that need to customize how recording to a canvas is performed
/// should override this method to save the results of the custom canvas
/// recordings.  ¥~¥¥ã¥å∑’Ç¶π˙π˙Ç	/// Hints that the painting in the current layer is complex and would benefit
/// from caching.
///
/// If this hint is not set, the compositor will apply its own heuristics to
/// decide whether the current layer is complex enough to benefit from
/// caching.
///
/// Calling this ensures a [Canvas] is available. Only draw calls on the
/// current canvas will be hinted; the hint is not propagated to new canvases
/// created after a new layer is added to the painting context (e.g. with
/// [addLayer] or [pushLayer]).   ∫ÉΩΩÇi/// Hints that the painting in the current layer is likely to change next frame.
///
/// This hint tells the compositor not to cache the current layer because the
/// cache will not be used in the future. If this hint is not set, the
/// compositor will apply its own heuristics to decide whether the current
/// layer is likely to be reused in the future.
///
/// Calling this ensures a [Canvas] is available. Only draw calls on the
/// current canvas will be hinted; the hint is not propagated to new canvases
/// created after a new layer is added to the painting context (e.g. with
/// [addLayer] or [pushLayer]).   ΩãÇŒ¿ @	¿ @	Ç\/// Adds a composited leaf layer to the recording.
///
/// After calling this function, the [canvas] property will change to refer to
/// a new [Canvas] that draws on top of the given layer.
///
/// A [RenderObject] that uses this function is very likely to require its
/// [RenderObject.alwaysNeedsCompositing] property to return true. That informs
/// ancestor render objects that this render object will include a composited
/// layer, which, for example, causes them to use composited clips.
///
/// See also:
///
///  * [pushLayer], for adding a layer and painting further contents within
///    it. ¿ @¿ @¿ @   ¿ @]à$¿ F¿ FÖh/// Appends the given layer to the recording, and calls the `painter` callback
/// with that layer, providing the `childPaintBounds` as the estimated paint
/// bounds of the child. The `childPaintBounds` can be used for debugging but
/// have no effect on painting.
///
/// The given layer must be an unattached orphan. (Providing a newly created
/// object, rather than reusing an existing layer, satisfies that
/// requirement.)
///
/// {@template flutter.rendering.PaintingContext.pushLayer.offset}
/// The `offset` is the offset to pass to the `painter`. In particular, it is
/// not an offset applied to the layer itself. Layers conceptually by default
/// have no position or size, though they can transform their contents. For
/// example, an [OffsetLayer] applies an offset to its children.
/// {@endtemplate}
///
/// If the `childPaintBounds` are not specified then the current layer's paint
/// bounds are used. This is appropriate if the child layer does not apply any
/// transformation or clipping to its contents. The `childPaintBounds`, if
/// specified, must be in the coordinate system of the new layer (i.e. as seen
/// by its children after it applies whatever transform to its contents), and
/// should not go outside the current layer's paint bounds.
///
/// See also:
///
///  * [addLayer], for pushing a layer without painting further contents
///    within it. ¿ F¿ F ¿ F  ¿ F/¿ FH¿ FG  ¿ FT¿ F\¿ F[  ¿ Fi¿ Fp¿ Fo   ¿ HÖÅ!¿ I6¿ I6Äç/// Creates a painting context configured to paint into [childLayer].
///
/// The `bounds` are estimated paint bounds for debugging purposes. ¿ II¿ IY¿ IX  ¿ Id¿ Ij¿ Ii  ¿ I¿ I¿ I™äª¿ Qt¿ Qtáp/// Clip further painting using a rectangle.
///
/// {@template flutter.rendering.PaintingContext.pushClipRect.needsCompositing}
/// The `needsCompositing` argument specifies whether the child needs
/// compositing. Typically this matches the value of
/// [RenderObject.needsCompositing] for the caller. If false, this method
/// returns null, indicating that a layer is no longer necessary. If a render
/// object calling this method stores the `oldLayer` in its
/// [RenderObject.layer] field, it should set that field to null.
///
/// When `needsCompositing` is false, this method will use a more efficient
/// way to apply the layer effect than actually creating a layer.
/// {@endtemplate}
///
/// {@template flutter.rendering.PaintingContext.pushClipRect.offset}
/// The `offset` argument is the offset from the origin of the canvas'
/// coordinate system to the origin of the caller's coordinate system.
/// {@endtemplate}
///
/// The `clipRect` is the rectangle (in the caller's coordinate system) to use
/// to clip the painting done by [painter]. It should not include the
/// `offset`.
///
/// The `painter` callback will be called while the `clipRect` is applied. It
/// is called synchronously during the call to [pushClipRect].
///
/// The `clipBehavior` argument controls how the rectangle is clipped.
///
/// {@template flutter.rendering.PaintingContext.pushClipRect.oldLayer}
/// For the `oldLayer` argument, specify the layer created in the previous
/// frame. This gives the engine more information for performance
/// optimizations. Typically this is the value of [RenderObject.layer] that a
/// render object creates once, then reuses for all subsequent frames until a
/// layer is no longer needed (e.g. the render object no longer needs
/// compositing) or until the render object changes the type of the layer
/// (e.g. from opacity layer to a clip rect layer).
/// {@endtemplate} ¿ QÜ¿ Qå¿ Qã  ¿ Q°¿ Q©¿ Q®  ¿ Q¥¿ Q∫¿ Qπ  ¿ Q«¿ Q‡¿ Qﬂ  ¿ QÓ!¿ QÙ¿ QÛ  ¿ R¿ R%¿ R$  ¿ R¿ R¿ R¿ TiÜ≈¿ WÓ¿ WÓÉN/// Clip further painting using a rounded rectangle.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.needsCompositing}
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.offset}
///
/// The `bounds` argument is used to specify the region of the canvas (in the
/// caller's coordinate system) into which `painter` will paint.
///
/// The `clipRRect` argument specifies the rounded-rectangle (in the caller's
/// coordinate system) to use to clip the painting done by `painter`. It
/// should not include the `offset`.
///
/// The `painter` callback will be called while the `clipRRect` is applied. It
/// is called synchronously during the call to [pushClipRRect].
///
/// The `clipBehavior` argument controls how the rounded rectangle is clipped.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer} ¿ X¿ X¿ X  ¿ X¿ X$¿ X#  ¿ X/¿ X5¿ X4  ¿ X@¿ XG¿ XF  ¿ XU¿ Xn¿ Xm  ¿ X|"¿ XÇ¿ XÅ  ¿ X§¿ Xµ¿ X¥  ¿ Xê¿ Xî¿ Xï¿ [2Üè¿ ^é¿ ^éÉ&/// Clip further painting using a path.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.needsCompositing}
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.offset}
///
/// The `bounds` argument is used to specify the region of the canvas (in the
/// caller's coordinate system) into which `painter` will paint.
///
/// The `clipPath` argument specifies the [Path] (in the caller's coordinate
/// system) to use to clip the painting done by `painter`. It should not
/// include the `offset`.
///
/// The `painter` callback will be called while the `clipPath` is applied. It
/// is called synchronously during the call to [pushClipPath].
///
/// The `clipBehavior` argument controls how the path is clipped.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer} ¿ ^†¿ ^¶¿ ^•  ¿ ^ª¿ ^√¿ ^¬  ¿ ^Œ¿ ^‘¿ ^”  ¿ ^ﬂ¿ ^Â¿ ^‰  ¿ ^Ú¿ _¿ _
  ¿ _"¿ _¿ _  ¿ _A¿ _Q¿ _P  ¿ _-¿ _1¿ _2¿ a≈Ñ`¿ dÚ¿ dÚÇ˚/// Blend further painting with a color filter.
///
/// {@macro flutter.rendering.PaintingContext.pushLayer.offset}
///
/// The `colorFilter` argument is the [ColorFilter] value to use when blending
/// the painting done by `painter`.
///
/// The `painter` callback will be called while the `colorFilter` is applied.
/// It is called synchronously during the call to [pushColorFilter].
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer}
///
/// A [RenderObject] that uses this function is very likely to require its
/// [RenderObject.alwaysNeedsCompositing] property to return true. That informs
/// ancestor render objects that this render object will include a composited
/// layer, which, for example, causes them to use composited clips. ¿ e¿ e¿ e  ¿ e¿ e'¿ e&  ¿ e7¿ eP¿ eO  ¿ e^¿ eq¿ ep   ¿ f)Ü¿ h˛¿ h˛Ç¶/// Transform further painting using a matrix.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.needsCompositing}
///
/// The `offset` argument is the offset to pass to `painter` and the offset to
/// the origin used by `transform`.
///
/// The `transform` argument is the [Matrix4] with which to transform the
/// coordinate system while calling `painter`. It should not include `offset`.
/// It is applied effectively after applying `offset`.
///
/// The `painter` callback will be called while the `transform` is applied. It
/// is called synchronously during the call to [pushTransform].
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer} ¿ i¿ i¿ i  ¿ i,¿ i4¿ i3  ¿ i?¿ iH¿ iG  ¿ iV¿ io¿ in  ¿ i}¿ ié¿ iç   ¿ lJÑˆ¿ p¿ pÉñ/// Blend further painting with an alpha value.
///
/// The `offset` argument indicates an offset to apply to all the children
/// (the rendering created by `painter`).
///
/// The `alpha` argument is the alpha value to use when blending the painting
/// done by `painter`. An alpha value of 0 means the painting is fully
/// transparent and an alpha value of 255 means the painting is fully opaque.
///
/// The `painter` callback will be called while the `alpha` is applied. It
/// is called synchronously during the call to [pushOpacity].
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer}
///
/// A [RenderObject] that uses this function is very likely to require its
/// [RenderObject.alwaysNeedsCompositing] property to return true. That informs
/// ancestor render objects that this render object will include a composited
/// layer, which, for example, causes them to use composited clips. ¿ p#¿ p+¿ p*  ¿ p6	¿ p;¿ p:  ¿ pE¿ p^¿ p]  ¿ pl¿ p{¿ pz   ¿ qDÄõ¿ qW¿ qW   ¿ qD¿ qE ¿ q„êT¿ {⁄¿ {⁄â‹/// An abstract set of layout constraints.
///
/// Concrete layout models (such as box) will create concrete subclasses to
/// communicate layout constraints between parents and children.
///
/// ## Writing a Constraints subclass
///
/// When creating a new [RenderObject] subclass with a new layout protocol, one
/// will usually need to create a new [Constraints] subclass to express the
/// input to the layout algorithms.
///
/// A [Constraints] subclass should be immutable (all fields final). There are
/// several members to implement, in addition to whatever fields, constructors,
/// and helper methods one may find useful for a particular layout protocol:
///
/// * The [isTight] getter, which should return true if the object represents a
///   case where the [RenderObject] class has no choice for how to lay itself
///   out. For example, [BoxConstraints] returns true for [isTight] when both
///   the minimum and maximum widths and the minimum and maximum heights are
///   equal.
///
/// * The [isNormalized] getter, which should return true if the object
///   represents its data in its canonical form. Sometimes, it is possible for
///   fields to be redundant with each other, such that several different
///   representations have the same implications. For example, a
///   [BoxConstraints] instance with its minimum width greater than its maximum
///   width is equivalent to one where the maximum width is set to that minimum
///   width (`2<w<1` is equivalent to `2<w<2`, since minimum constraints have
///   priority). This getter is used by the default implementation of
///   [debugAssertIsValid].
///
/// * The [debugAssertIsValid] method, which should assert if there's anything
///   wrong with the constraints object. (We use this approach rather than
///   asserting in constructors so that our constructors can be `const` and so
///   that it is possible to create invalid constraints temporarily while
///   building valid ones.) See the implementation of
///   [BoxConstraints.debugAssertIsValid] for an example of the detailed checks
///   that can be made.
///
/// * The [==] operator and the [hashCode] getter, so that constraints can be
///   compared for equality. If a render object is given constraints that are
///   equal, then the rendering library will avoid laying the object out again
///   if it is not dirty.
///
/// * The [toString] method, which should describe the constraints so that they
///   appear in a usefully readable form in the output of [debugDumpRenderTree]. ¿ {ÍÄ≠¿ |â ¿ |â¿ |î Äî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.   ¿ |õ[¿ |Ó¿ |ÓG/// Whether there is exactly one size possible given these constraints.   ¿ |˙X¿ }E¿ }E?/// Whether the constraint is expressed in a consistent manner.   ¿ }VÑﬂ¿ Åç¿ ÅçÑ/// Asserts that the constraints are valid.
///
/// This might involve checks more detailed than [isNormalized].
///
/// For example, the [BoxConstraints] subclass verifies that the constraints
/// are not [double.nan].
///
/// If the `isAppliedConstraint` argument is true, then even stricter rules
/// are enforced. This argument is set to true when checking constraints that
/// are about to be applied to a [RenderObject] during layout, as opposed to
/// constraints that may be further affected by other constraints. For
/// example, the asserts for verifying the validity of
/// [RenderConstrainedBox.additionalConstraints] do not set this argument, but
/// the asserts for verifying the argument passed to the [RenderObject.layout]
/// method do.
///
/// The `informationCollector` argument takes an optional callback which is
/// called when an exception is to be thrown. The collected information is
/// then included in the message after the error line.
///
/// Returns the same as [isNormalized] if asserts are disabled. ¿ Å¶ ¿ Å¨¿ Å´  ¿ ÅÃ*¿ Å„¿ Å‚  ¿ Å¡¿ {¿¿ {¡¿ É⁄Ñy¿ É‡¿ É‡  ¿ ÑÇ¿ Ñ¿ Ñ*¿ Ñ+¿ Ñ,¿ Ñ+ ¿ Ñ-¿ Ñ<¿ Ñ;  ¿ ÑB¿ ÑH¿ ÑG  ¿ ÑZ¿ ÑS¿ Ñ\¿ Ü+¿ Ü?¿ Ü?  ¿ ÜJf¿ Ü®¿ Ü®G/// The callback that will be notified when the semantics tree updates.  ¿ ÜµÅú¿ Ü∆¿ Ü∆   ¿ Üµ¿ Ü∂ ¿ àU¿ ]Ü¿ ì¿ ìä©/// The pipeline owner manages the rendering pipeline.
///
/// The pipeline owner provides an interface for driving the rendering pipeline
/// and stores the state about which render objects have requested to be visited
/// in each stage of the pipeline. To flush the pipeline, call the following
/// functions in order:
///
/// 1. [flushLayout] updates any render objects that need to compute their
///    layout. During this phase, the size and position of each render
///    object is calculated. Render objects might dirty their painting or
///    compositing state during this phase.
/// 2. [flushCompositingBits] updates any render objects that have dirty
///    compositing bits. During this phase, each render object learns whether
///    any of its children require compositing. This information is used during
///    the painting phase when selecting how to implement visual effects such as
///    clipping. If a render object has a composited child, it needs to use a
///    [Layer] to create the clip in order for the clip to apply to the
///    composited child (which will be painted into its own [Layer]).
/// 3. [flushPaint] visits any render objects that need to paint. During this
///    phase, render objects get a chance to record painting commands into
///    [PictureLayer]s and construct other composited [Layer]s.
/// 4. Finally, if semantics are enabled, [flushSemantics] will compile the
///    semantics for the render objects. This semantic information is used by
///    assistive technology to improve the accessibility of the render tree.
///
/// The [RendererBinding] holds the pipeline owner for the render objects that
/// are visible on screen. You can create other pipeline owners to manage
/// off-screen objects, which can flush their pipelines independently of the
/// on-screen render objects.
///
/// [PipelineOwner]s can be organized in a tree to manage multiple render trees,
/// where each [PipelineOwner] is responsible for one of the render trees. To
/// build or modify the tree, call [adoptChild] or [dropChild]. During each of
/// the different flush phases described above, a [PipelineOwner] will first
/// perform the phase on the nodes it manages in its own render tree before
/// calling the same flush method on its children. No assumption must be made
/// about the order in which child [PipelineOwner]s are flushed.
///
/// A [PipelineOwner] may also be [attach]ed to a [PipelineManifold], which
/// gives it access to platform functionality usually exposed by the bindings
/// without tying it to a specific binding implementation. All [PipelineOwner]s
/// in a given tree must be attached to the same [PipelineManifold]. This
/// happens automatically during [adoptChild]. ¿ ì4Çﬁ¿ î ¿ î¿ î' Ä€/// Creates a pipeline owner.
///
/// Typically created by the binding (e.g., [RendererBinding]), but can be
/// created separately from the binding to drive off-screen render objects
/// through the rendering pipeline.¿ î.¿ î4¿ î3  ¿ îK¿ îQ¿ îP  ¿ îm¿ îs¿ îr  ¿ îâ¿ îè¿ îé   ¿ ñÇç¿ òë¿ òëÇP/// Called when a render object associated with this pipeline owner wishes to
/// update its visual appearance.
///
/// Typical implementations of this function will schedule a task to flush the
/// various stages of the pipeline. This function might be called multiple
/// times in quick succession. Implementations should take care to discard
/// duplicate calls quickly.
///
/// When the [PipelineOwner] is attached to a [PipelineManifold] and
/// [onNeedVisualUpdate] is provided, the [onNeedVisualUpdate] callback is
/// invoked instead of calling [PipelineManifold.requestVisualUpdate]. ¿ ò®Ä’¿ ôf¿ ôfÄ°/// Called whenever this pipeline owner creates a semantics object.
///
/// Typical implementations will schedule the creation of the initial
/// semantics tree. ¿ ôÇÅ¿ öÄ¿ öÄÄ÷/// Called whenever this pipeline owner's semantics owner emits a [SemanticsUpdate].
///
/// Typical implementations will delegate the [SemanticsUpdate] to a [FlutterView]
/// that can handle the [SemanticsUpdate]. ¿ öñÄª¿ õ9¿ õ9Äà/// Called whenever this pipeline owner disposes its semantics owner.
///
/// Typical implementations will tear down the semantics tree. ¿ ù+¿ ù9¿ ù9  ¿ °#¿ °$¿ °$ ¿ °=¿ °F9¿ °Y¿ °Y ¿ °}¿ °~¿ °o¿ °|¿ °p¿ ¢ü¿ ¢§¿ ¢§ ¿ ¢∏¿ ¢¡#¿ ¢∆¿ ¢∆ ¿ ¢ﬂ¿ Æ	0¿ Æ¿ Æ ¿ Æ4¿ ∞<N¿ ∞U¿ ∞U ¿ ∞à¿ ∞â¿ ∞z¿ ∞á¿ ∞{¿ ¥W8¿ ¥j¿ ¥j ¿ ¥ç¿ ¥é¿ ¥¿ ¥å¿ ¥Ä¿ µ´¿ µ∞¿ µ∞ ¿ µ√¿ ¡2¿ ¡B¿ ¡B  ¿ √Z$¿ √^¿ √^ ¿ √}¿ …0!¿ …5¿ …5 ¿ …L¿ …UA¿ …m¿ …m ¿ …î¿ …ï¿ …Ü¿ …ì¿ …á¿ —À6¿ —‰¿ —‰ ¿ —ˇ¿ “ ¿ —¿ —˛¿ —Ò¿ “¿ “¿ “  ¿ “%¿ “4¿ “4  ¿ úªm¿ ù¿ ùB/// The unique object managed by this pipeline that has no parent.   ¿ ùFÄ¶¿ ùJ¿ ùJ  ¿ ùS¿ ùb¿ ùa   ¿ °ÑÅ¿ ¢v¿ ¢vÄ‹/// Whether this pipeline is currently in the layout phase.
///
/// Specifically, whether [flushLayout] is currently running.
///
/// Only valid when asserts are enabled; in release builds, this
/// always returns false.   ¿ ¥îÅ¿ µÑ¿ µÑÄ⁄/// Whether this pipeline is currently in the paint phase.
///
/// Specifically, whether [flushPaint] is currently running.
///
/// Only valid when asserts are enabled. In release builds,
/// this always returns false.   ¿ æuÇ∫¿ ¡¿ ¡Çk/// The object that is managing semantics for this pipeline owner, if any.
///
/// An owner is created by [ensureSemantics] or when the [PipelineManifold] to
/// which this owner is connected has [PipelineManifold.semanticsEnabled] set
/// to true. The owner is valid for as long as
/// [PipelineManifold.semanticsEnabled] remains true or while there are
/// outstanding [SemanticsHandle]s from calls to [ensureSemantics]. The
/// [semanticsOwner] field will revert to null once both conditions are no
/// longer met.
///
/// When [semanticsOwner] is null, the [PipelineOwner] skips all steps
/// relating to semantics.   ¿ ¡VÇ¿ √¿ √ÄË/// Deprecated.
///
/// Use [SemanticsBinding.debugOutstandingSemanticsHandles] instead. This
/// API is broken because an outstanding semantics handle on a given pipeline
/// owner doesn't mean that semantics are actually produced.  ¿ ¬I¿ ¬J¿ ¬T¿ √
¿ ¬Z¿ ¬†¿ ¬—¿ “¿Z¿ “À¿ “À    ¿ Ÿz¿ Ÿ¿ Ÿ    ¿ õVÅa¿ ú¿ úÄ∫/// Calls [onNeedVisualUpdate] if [onNeedVisualUpdate] is not null.
///
/// Used to notify the pipeline owner that an associated render object wishes
/// to update its visual appearance.   ¿ ¢Èâ¥¿ §V¿ §VÅY/// Update the layout information for all dirty render objects.
///
/// This function is one of the core stages of the rendering pipeline. Layout
/// information is cleaned prior to painting so that render objects will
/// appear on screen in their up-to-date locations.
///
/// See [RendererBinding] for an example of how this function is used.   ¿ ÆlÅÃ¿ Æq¿ Æq  ¿ Æë¿ Æü¿ Æû   ¿ ∞èÉƒ¿ ±4¿ ±4Äó/// Updates the [RenderObject.needsCompositing] bits.
///
/// Called as part of the rendering pipeline after [flushLayout] and before
/// [flushPaint].   ¿ µÕà§¿ ∑H¿ ∑HÅg/// Update the display lists for all render objects.
///
/// This function is one of the core stages of the rendering pipeline.
/// Painting occurs after layout and before the scene is recomposited so that
/// scene is composited with up-to-date display lists for every render object.
///
/// See [RendererBinding] for an example of how this function is used.   ¿ √ÉÇº¿ ≈ò¿ ≈òÄ·/// Deprecated.
///
/// Call [SemanticsBinding.ensureSemantics] instead and optionally add a
/// listener to [PipelineOwner.semanticsOwner]. This API is broken as calling
/// it does not guarantee that semantics are produced. ¿ ≈©¿ ≈∏¿ ≈∑  ¿ ƒo¿ ƒp¿ ƒz¿ ≈Ñ¿ ƒÄ¿ ƒÙ¿ ≈K¿ ∆CÇU¿ ∆H¿ ∆H    ¿ »úÄê¿ »°¿ »°    ¿ …õÜ~¿ Àö¿ ÀöÅ„/// Update the semantics for render objects marked as needing a semantics
/// update.
///
/// Initially, only the root node, as scheduled by
/// [RenderObject.scheduleInitialSemantics], needs a semantics update.
///
/// This function is one of the core stages of the rendering pipeline. The
/// semantics are compiled after painting and only after
/// [RenderObject.scheduleInitialSemantics] has been called.
///
/// See [RendererBinding] for an example of how this function is used.   ¿ –Ä≤¿ –?¿ –?   ¿ –¿ –¿ –”Äﬁ¿ –‰¿ –‰  ¿ –¯&¿ —¿ —  ¿ –”¿ –‘¿ “Dx¿ “I¿ “I  ¿ “Y¿ “h¿ “g  ¿ “n¿ “~¿ “}   ¿ ”Ç¿ ‘3¿ ‘3Å/// Mark this [PipelineOwner] as attached to the given [PipelineManifold].
///
/// Typically, this is only called directly on the root [PipelineOwner].
/// Children are automatically attached to their parent's [PipelineManifold]
/// when [adoptChild] is called. ¿ ‘:¿ ‘L¿ ‘K   ¿ ’?Ç†¿ ÷5¿ ÷5ÄÊ/// Mark this [PipelineOwner] as detached.
///
/// Typically, this is only called directly on the root [PipelineOwner].
/// Children are automatically detached from their parent's [PipelineManifold]
/// when [dropChild] is called.   ¿ ŸäÖ(¿ ›D¿ ›DÉê/// Adds `child` to this [PipelineOwner].
///
/// During the phases of frame production (see [RendererBinding.drawFrame]),
/// the parent [PipelineOwner] will complete a phase for the nodes it owns
/// directly before invoking the flush method corresponding to the current
/// phase on its child [PipelineOwner]s. For example, during layout, the
/// parent [PipelineOwner] will first lay out its own nodes before calling
/// [flushLayout] on its children. During paint, it will first paint its own
/// nodes before calling [flushPaint] on its children. This order also applies
/// for all the other phases.
///
/// No assumptions must be made about the order in which child
/// [PipelineOwner]s are flushed.
///
/// No new children may be added after the [PipelineOwner] has started calling
/// [flushLayout] on any of its children until the end of the current frame.
///
/// To remove a child, call [dropChild]. ¿ ›O¿ ›^¿ ›]   ¿ ﬁ∂Ç¿¿ ‡¿ ‡ÅG/// Removes a child [PipelineOwner] previously added via [adoptChild].
///
/// This node will cease to call the flush methods on the `child` during frame
/// production.
///
/// No children may be removed after the [PipelineOwner] has started calling
/// [flushLayout] on any of its children until the end of the current frame. ¿ ‡¿ ‡*¿ ‡)   ¿ ·zÅ¿ ‚1¿ ‚1Ä•/// Calls `visitor` for each immediate child of this [PipelineOwner].
///
/// See also:
///
///  * [adoptChild] to add a child.
///  * [dropChild] to remove a child. ¿ ‚?¿ ‚U¿ ‚T   ¿ ‚ÜÉS¿ „˚¿ „˚Åa/// Release any resources held by this pipeline owner.
///
/// Prior to calling this method the pipeline owner must be removed from the
/// pipeline owner tree, i.e. it must have neither a parent nor any children
/// (see [dropChild]). It also must be [detach]ed from any [PipelineManifold].
///
/// The object is no longer usable after calling dispose.    ¿ Êìâ¿ Í¿ ÍÉr/// Manages a tree of [PipelineOwner]s.
///
/// All [PipelineOwner]s within a tree are attached to the same
/// [PipelineManifold], which gives them access to shared functionality such
/// as requesting a visual update (by calling [requestVisualUpdate]). As such,
/// the [PipelineManifold] gives the [PipelineOwner]s access to functionality
/// usually provided by the bindings without tying the [PipelineOwner]s to a
/// particular binding implementation.
///
/// The root of the [PipelineOwner] tree is attached to a [PipelineManifold] by
/// passing the manifold to [PipelineOwner.attach]. Children are attached to the
/// same [PipelineManifold] as their parent when they are adopted via
/// [PipelineOwner.adoptChild].
///
/// [PipelineOwner]s can register listeners with the [PipelineManifold] to be
/// informed when certain values provided by the [PipelineManifold] change.   ¿ Í@Å‡¿ Ï¿ ÏÅ±/// Whether [PipelineOwner]s connected to this [PipelineManifold] should
/// collect semantics information and produce a semantics tree.
///
/// The [PipelineManifold] notifies its listeners (managed with [addListener]
/// and [removeListener]) when this property changes its value.
///
/// See also:
///
///  * [SemanticsBinding.semanticsEnabled], which [PipelineManifold]
///    implementations typically use to back this property.   ¿ Ï$Éq¿ Ô¿ ÔÉ3/// Called by a [PipelineOwner] connected to this [PipelineManifold] when a
/// [RenderObject] associated with that pipeline owner wishes to update its
/// visual appearance.
///
/// Typical implementations of this function will schedule a task to flush the
/// various stages of the pipeline. This function might be called multiple
/// times in quick succession. Implementations should take care to discard
/// duplicate calls quickly.
///
/// A [PipelineOwner] connected to this [PipelineManifold] will call
/// [PipelineOwner.onNeedVisualUpdate] instead of this method if it has been
/// configured with a non-null [PipelineOwner.onNeedVisualUpdate] callback.
///
/// See also:
///
///  * [SchedulerBinding.ensureVisualUpdate], which [PipelineManifold]
///    implementations typically call to implement this method.    ¿ Ô‰¿ü¿
<¿
<öH/// An object in the render tree.
///
/// The [RenderObject] class hierarchy is the core of the rendering
/// library's reason for being.
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=zmbmrw07qBc}
///
/// [RenderObject]s have a [parent], and have a slot called [parentData] in
/// which the parent [RenderObject] can store child-specific data, for example,
/// the child position. The [RenderObject] class also implements the basic
/// layout and paint protocols.
///
/// The [RenderObject] class, however, does not define a child model (e.g.
/// whether a node has zero, one, or more children). It also doesn't define a
/// coordinate system (e.g. whether children are positioned in Cartesian
/// coordinates, in polar coordinates, etc) or a specific layout protocol (e.g.
/// whether the layout is width-in-height-out, or constraint-in-size-out, or
/// whether the parent sets the size and position of the child before or after
/// the child lays out, etc; or indeed whether the children are allowed to read
/// their parent's [parentData] slot).
///
/// The [RenderBox] subclass introduces the opinion that the layout
/// system uses Cartesian coordinates.
///
/// ## Lifecycle
///
/// A [RenderObject] must [dispose] when it is no longer needed. The creator
/// of the object is responsible for disposing of it. Typically, the creator is
/// a [RenderObjectElement], and that element will dispose the object it creates
/// when it is unmounted.
///
/// [RenderObject]s are responsible for cleaning up any expensive resources
/// they hold when [dispose] is called, such as [Picture] or [Image] objects.
/// This includes any [Layer]s that the render object has directly created. The
/// base implementation of dispose will nullify the [layer] property. Subclasses
/// must also nullify any other layer(s) it directly creates.
///
/// ## Writing a RenderObject subclass
///
/// In most cases, subclassing [RenderObject] itself is overkill, and
/// [RenderBox] would be a better starting point. However, if a render object
/// doesn't want to use a Cartesian coordinate system, then it should indeed
/// inherit from [RenderObject] directly. This allows it to define its own
/// layout protocol by using a new subclass of [Constraints] rather than using
/// [BoxConstraints], and by potentially using an entirely new set of objects
/// and values to represent the result of the output rather than just a [Size].
/// This increased flexibility comes at the cost of not being able to rely on
/// the features of [RenderBox]. For example, [RenderBox] implements an
/// intrinsic sizing protocol that allows you to measure a child without fully
/// laying it out, in such a way that if that child changes size, the parent
/// will be laid out again (to take into account the new dimensions of the
/// child). This is a subtle and bug-prone feature to get right.
///
/// Most aspects of writing a [RenderBox] apply to writing a [RenderObject] as
/// well, and therefore the discussion at [RenderBox] is recommended background
/// reading. The main differences are around layout and hit testing, since those
/// are the aspects that [RenderBox] primarily specializes.
///
/// ### Layout
///
/// A layout protocol begins with a subclass of [Constraints]. See the
/// discussion at [Constraints] for more information on how to write a
/// [Constraints] subclass.
///
/// The [performLayout] method should take the [constraints], and apply them.
/// The output of the layout algorithm is fields set on the object that describe
/// the geometry of the object for the purposes of the parent's layout. For
/// example, with [RenderBox] the output is the [RenderBox.size] field. This
/// output should only be read by the parent if the parent specified
/// `parentUsesSize` as true when calling [layout] on the child.
///
/// Anytime anything changes on a render object that would affect the layout of
/// that object, it should call [markNeedsLayout].
///
/// ### Hit Testing
///
/// Hit testing is even more open-ended than layout. There is no method to
/// override, you are expected to provide one.
///
/// The general behavior of your hit-testing method should be similar to the
/// behavior described for [RenderBox]. The main difference is that the input
/// need not be an [Offset]. You are also allowed to use a different subclass of
/// [HitTestEntry] when adding entries to the [HitTestResult]. When the
/// [handleEvent] method is called, the same object that was added to the
/// [HitTestResult] will be passed in, so it can be used to track information
/// like the precise coordinate of the hit, in whatever coordinate system is
/// used by the new layout protocol.
///
/// ### Adapting from one protocol to another
///
/// In general, the root of a Flutter render object tree is a [RenderView]. This
/// object has a single child, which must be a [RenderBox]. Thus, if you want to
/// have a custom [RenderObject] subclass in the render tree, you have two
/// choices: you either need to replace the [RenderView] itself, or you need to
/// have a [RenderBox] that has your class as its child. (The latter is the much
/// more common case.)
///
/// This [RenderBox] subclass converts from the box protocol to the protocol of
/// your class.
///
/// In particular, this means that for hit testing it overrides
/// [RenderBox.hitTest], and calls whatever method you have in your class for
/// hit testing.
///
/// Similarly, it overrides [performLayout] to create a [Constraints] object
/// appropriate for your class and passes that to the child's [layout] method.
///
/// ### Layout interactions between render objects
///
/// In general, the layout of a render object should only depend on the output of
/// its child's layout, and then only if `parentUsesSize` is set to true in the
/// [layout] call. Furthermore, if it is set to true, the parent must call the
/// child's [layout] if the child is to be rendered, because otherwise the
/// parent will not be notified when the child changes its layout outputs.
///
/// It is possible to set up render object protocols that transfer additional
/// information. For example, in the [RenderBox] protocol you can query your
/// children's intrinsic dimensions and baseline geometry. However, if this is
/// done then it is imperative that the child call [markNeedsLayout] on the
/// parent any time that additional information changes, if the parent used it
/// in the last layout phase. For an example of how to implement this, see the
/// [RenderBox.markNeedsLayout] method. It overrides
/// [RenderObject.markNeedsLayout] so that if a parent has queried the intrinsic
/// or baseline information, it gets marked dirty whenever the child's geometry
/// changes. ¿
ÉÅó¿
µ ¿
µ¿
¡ //// Initializes internal fields for subclasses.  ¿Æ¿≥¿≥ ¿ƒ¿#É®¿¡¿¡És/// Data for use by the parent render object.
///
/// The parent data is used by the render object that lays out this object
/// (typically this object's parent in the render tree) to store information
/// relevant to itself and to any other nodes who happen to know exactly what
/// the data means. The parent data is opaque to the child.
///
///  * The parent data field must not be directly set, except by calling
///    [setupParentData] on the parent node.
///  * The parent data can be set before the child is added to the parent, by
///    calling [setupParentData] on the future parent node.
///  * The conventions for using the parent data depend on the layout protocol
///    used between the parent and child. For example, in box layout, the
///    parent data is completely opaque but in sector layout the child is
///    permitted to read some fields of the parent data. ¿¿¿ ¿!¿"/¿"=¿"=  ¿*&ÄÊ¿+ ¿+ Ä√/// The object responsible for creating this render object.
///
/// Used in debug messages.
///
/// See also:
///
///  * [DebugCreator], which the [widgets] library uses as values for this field. ¿0Å"¿0Ü¿0Ü ¿0û¿1ç"¿1í¿1í ¿1™¿2í'¿2ß¿2ß  ¿6Õ¿6”¿6”  ¿6Ó"¿6Û¿6Û ¿7¿PÇ¿Pë¿Pë  ¿[ ¿[œ¿[œ ¿[ﬁ¿[ÁÜ¿a·¿a·Ö∑/// The nearest relayout boundary enclosing this render object, if known.
///
/// When a render object is marked as needing layout, its parent may
/// as a result also need to be marked as needing layout.
/// For details, see [markNeedsLayout].
/// A render object where relayout does not require relayout of the parent
/// (because its size cannot change on relayout, or because
/// its parent does not use the child's size for its own layout)
/// is a "relayout boundary".
///
/// This property is set in [layout], and consulted by [markNeedsLayout] in
/// deciding whether to recursively mark the parent as also needing layout.
///
/// This property is initially null, and becomes null again if this
/// render object is removed from the tree (with [dropChild]);
/// it remains null until the first layout of this render object
/// after it was most recently added to the tree.
/// This property can also be null while an ancestor in the tree is
/// currently doing layout, until this render object itself does layout.
///
/// When not null, the relayout boundary is either this render object itself
/// or one of its ancestors, and all the render objects in the ancestry chain
/// up through that ancestor have the same [_relayoutBoundary].
/// Equivalently: when not null, the relayout boundary is either this render
/// object itself or the same as that of its parent.  (So [_relayoutBoundary]
/// is one of `null`, `this`, or `parent!._relayoutBoundary!`.) ¿bñ)¿bõ¿bõ ¿b∫¿dK¿dX¿dX  ¿fÇ¿g˜¿g˜Å“/// When true, a debug method ([debugAssertDoesMeetConstraints], for instance)
/// is currently executing asserts for verifying the consistent behavior of
/// intrinsic dimensions methods.
///
/// This is typically set by framework debug methods. It is read by tests to
/// selectively ignore custom layout callbacks. It should not be set outside of
/// intrinsic-checking debug methods, and should not be checked in release mode
/// (where it will always be false).¿h¿≤Ï!¿≤Ò¿≤Ò ¿≥¿≥Ê&¿≥˚¿≥˚  ¿ª¿ª¿ª  ¿»åN¿»Æ¿»Æ ¿»Ω¿»»¿»◊¿»…¿»ÿ¿»Ÿ¿ «(¿ Ã¿ Ã ¿ Í¿–Ô¿–˘¿–˘  ¿€Ã¿€—¿€— ¿€ﬂ¿ﬁ@(¿ﬁE¿ﬁE ¿ﬁc¿6à5¿6†¿6†  ¿:à!¿:ç¿:ç ¿:•¿:≠¿:º¿:º  ¿≠Ä˝¿ ¿ b/// Whether this has been disposed.
///
/// If asserts are disabled, this property is always null.   ¿SÉæ¿¿ÉÖ/// The depth of this render object in the render tree.
///
/// The depth of nodes in a tree monotonically increases as you traverse down
/// the tree: a node always has a [depth] greater than its ancestors.
/// There's no guarantee regarding depth between siblings.
///
/// The [depth] of a child can be more than one greater than the [depth] of
/// the parent, because the [depth] values are never decreased: all that
/// matters is that it's greater than the parent. Consider a tree with a root
/// node A, a child B, and a grandchild C. Initially, A will have [depth] 0,
/// B [depth] 1, and C [depth] 2. If C is moved to be a child of A,
/// sibling of B, then the numbers won't change. C's [depth] will still be 2.
///
/// The depth of a node is used to ensure that nodes are processed in
/// depth order.  The [depth] is automatically maintained by the [adoptChild]
/// and [dropChild] methods.   ¿!áÄ•¿"¿"z/// The parent of this render object in the render tree.
///
/// The [parent] of the root node in the render tree is null.   ¿"IÅ'¿#U¿#UÄ’/// The semantics parent of this render object in the semantics tree.
///
/// This is typically the same as [parent].
///
/// [OverlayPortal] overrides this field to change how it forms its
/// semantics sub-tree.  ¿#+¿#,¿/úÄ‚¿0P¿0PÄ¢/// Whether [performResize] for this render object is currently running.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// false.   ¿0®Ä‚¿1\¿1\Ä¢/// Whether [performLayout] for this render object is currently running.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// false.   ¿1¥Ä€¿2g¿2gÄë/// The render object that is actively computing layout.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// null.   ¿5¢Å(¿6ô¿6ôÄ·/// Whether the parent render object is permitted to use this render object's
/// size.
///
/// Determined by the `parentUsesSize` parameter to [layout].
///
/// Only valid when asserts are enabled. In release builds, throws.   ¿7ï8¿8ê¿8êÅc/// Whether tree mutations are currently permitted.
///
/// This is only useful during layout. One should also not mutate the tree at
/// other times (e.g. during paint or while assembling the semantic tree) but
/// this function does not currently enforce those conventions.
///
/// Only valid when asserts are enabled. This will throw in release builds.   ¿LQÉd¿O¿OÇí/// The [RenderObject] that's expected to call [layout] on this [RenderObject]
/// in its [performLayout] implementation.
///
/// This method is used to implement an assert that ensures the render subtree
/// actively performing layout can not get accidentally mutated. It's only
/// implemented in debug mode and always returns null in release mode.
///
/// The default implementation returns [parent] and overriding is rarely
/// needed. A [RenderObject] subclass that expects its
/// [RenderObject.performLayout] to be called from a different [RenderObject]
/// that's not its [parent] should override this property to return the actual
/// layout parent.  ¿N¸¿N˝¿OπÄ∆¿Po¿PoÄö/// The owner for this render object (null if unattached).
///
/// The entire render tree that this render object belongs to
/// will have the same owner.   ¿PúÄ˘¿Qz¿QzÄ /// Whether the render tree this render object belongs to is attached to a [PipelineOwner].
///
/// This becomes true during the call to [attach].
///
/// This becomes false during the call to [detach].   ¿YëÇ5¿[=¿[=Åí/// Whether this render object's layout information is dirty.
///
/// This is only set in debug mode. In general, render objects should not need
/// to condition their runtime behavior on whether they are dirty or not,
/// since they should only be marked dirty immediately prior to being laid
/// out and painted. In release builds, this throws.
///
/// It is intended to be used by tests and asserts.   ¿a˜Äú¿bR¿bRO/// Whether [invokeLayoutCallback] for this render object is currently running.   ¿bƒÅÉ¿cë¿cëÄß/// The layout constraints most recently supplied by the parent.
///
/// If layout has not yet happened, accessing this getter will
/// throw a [StateError] exception.  ¿ct¿cu¿°˝ÉZ¿•@¿•@É/// Whether the constraints are the only input to the sizing algorithm (in
/// particular, child nodes have no impact).
///
/// Returning false is always correct, but returning true can be more
/// efficient when computing the size of this render object because we don't
/// need to recompute the size if the constraints don't change.
///
/// Typically, subclasses will always return the same value. If the value can
/// change, then, when it does change, the subclass should make sure to call
/// [markNeedsLayoutForSizedByParentChange].
///
/// Subclasses that return true must not change the dimensions of this render
/// object in [performLayout]. Instead, that work should be done by
/// [performResize] or - for subclasses of [RenderBox] - in
/// [RenderBox.computeDryLayout].  ¿•*¿•+¿≤Äÿ¿≤Ω¿≤ΩÄö/// Whether [paint] for this render object is currently running.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// false.   ¿≥Ä—¿≥Ω¿≥ΩÄâ/// The render object that is actively painting.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// null.   ¿¥É£¿∑ô¿∑ôÉ\/// Whether this render object repaints separately from its parent.
///
/// Override this in subclasses to indicate that instances of your class ought
/// to repaint independently. For example, render objects that repaint
/// frequently might want to repaint themselves without requiring their parent
/// to repaint.
///
/// If this getter returns true, the [paintBounds] are applied to this object
/// and all descendants. The framework invokes [RenderObject.updateCompositedLayer]
/// to create an [OffsetLayer] and assigns it to the [layer] field.
/// Render objects that declare themselves as repaint boundaries must not replace
/// the layer created by the framework.
///
/// If the value of this getter changes, [markNeedsCompositingBitsUpdate] must
/// be called.
///
/// See [RepaintBoundary] for more information about how repaint boundaries function.   ¿π%Å„¿∫Ë¿∫ËÅú/// Whether this render object always needs compositing.
///
/// Override this in subclasses to indicate that your paint function always
/// creates at least one composited layer. For example, videos should return
/// true if they use hardware decoders.
///
/// You must call [markNeedsCompositingBitsUpdate] if the value of this getter
/// changes. (This is implied when [adoptChild] or [dropChild] are called.)  ¿∫“¿∫”¿¿wÜ◊¿∆¡¿∆¡Öˆ/// The compositing layer that this render object uses to repaint.
///
/// If this render object is not a repaint boundary, it is the responsibility
/// of the [paint] method to populate this field. If [needsCompositing] is
/// true, this field may be populated with the root-most layer used by the
/// render object implementation. When repainting, instead of creating a new
/// layer the render object may update the layer stored in this field for better
/// performance. It is also OK to leave this field as null and create a new
/// layer on every repaint, but without the performance benefit. If
/// [needsCompositing] is false, this field must be set to null either by
/// never populating this field, or by setting it to null when the value of
/// [needsCompositing] changes from true to false.
///
/// If a new layer is created and stored in some other field on the render
/// object, the render object must use a [LayerHandle] to store it. A layer
/// handle will prevent the layer from being disposed before the render
/// object is finished with it, and it will also make sure that the layer
/// gets appropriately disposed when the render object creates a replacement
/// or nulls it out. The render object must null out the [LayerHandle.layer]
/// in its [dispose] method.
///
/// If this render object is a repaint boundary, the framework automatically
/// creates an [OffsetLayer] and populates this field prior to calling the
/// [paint] method. The [paint] method must not replace the value of this
/// field.  ¿∆†¿∆°¿«RÅ6¿«c¿«c  ¿«i¿«z¿«y  ¿«R¿«S¿»ﬂÅ‰¿ 4¿ 4Å2/// In debug mode, the compositing layer that this render object uses to repaint.
///
/// This getter is intended for debugging purposes only. In release builds, it
/// always returns null. In debug builds, it returns the layer even if the layer
/// is dirty.
///
/// For production code, consider [layer].   ¿—0Å‡¿“~¿“~Å6/// Whether we or one of our descendants has a compositing layer.
///
/// If this node needs compositing as indicated by this bit, then all ancestor
/// nodes will also need compositing.
///
/// Only legal to call after [PipelineOwner.flushLayout] and
/// [PipelineOwner.flushCompositingBits] have been called.   ¿ÿ'É°¿€A¿€AÇÙ/// Whether this render object's paint information is dirty.
///
/// This is only set in debug mode. In general, render objects should not need
/// to condition their runtime behavior on whether they are dirty or not,
/// since they should only be marked dirty immediately prior to being laid
/// out and painted. (In release builds, this throws.)
///
/// It is intended to be used by tests and asserts.
///
/// It is possible (and indeed, quite common) for [debugNeedsPaint] to be
/// false and [debugNeedsLayout] to be true. The render object will still be
/// repainted in the next frame when this is the case, because the
/// [markNeedsPaint] method is implicitly called by the framework after a
/// render object is laid out, prior to the paint phase.   ¿€ËÇT¿›ï¿›ïÅì/// Whether this render object's layer information is dirty.
///
/// This is only set in debug mode. In general, render objects should not need
/// to condition their runtime behavior on whether they are dirty or not,
/// since they should only be marked dirty immediately prior to being laid
/// out and painted. (In release builds, this throws.)
///
/// It is intended to be used by tests and asserts.   ¿ÌÅ¿	˚¿	˚Ä˙/// An estimate of the bounds within which this render object will paint.
/// Useful for debugging flags such as [debugPaintLayerBordersEnabled].
///
/// These are also the bounds used by [showOnScreen] to make a [RenderObject]
/// visible on screen.   ¿6¬Ç9¿6›¿6›    ¿8ˇÄÇ¿9r¿9re/// The bounding box, in the local coordinate system, of this
/// object, for accessibility purposes.   ¿9ÖÄˇ¿:¿:|/// Whether the semantics of this render object is dirty and await the update.
///
/// Always returns false in release mode.   ¿:ÀÅ∫¿<(¿<(Å9/// The semantics of this render object.
///
/// Exposed only for testing and debugging. To learn about the semantics of
/// render objects in production, obtain a [SemanticsHandle] from
/// [PipelineOwner.ensureSemantics].
///
/// Only valid in debug and profile mode. In release builds, always returns
/// null.   ?¿Éã¿Ÿ¿ŸÇó/// Cause the entire subtree rooted at the given [RenderObject] to be marked
/// dirty for layout, paint, etc, so that the effects of a hot reload can be
/// seen, or so that the effect of changing a global debug flag (such as
/// [debugPaintSizeEnabled]) can be applied.
///
/// This is called by the [RendererBinding] in response to the
/// `ext.flutter.reassemble` hook, which is used by development tools when the
/// application code has changed, to cause the widget tree to pick up any
/// changed implementations.
///
/// This is expensive and should not be called except during development.
///
/// See also:
///
///  * [BindingBase.reassembleApplication]   ¿ŒÖD¿±¿±Ç∞/// Release any resources held by this render object.
///
/// The object that creates a RenderObject is in charge of disposing it.
/// If this render object has created any children directly, it must dispose
/// of those children in this method as well. It must not dispose of any
/// children that were created by some other object, such as
/// a [RenderObjectElement]. Those children will be disposed when that
/// element unmounts, which may be delayed if the element is moved to another
/// part of the tree.
///
/// Implementations of this method must end with a call to the inherited
/// method, as in `super.dispose()`.
///
/// The object is no longer usable after calling dispose.  ¿õ¿ú¿–Å¿ù¿ùÄø/// Override to setup parent data correctly for your children.
///
/// You can call this function to set up the parent data for child before the
/// child is added to the parent's child list. ¿≠¿≈¿ƒ   ¿'Åi¿‡¿‡Äû/// Adjust the [depth] of the given [child] to be greater than this node's own
/// [depth].
///
/// Only call this method from overrides of [redepthChildren]. ¿Ì¿˚¿˙  ¿Œ¿œ¿ îÄÔ¿!o¿!oÄ¿/// Adjust the [depth] of this node's children, if any.
///
/// Override this method in subclasses with child nodes to call [redepthChild]
/// for each child. Do not call this method directly.  ¿!]¿!^¿#tÉ¿$á¿$áÄÁ/// Called by subclasses when they decide a render object is a child.
///
/// Only for use by subclasses when changing their child lists. Calling this
/// in other cases will lead to an inconsistent tree and probably cause crashes. ¿$í¿$†¿$ü  ¿$d¿$e¿$u¿$v¿&ïÇΩ¿'≤¿'≤ÄÒ/// Called by subclasses when they decide a render object is no longer a child.
///
/// Only for use by subclasses when changing their child lists. Calling this
/// in other cases will lead to an inconsistent tree and probably cause crashes. ¿'º¿' ¿'…  ¿'è¿'ê¿'†¿'°¿)VÄÃ¿)ı¿)ıÄì/// Calls visitor for each immediate child of this render object.
///
/// Override in subclasses with children and call the visitor for each child. ¿*¿*¿*   ¿+Ñá¿+¿+  ¿+'¿+/¿+.  ¿+6¿+>¿+=  ¿+H¿+T¿+S   ¿2æÇ‡¿4¿4ÄÚ/// Set [debugActiveLayout] to null when [inner] callback is called.
/// This is useful when you have to temporarily clear that variable to
/// disable some false-positive checks, such as when computing toStringDeep
/// or using custom trees.¿4=¿4=¿4=¿4@¿4N¿4M  ¿3π¿3∫¿3¿¿3‘¿3¡¿3ÿ¿3Ÿ¿3ﬂ¿3Ú¿3‡¿3ˆ¿3˜¿3˝¿4¿3˛¿QôÖÙ¿S6¿S6Åv/// Mark this render object as attached to the given owner.
///
/// Typically called only from the [parent]'s [attach] method, and by the
/// [owner] to mark the root of a tree as attached.
///
/// Subclasses with children should override this method to
/// [attach] all their children to the same [owner]
/// after calling the inherited method, as in `super.attach(owner)`. ¿S=¿SL¿SK  ¿S ¿S!¿WëÅ¸¿Y¿YÅ\/// Mark this render object as detached from its [PipelineOwner].
///
/// Typically called only from the [parent]'s [detach], and by the [owner] to
/// mark the root of a tree as detached.
///
/// Subclasses with children should override this method to
/// [detach] all their children after calling the inherited method,
/// as in `super.detach()`.  ¿X˛¿Xˇ¿diÅõ¿e„¿e„Å]/// Verify that the object's constraints are being met. Override this function
/// in a subclass to verify that your state matches the constraints object.
/// This function is only called when asserts are enabled (i.e. in debug mode)
/// and only when needsLayout is false. If the constraints are not met, it
/// should assert or throw an exception.  ¿e—¿e“¿hÇ¿h ¿h     ¿j6ã√¿rM¿rMá≈/// Mark this render object's layout information as dirty, and either register
/// this object with its [PipelineOwner], or defer to the parent, depending on
/// whether this object is a relayout boundary or not respectively.
///
/// ## Background
///
/// Rather than eagerly updating layout information in response to writes into
/// a render object, we instead mark the layout information as dirty, which
/// schedules a visual update. As part of the visual update, the rendering
/// pipeline updates the render object's layout information.
///
/// This mechanism batches the layout work so that multiple sequential writes
/// are coalesced, removing redundant computation.
///
/// If a render object's parent indicates that it uses the size of one of its
/// render object children when computing its layout information, this
/// function, when called for the child, will also mark the parent as needing
/// layout. In that case, since both the parent and the child need to have
/// their layout recomputed, the pipeline owner is only notified about the
/// parent; when the parent is laid out, it will call the child's [layout]
/// method and thus the child will be laid out as well.
///
/// Once [markNeedsLayout] has been called on a render object,
/// [debugNeedsLayout] returns true for that render object until just after
/// the pipeline owner has called [layout] on the render object.
///
/// ## Special cases
///
/// Some subclasses of [RenderObject], notably [RenderBox], have other
/// situations in which the parent needs to be notified if the child is
/// dirtied (e.g., if the child's intrinsic dimensions or baseline changes).
/// Such subclasses override markNeedsLayout and either call
/// `super.markNeedsLayout()`, in the normal case, or call
/// [markParentNeedsLayout], in the case where the parent needs to be laid out
/// as well as the child.
///
/// If [sizedByParent] has changed, calls
/// [markNeedsLayoutForSizedByParentChange] instead of [markNeedsLayout].   ¿u˝É¿wø¿wøÅù/// Mark this render object's layout information as dirty, and then defer to
/// the parent.
///
/// This function should only be called from [markNeedsLayout] or
/// [markNeedsLayoutForSizedByParentChange] implementations of subclasses that
/// introduce more reasons for deferring the handling of dirty layout to the
/// parent. See [markNeedsLayout] for details.
///
/// Only call this if [parent] is not null.  ¿w≠¿wÆ¿yÅ∑¿zp¿zpÅB/// Mark this render object's layout information as dirty (like
/// [markNeedsLayout]), and additionally also handle any necessary work to
/// handle the case where [sizedByParent] has changed value.
///
/// This should be called whenever [sizedByParent] might have changed.
///
/// Only call this if [parent] is not null.   ¿z’Åï¿{•¿{•q/// Set [_relayoutBoundary] to null throughout this render object's subtree,
/// stopping at relayout boundaries. ¿{¡¿{œ¿{Œ   ¿|ºÅ}¿|»¿|»  ¿|Í¿|¯¿|˜   ¿~=Å€¿~Ì¿~ÌÄ§/// Set [_relayoutBoundary] to [value] throughout this render object's
/// subtree, including this render object but stopping at relayout boundaries
/// thereafter. ¿¿¿   ¿ÄÇr¿Å0¿Å0Å/// Bootstrap the rendering pipeline by scheduling the very first layout.
///
/// Requires this render object to be attached and that this render object
/// is the root of the render tree.
///
/// See [RenderView] for an example of how this function is used.   ¿ÇíÉ’¿Çƒ¿Çƒ   ¿Çí¿Çì¿Çô¿Çª¿Çö¿Ükôπ¿å¿åÖ7/// Compute the layout for this render object.
///
/// This method is the main entry point for parents to ask their children to
/// update their layout information. The parent passes a constraints object,
/// which informs the child as to which layouts are permissible. The child is
/// required to obey the given constraints.
///
/// If the parent reads information computed during the child's layout, the
/// parent must pass true for `parentUsesSize`. In that case, the parent will
/// be marked as needing layout whenever the child is marked as needing layout
/// because the parent's layout information depends on the child's layout
/// information. If the parent uses the default value (false) for
/// `parentUsesSize`, the child can change its layout information (subject to
/// the given constraints) without informing the parent.
///
/// Subclasses should not override [layout] directly. Instead, they should
/// override [performResize] and/or [performLayout]. The [layout] method
/// delegates the actual work to [performResize] and [performLayout].
///
/// The parent's [performLayout] method should call the [layout] of all its
/// children unconditionally. It is the [layout] method's responsibility (as
/// implemented here) to return early if the child does not need to do any
/// work to update its layout information. ¿å
¿å¿å  ¿å$¿å*¿å)  ¿ã—¿ã“¿ãÿ¿ã˙¿ãŸ¿å:¿†(Å—¿°Ê¿°ÊÅü/// If a subclass has a "size" (the state controlled by `parentUsesSize`,
/// whatever it is in the subclass, e.g. the actual `size` property of
/// [RenderBox]), and the subclass verifies that in debug mode this "size"
/// property isn't used when [debugCanParentUseSize] isn't set, then that
/// subclass should override [debugResetSize] to reapply the current values of
/// [debugCanParentUseSize] to that state.  ¿°‘¿°’¿•[ÇÛ¿®>¿®>Ç¥/// {@template flutter.rendering.RenderObject.performResize}
/// Updates the render objects size using only the constraints.
///
/// Do not call this function directly: call [layout] instead. This function
/// is called by [layout] when there is actually work to be done by this
/// render object during layout. The layout constraints provided by your
/// parent are available via the [constraints] getter.
///
/// This function is called only if [sizedByParent] is true.
/// {@endtemplate}
///
/// Subclasses that set [sizedByParent] to true should override this method to
/// compute their size. Subclasses of [RenderBox] should consider overriding
/// [RenderBox.computeDryLayout] instead.  ¿®,¿®-¿®RÑï¿¨◊¿¨◊ÑL/// Do the work of computing the layout for this render object.
///
/// Do not call this function directly: call [layout] instead. This function
/// is called by [layout] when there is actually work to be done by this
/// render object during layout. The layout constraints provided by your
/// parent are available via the [constraints] getter.
///
/// If [sizedByParent] is true, then this function should not actually change
/// the dimensions of this render object. Instead, that work should be done by
/// [performResize]. If [sizedByParent] is false, then this function should
/// both change the dimensions of this render object and instruct its children
/// to layout.
///
/// In implementing this function, you must call [layout] on each of your
/// children, passing true for parentUsesSize if your layout information is
/// dependent on your child's layout information. Passing true for
/// parentUsesSize ensures that this render object will undergo layout if the
/// child undergoes layout. Otherwise, the child can change its layout
/// information without informing this render object.  ¿¨≈¿¨∆¿¨ÎÖ¿∞k¿∞kÉO/// Allows mutations to be made to this object's child list (and any
/// descendants) as well as to any other dirty nodes in the render tree owned
/// by the same [PipelineOwner] as this object. The `callback` argument is
/// invoked synchronously, and the mutations are allowed only during that
/// callback's execution.
///
/// This exists to allow child lists to be built on-demand during layout (e.g.
/// based on the object's size), and to enable nodes to be moved around the
/// tree as this happens (e.g. to handle [GlobalKey] reparenting), while still
/// ensuring that any particular node is only laid out once per frame.
///
/// Calling this function disables a number of assertions that are intended to
/// catch likely bugs. As such, using this function is generally discouraged.
///
/// This function can only be called during layout.¿∞Ä¿∞Ä¿∞Ä¿∞ó¿∞™¿∞©  ¿∞Y¿∞Z¿∑∏Åi¿∏∂¿∏∂ÄÓ/// Called, in debug mode, if [isRepaintBoundary] is true, when either the
/// this render object or its parent attempt to paint.
///
/// This can be used to record metrics about whether the node should actually
/// be a repaint boundary. ¿∏ﬁ¿∏‰¿∏„  ¿∏˛¿π¿π  ¿∏Ù¿π¿ª.ÖE¿øÁ¿øÁÉ·/// Update the composited layer owned by this render object.
///
/// This method is called by the framework when [isRepaintBoundary] is true.
///
/// If [oldLayer] is `null`, this method must return a new [OffsetLayer]
/// (or subtype thereof). If [oldLayer] is not `null`, then this method must
/// reuse the layer instance that is provided - it is an error to create a new
/// layer in this instance. The layer will be disposed by the framework when
/// either the render object is disposed or if it is no longer a repaint
/// boundary.
///
/// The [OffsetLayer.offset] property will be managed by the framework and
/// must not be updated by this method.
///
/// If a property of the composited layer needs to be updated, the render object
/// must call [markNeedsCompositedLayerUpdate] which will schedule this method
/// to be called without repainting children. If this widget was marked as
/// needing to paint and needing a composited layer update, this method is only
/// called once. ¿ø˛(¿¿¿¿   ¿ÀÖ”¿Œm¿ŒmÉ//// Mark the compositing state for this render object as dirty.
///
/// This is called to indicate that the value for [needsCompositing] needs to
/// be recomputed during the next [PipelineOwner.flushCompositingBits] engine
/// phase.
///
/// When the subtree is mutated, we need to recompute our
/// [needsCompositing] bit, and some of our ancestors need to do the
/// same (in case ours changed in a way that will change theirs). To
/// this end, [adoptChild] and [dropChild] call this method, and, as
/// necessary, this method calls the parent's, etc, walking up the
/// tree to mark all the nodes that need updating.
///
/// This method does not schedule a rendering frame, because since
/// it cannot be the case that _only_ the compositing bits changed,
/// something else will have scheduled a frame for us.   ¿”Ö¿”¿”    ¿ﬁmâæ¿‚6¿‚6Éõ/// Mark this render object as having changed its visual appearance.
///
/// Rather than eagerly updating this render object's display list
/// in response to writes, we instead mark the render object as needing to
/// paint, which schedules a visual update. As part of the visual update, the
/// rendering pipeline will give this render object an opportunity to update
/// its display list.
///
/// This mechanism batches the painting work so that multiple sequential
/// writes are coalesced, removing redundant computation.
///
/// Once [markNeedsPaint] has been called on a render object,
/// [debugNeedsPaint] returns true for that render object until just after
/// the pipeline owner has called [paint] on the render object.
///
/// See also:
///
///  * [RepaintBoundary], to scope a subtree of render objects to their own
///    layer, thus limiting the number of nodes that [markNeedsPaint] must mark
///    dirty.   ¿Ë/Ü-¿Îë¿ÎëÉ:/// Mark this render object as having changed a property on its composited
/// layer.
///
/// Render objects that have a composited layer have [isRepaintBoundary] equal
/// to true may update the properties of that composited layer without repainting
/// their children. If this render object is a repaint boundary but does
/// not yet have a composited layer created for it, this method will instead
/// mark the nearest repaint boundary parent as needing to be painted.
///
/// If this method is called on a render object that is not a repaint boundary
/// or is a repaint boundary but hasn't been composited yet, it is equivalent
/// to calling [markNeedsPaint].
///
/// See also:
///
///  * [RenderOpacity], which uses this method when its opacity is updated to
///    update the layer opacity without repainting children.   ¿Ô—Çﬁ¿Ô÷¿Ô÷    ¿Ú≥Çx¿Û…¿Û…Å/// Bootstrap the rendering pipeline by scheduling the very first paint.
///
/// Requires that this render object is attached, is the root of the render
/// tree, and has a composited layer.
///
/// See [RenderView] for an example of how this function is used. ¿Ûﬁ¿ÛÓ¿ÛÌ   ¿ı/ÇÅ¿ˆ¿ˆÄÿ/// Replace the layer. This is only valid for the root of a render
/// object subtree (whatever object [scheduleInitialPaint] was
/// called on).
///
/// This might be called if, e.g., the device pixel ratio changed. ¿ˆ(¿ˆ5¿ˆ4   ¿˜¥ë5¿˜π¿˜π  ¿˜À¿˜‹¿˜€  ¿˜‰¿˜Ï¿˜Î   ¿
u¿
K¿
K8/// Override this method to paint debugging information. ¿
V¿
g¿
f  ¿
o¿
w¿
v   ¿
ÑÉ˛¿R¿RÉ¶/// Paint this render object into the given context at the given offset.
///
/// Subclasses should override this method to provide a visual appearance
/// for themselves. The render object's local coordinate system is
/// axis-aligned with the coordinate system of the context's canvas and the
/// render object's local origin (i.e, x=0 and y=0) is placed at the given
/// offset in the context's canvas.
///
/// Do not call this function directly. If you wish to paint yourself, call
/// [markNeedsPaint] instead to schedule a call to this function. If you wish
/// to paint one of your children, call [PaintingContext.paintChild] on the
/// given `context`.
///
/// When painting one of your children (via a paint child function on the
/// given context), the current canvas held by the context might change
/// because draw operations before and after painting children might need to
/// be recorded on separate compositing layers. ¿X¿i¿h  ¿q¿y¿x   ¿ÜÉ1¿K¿KÇß/// Applies the transform that would be applied when painting the given child
/// to the given matrix.
///
/// Used by coordinate conversion functions to translate coordinates local to
/// one render object into coordinates local to another render object.
///
/// Some RenderObjects will provide a zeroed out matrix in this method,
/// indicating that the child should not paint anything or respond to hit
/// tests currently. A parent may supply a non-zero matrix even though it
/// does not paint its child currently, for example if the parent is a
/// [RenderOffstage] with `offstage` set to true. In both of these cases,
/// the parent must return `false` from [paintsChild]. ¿_¿w¿v  ¿}¿Ü¿Ö   ¿ªÉ]¿∂¿∂Ç€/// Whether the given child would be painted if [paint] were called.
///
/// Some RenderObjects skip painting their children if they are configured to
/// not produce any visible effects. For example, a [RenderOffstage] with
/// its `offstage` property set to true, or a [RenderOpacity] with its opacity
/// value set to zero.
///
/// In these cases, the parent may still supply a non-zero matrix in
/// [applyPaintTransform] to inform callers about where it would paint the
/// child if the child were painted at all. Alternatively, the parent may
/// supply a zeroed out matrix if it would not otherwise be able to determine
/// a valid matrix for the child and thus cannot meaningfully determine where
/// the child would paint. ¿¬¿⁄¿Ÿ   ¿ç™¿˘¿˘Ñ¢/// {@template flutter.rendering.RenderObject.getTransformTo}
/// Applies the paint transform from this [RenderObject] to the `target`
/// [RenderObject].
///
/// Returns a matrix that maps the local paint coordinate system to the
/// coordinate system of `target`, or a [Matrix4.zero] if the paint transform
/// can not be computed.
///
/// This method throws an exception when the `target` is not in the same render
/// tree as this [RenderObject], as the behavior is undefined.
///
/// This method ignores [RenderObject.paintsChild]. This means it will still
/// try to compute the paint transform even if this [RenderObject] or
/// `target` is currently not visible.
///
/// If `target` is null, this method returns a matrix that maps from the
/// local paint coordinate system to the coordinate system of the
/// [PipelineOwner.rootNode].
/// {@endtemplate}
///
/// For the render tree owned by the [RendererBinding] (i.e. for the main
/// render tree displayed on the device) this means that this method maps to
/// the global coordinate system in logical pixels. To get physical pixels,
/// use [applyPaintTransform] from the [RenderView] to further transform the
/// coordinate. ¿¿¿   ¿" ÇÔ¿%v¿%vÇã/// Returns a rect in this object's coordinate system that describes
/// the approximate bounding box of the clip rect that would be
/// applied to the given child during the paint phase, if any.
///
/// Returns null if the child would not be clipped.
///
/// This is used in the semantics phase to avoid including children
/// that are not physically visible.
///
/// RenderObjects that respect a [Clip] behavior when painting _must_ respect
/// that same behavior when describing this value. For example, if passing
/// [Clip.none] to [PaintingContext.pushClipRect] as the `clipBehavior`, then
/// the implementation of this method must return null. ¿%ì¿%´¿%™   ¿%ΩÖÊ¿+f¿+fÖp/// Returns a rect in this object's coordinate system that describes
/// which [SemanticsNode]s produced by the `child` should be included in the
/// semantics tree. [SemanticsNode]s from the `child` that are positioned
/// outside of this rect will be dropped. Child [SemanticsNode]s that are
/// positioned inside this rect, but outside of [describeApproximatePaintClip]
/// will be included in the tree marked as hidden. Child [SemanticsNode]s
/// that are inside of both rect will be included in the tree as regular
/// nodes.
///
/// This method only returns a non-null value if the semantics clip rect
/// is different from the rect returned by [describeApproximatePaintClip].
/// If the semantics clip rect and the paint clip rect are the same, this
/// method returns null.
///
/// A viewport would typically implement this method to include semantic nodes
/// in the semantics tree that are currently hidden just before the leading
/// or just after the trailing edge. These nodes have to be included in the
/// semantics tree to implement implicit accessibility scrolling on iOS where
/// the viewport scrolls implicitly when moving the accessibility focus from
/// the last visible node in the viewport to the first hidden one.
///
/// See also:
///
/// * [RenderViewportBase.cacheExtent], used by viewports to extend their
///   semantics clip beyond their approximate paint clip. ¿+|¿+ï¿+î   ¿+∑ÇÑ¿,€¿,€Å/// Bootstrap the semantics reporting mechanism by marking this node
/// as needing a semantics update.
///
/// Requires that this render object is attached, and is the root of
/// the render tree.
///
/// See [RendererBinding] for an example of how this function is used.   ¿.?Ö_¿3:¿3:Ñ§/// Report the semantics of this node, for example for accessibility purposes.
///
/// This method should be overridden by subclasses that have interesting
/// semantic information.
///
/// The given [SemanticsConfiguration] object is mutable and should be
/// annotated in a manner that describes the current state. No reference
/// should be kept to that object; mutating it outside of the context of the
/// [describeSemanticsConfiguration] call (for example as a result of
/// asynchronous computation) will at best have no useful effect and at worse
/// will cause crashes as the data will be in an inconsistent state.
///
/// {@tool snippet}
///
/// The following snippet will describe the node as a button that responds to
/// tap actions.
///
/// ```dart
/// abstract class SemanticButtonRenderObject extends RenderObject {
///   @override
///   void describeSemanticsConfiguration(SemanticsConfiguration config) {
///     super.describeSemanticsConfiguration(config);
///     config
///       ..onTap = _handleTap
///       ..label = 'I am a button'
///       ..isButton = true;
///   }
///
///   void _handleTap() {
///     // Do something.
///   }
/// }
/// ```
/// {@end-tool} ¿3Y¿3q¿3p  ¿3(¿3)¿3¢Ç¥¿5¿5Åc/// Sends a [SemanticsEvent] associated with this render object's [SemanticsNode].
///
/// If this render object has no semantics information, the first parent
/// render object with a non-null semantic node is used.
///
/// If semantics are disabled, no events are dispatched.
///
/// See [SemanticsNode.sendEvent] for a full description of the behavior. ¿5.¿5>¿5=   ¿<âÅÌ¿=ÿ¿=ÿÅ,/// Removes all semantics from this render object and its descendants.
///
/// Should only be called on objects whose [parent] is not a [RenderObject].
///
/// Override this method if you instantiate new [SemanticsNode]s in an
/// overridden [assembleSemanticsNode] method, to dispose of those nodes.  ¿=¬¿=√¿>zç£¿?ë¿?ëÅ/// Mark this node as needing an update to its semantics description.
///
/// This must be called whenever the semantics configuration of this
/// [RenderObject] as annotated by [describeSemanticsConfiguration] changes in
/// any way to update the semantics tree.   ¿L!Üõ¿Lc¿Lc:/// Updates the semantic information of the render object.   ¿R¿óÈ¿S¿SI/// Returns the semantics that this node would like to add to its parent. ¿S<¿SK¿SJ  ¿S_¿Sn¿Sm   ¿j≠É‚¿j≤¿j≤  ¿j“.¿j˜¿jˆ  ¿k¿k¿k  ¿k¿nìÅ ¿p¿pÅ\/// Called when collecting the semantics of this node.
///
/// The implementation has to return the children in paint order skipping all
/// children that are not semantically relevant (e.g. because they are
/// invisible).
///
/// The default implementation mirrors the behavior of
/// [visitChildren] (which is supposed to walk all the children). ¿p¿p4¿p3   ¿paÑB¿s&¿s&Ç£/// Assemble the [SemanticsNode] for this [RenderObject].
///
/// If [describeSemanticsConfiguration] sets
/// [SemanticsConfiguration.isSemanticBoundary] to true, this method is called
/// with the `node` created for this [RenderObject], the `config` to be
/// applied to that node and the `children` [SemanticsNode]s that descendants
/// of this RenderObject have generated.
///
/// By default, the method will annotate `node` with `config` and add the
/// `children` to it.
///
/// Subclasses can override this method to add additional [SemanticsNode]s
/// to the tree. If new [SemanticsNode]s are instantiated in this method
/// they must be disposed in [clearSemantics]. ¿sA¿sP¿sO  ¿sY¿sq¿sp  ¿s| ¿sï¿sî   ¿t¥Ä¢¿u¿uN/// Override this method to handle pointer events that hit this render object. ¿u"¿u0¿u/  ¿u6¿uN¿uM  ¿u¿u¿x¶Ér¿x‰¿x‰(/// Returns a human understandable name.  ¿x—¿x“¿|b¿|/¿|/  ¿|9/¿|J¿|I  ¿|¿|¿|T¿|c¿|d¿|ÇÇN¿}A¿}AÄ•/// Returns a description of the tree rooted at this node.
/// If the prefix argument is provided, then every line in the output
/// will be prefixed by that string. ¿}T¿}\¿}[  ¿}s¿}|¿}{  ¿}ñ0¿}ß¿}¶  ¿}Ã¿}—¿}–  ¿}.¿}/¿}k¿}é¿}±¿}¿¿}¡¿}‹¿~‘ÅÍ¿Á¿ÁÄı/// Returns a one-line detailed description of the render object.
/// This description is often somewhat long.
///
/// This includes the same information for this RenderObject as given by
/// [toStringDeep], but does not recurse to any children. ¿¯¿Ä ¿ˇ  ¿Ä0¿Ä¿Ä  ¿‘¿’¿Ä¿Ä)¿Ä8¿Ä9¿Ä¬Ü(¿Ä‡¿Ä‡  ¿ÄÙ&¿Å¿Å  ¿Ä¬¿Ä√¿Äœ¿Ä–¿ÜÓQ¿á¿á   ¿ÜÓ¿ÜÔ¿áCÖ
¿ã¿ãÉî/// Attempt to make (a portion of) this or a descendant [RenderObject] visible
/// on screen.
///
/// If `descendant` is provided, that [RenderObject] is made visible. If
/// `descendant` is omitted, this [RenderObject] is made visible.
///
/// The optional `rect` parameter describes which area of that [RenderObject]
/// should be shown on screen. If `rect` is null, the entire
/// [RenderObject] (as defined by its [paintBounds]) will be revealed. The
/// `rect` parameter is interpreted relative to the coordinate system of
/// `descendant` if that argument is provided and relative to this
/// [RenderObject] otherwise.
///
/// The `duration` parameter can be set to a non-zero value to bring the
/// target object on screen in an animation defined by `curve`.
///
/// See also:
///
/// * [RenderViewportBase.showInViewport], which [RenderViewportBase] and
///   [SingleChildScrollView] delegate this method to. ¿ã¿ã'¿ã&  ¿ã6
¿ã=¿ã<  ¿ãF!¿ãP¿ãO  ¿ãm¿ãt¿ãs  ¿ãZ¿ãb¿ãc¿ã{¿ãÅ¿ãÇ¿åQÇì¿é>¿é>Å /// Adds a debug representation of a [RenderObject] optimized for including in
/// error messages.
///
/// The default [style] of [DiagnosticsTreeStyle.shallow] ensures that all of
/// the properties of the render object are included in the error output but
/// none of the children of the object are.
///
/// You should always include a RenderObject in an error message if it is the
/// [RenderObject] causing the failure or contract violation of the error. ¿éT¿é\¿é[  ¿ég9¿é}¿é|  ¿éÑ¿éò¿éô ¿’≠Ñπ¿◊J¿◊JÅç/// Describes the semantics information a [RenderObject] wants to add to its
/// parent.
///
/// It has two notable subclasses:
///  * [_InterestingSemanticsFragment] describing actual semantic information to
///    be added to the parent.
///  * [_ContainerSemanticsFragment]: a container class to transport the semantic
///    information of multiple [_InterestingSemanticsFragment] to a parent. ¿◊aE¿◊a ¿◊a¿◊s  ¿◊u.¿◊Ñ¿◊É   ¿ÿ-Åk¿Ÿx¿ŸxÅ1/// Whether this fragment wants to make the semantics information of
/// previously painted [RenderObject]s unreachable for accessibility purposes.
///
/// See also:
///
///  * [SemanticsConfiguration.isBlockingSemanticsOfPreviouslyPaintedNodes]
///    describes what semantics are dropped in more detail. ¿ŸùÄ«¿⁄S¿⁄SÄâ/// Returns [_InterestingSemanticsFragment] describing the actual semantic
/// information that this fragment wants to add to the parent.   ¿◊™¿◊Ô¿◊Ô=/// Incorporate the fragments of children into this fragment. ¿◊ˆ1¿ÿ¿ÿ    ¿⁄hÇÂ¿€`¿€`ÄÒ/// A container used when a [RenderObject] wants to add multiple independent
/// [_InterestingSemanticsFragment] to its parent.
///
/// The [_InterestingSemanticsFragment] to be added to the parent can be
/// obtained via [mergeUpFragments]. ¿€õ~¿€õ ¿€õ¿€∂  ¿€Ω/¿€Õ¿€Ã  ¿€Ú ¿‹¿‹    ¿‹B¿‹M¿‹M  ¿‹‡j¿›¿› ¿‹‡¿‹·¿›H¿›I¿›)¿›G¿›* ¿‹dx¿‹u¿‹u  ¿‹|1¿‹•¿‹§  ¿‹d¿‹e ¿›Oçî¿ﬁ»¿ﬁ»Åi/// A [_SemanticsFragment] that describes which concrete semantic information
/// a [RenderObject] wants to add to the [SemanticsNode] of its parent.
///
/// Specifically, it describes which children (as returned by [compileChildren])
/// should be added to the parent's [SemanticsNode] and which [config] should be
/// merged into the parent's [SemanticsNode]. ¿ﬂÄ§¿ﬂ ¿ﬂ¿ﬂ"  ¿ﬂ)¿ﬂ@¿ﬂ?  ¿ﬂJ/¿ﬂZ¿ﬂY  ¿ﬂë¿ﬂÇ¿ﬂ°¿ﬂß¿ﬂì¿ﬂ†¿ﬂî¿ﬂ¢¿‡G'¿‡`¿‡`  ¿Á›#¿Á¿Á  ¿ﬂ≠Äñ¿‡%¿‡%b/// The [RenderObject] that owns this fragment (and any new [SemanticsNode]
/// introduced by it).   ¿„+Äµ¿„Ÿ¿„ŸÄç/// The [SemanticsConfiguration] the child wants to merge into the parent's
/// [SemanticsNode] or null if it doesn't want to merge anything.   ¿Ê“Äï¿ÁB¿ÁBb/// Whether this fragment wants to add any semantic information to the parent
/// [SemanticsNode].   ¿Ákn¿Áü¿Áü   ¿Ák¿Ál¿‡sÇ¥¿‚;¿‚;ÅÆ/// The children to be added to the parent.
///
/// See also:
///
///  * [SemanticsNode.parentSemanticsClipRect] for the source and definition
///    of the `parentSemanticsClipRect` argument.
///  * [SemanticsNode.parentPaintClipRect] for the source and definition
///    of the `parentPaintClipRect` argument.
///  * [SemanticsNode.elevationAdjustment] for the source and definition
///    of the `elevationAdjustment` argument. ¿‚Q&¿‚a¿‚`  ¿‚}"¿‚ç¿‚å  ¿‚•#¿‚∂¿‚µ  ¿‚Œ#¿‚Ï¿‚Î  ¿‚˜)¿„¿„   ¿„‰Å¿‰Ÿ¿‰ŸÄÂ/// Disallows this fragment to merge any configuration into its parent's
/// [SemanticsNode].
///
/// After calling this, the fragment will only produce children to be added
/// to the parent and it will return null for [config].   ¿‰ÓÅ‡¿Êî¿ÊîÅÑ/// Consume the fragments of children.
///
/// For each provided fragment it will add that fragment's children to
/// this fragment's children (as returned by [compileChildren]) and merge that
/// fragment's [config] into this fragment's [config].
///
/// If a provided fragment should not merge anything into [config] call
/// [markAsExplicit] before passing the fragment to this method. ¿Êõ1¿Êƒ¿Ê√  ¿ÊÉ¿ÊÑ¿ËÅ¿Ër¿Ëra/// Tag all children produced by [compileChildren] with `tags`.
///
/// `tags` must not be empty. ¿Ëz¿Ëí¿Ëë   ¿ÈÅ’¿Íó¿ÍóÅu/// Adds the geometric information of `ancestor` to this object.
///
/// Those information are required to properly compute the value for
/// [SemanticsNode.transform], [SemanticsNode.parentSemanticsClipRect], and
/// [SemanticsNode.rect].
///
/// Ancestors have to be added in order from [owner] up until the next
/// [RenderObject] that owns a [SemanticsNode] is reached. ¿Í£¿Í±¿Í∞    ¿ÍÂä/¿Î∏¿Î∏ÄÃ/// An [_InterestingSemanticsFragment] that produces the root [SemanticsNode] of
/// the semantics tree.
///
/// The root node is available as the only element in the Iterable returned by
/// [_children]. ¿Î˘`¿Î˘ ¿Î˘¿Ï  ¿Ï¿Ï!¿Ï   ¿Ï'/¿Ï7¿Ï6   ¿ÛÏW¿Ù¿Ù ¿ÙA¿ÙB¿Ù"¿Ù@¿Ù#¿Û±7¿ÛŸ¿ÛŸ   ¿Û±¿Û≤¿Ï]áP¿Ïn¿Ïn  ¿ÏÑ¿Ïã¿Ïä  ¿Ïß¿ÏÆ¿Ï≠  ¿Ï∆#¿Ï◊¿Ï÷  ¿ÏÔ#¿Ì¿Ì  ¿Ì)¿Ì6¿Ì5  ¿Ï]¿Ï^¿ÙHU¿ÙY¿ÙY   ¿ÙH¿ÙI¿Ù°q¿Ù≤¿Ù≤  ¿Ùπ1¿Ù‚¿Ù·  ¿Ù°¿Ù¢ ¿ıÖ¿ˆB¿ˆBÅ%/// A fragment with partial information that must not form an explicit
/// semantics node without merging into another _SwitchableSemanticsFragment.
///
/// This fragment is generated from synthetic SemanticsConfiguration returned from
/// [SemanticsConfiguration.childConfigurationsDelegate]. ¿ˆâÄÄ¿ˆâ ¿ˆâ¿ˆ•  ¿ˆß¿ˆ∂¿ˆµ  ¿ˆΩ¿ˆÕ¿ˆÃ  ¿ˆ⁄¿ˆﬂ¿˜¿˜ ¿ˆ‡¿˜¿˘/¿˘1¿˘1 ¿˘¿˘	 ¿˜Äà¿˜¿˜  ¿˜%1¿˜N¿˜M  ¿˜¿˜¿˜ôÅk¿˜™¿˜™  ¿˜¿&¿˜–¿˜œ  ¿˜Ï"¿˜¸¿˜˚  ¿¯#¿¯%¿¯$  ¿¯=#¿¯[¿¯Z  ¿¯f)¿¯Ñ¿¯É  ¿˜ô¿˜ö¿˘<Äﬂ¿˘M¿˘M   ¿˘<¿˘= ¿˙≠≈¿˛¿˛ÉÎ/// An [_InterestingSemanticsFragment] that can be told to only add explicit
/// [SemanticsNode]s to the parent.
///
/// If [markAsExplicit] was not called before this fragment is added to
/// another fragment it will merge [config] into the parent's [SemanticsNode]
/// and add its [_children] to it.
///
/// If [markAsExplicit] was called before adding this fragment to another
/// fragment it will create a new [SemanticsNode]. The newly created node will
/// be annotated with the [SemanticsConfiguration] that - without the call to
/// [markAsExplicit] - would have been merged into the parent's [SemanticsNode].
/// Similarly, the new node will also take over the children that otherwise
/// would have been added to the parent's [SemanticsNode].
///
/// After a call to [markAsExplicit] the only element returned by [_children]
/// is the newly created node and [config] will return null as the fragment
/// no longer wants to merge any semantic information into the parent's
/// [SemanticsNode]. ¿˛XÇ6¿˛X ¿˛X¿˛t  ¿˛{¿˛ä¿˛â  ¿˛û¿˛≠¿˛¨  ¿˛¬&¿˛„¿˛‚  ¿˛ÓE¿ˇ"¿ˇ!  ¿ˇ9¿ˇI¿ˇH  ¿ˇS/¿ˇc¿ˇb  	¿ˇü¿ˇã¿ˇ°¿ˇÕ¿ˇº¿ˇœ¿ˇÔ¿ˇÁ¿ˇÒ¿ í¿ ù¿ ù  ¿ ±¿ »¿ »  ¿ ”¿ ÿ¿ ÿ ¿ Ï¿ ı¿ ˙¿ ˙ ¿¿C¿G¿G  ¿ÔW¿¿ ¿D¿E¿%¿C¿&¿'G¿'L¿'L ¿'Z¿#≥]¿#€¿#€   ¿#≥¿#¥¿'ß;¿'∞¿'∞    ¿_åå¿d¿d  ¿|¿É¿Ç  ¿ü¿¶¿•  ¿æ¿”¿“  ¿ﬁ¿Ë¿Á   ¿KìÂ¿\¿\  ¿r¿y¿x  ¿ï¿ú¿õ  ¿¥#¿≈¿ƒ  ¿›#¿˚¿˙  ¿)¿$¿#  ¿K¿L¿"4Å{¿"H¿"H  ¿"h&¿"x¿"w  ¿"î"¿"§¿"£   ¿$ÅC¿$%¿$%  ¿$,1¿$U¿$T  ¿$¿$¿%[Å\¿%l¿%l  ¿%t¿%å¿%ã  ¿%[¿%\¿&ªÄà¿&¿¿&¿    ¿'d?¿'u¿'u   ¿'d¿'e ¿'Ê°K¿(æ¿(æÄ—/// Helper class that keeps track of the geometry of a [SemanticsNode].
///
/// It is used to annotate a [SemanticsNode] with the current information for
/// [SemanticsNode.rect] and [SemanticsNode.transform]. ¿(’Çv¿*` ¿*`¿*r Å~/// The `parentClippingRect` may be null if no clip is to be applied.
///
/// The `ancestors` list has to include all [RenderObject] in order that are
/// located between the [SemanticsNode] whose geometry is represented here
/// (first [RenderObject] in the list) and its closest ancestor [RenderObject]
/// that also owns its own [SemanticsNode] (last [RenderObject] in the list).¿*y&¿*â¿*à  ¿*•"¿*µ¿*¥  ¿*Õ%¿*Í¿*È   ¿+O¿+U¿+U  ¿+g¿+m¿+m  ¿+É¿+ê¿+ê  ¿+û¿+®¿+®  ¿@^?¿@s¿@s ¿@è¿@ñ¿@ó¿@õ¿@ú¿I¿I¿I ¿I)¿+≤O¿+È¿+È(/// Value for [SemanticsNode.transform].   ¿,k¿,H¿,H6/// Value for [SemanticsNode.parentSemanticsClipRect].   ¿,t_¿,≥¿,≥2/// Value for [SemanticsNode.parentPaintClipRect].   ¿,◊=¿-¿-#/// Value for [SemanticsNode.rect].   ¿F4Å¿F¯¿F¯Ä¥/// Whether the [SemanticsNode] annotated with the geometric information tracked
/// by this object can be dropped from the semantics tree without losing
/// semantics information.   ¿G?Å“¿HÛ¿HÛÅñ/// Whether the [SemanticsNode] annotated with the geometric information
/// tracked by this object should be marked as hidden because it is not
/// visible on screen.
///
/// Hidden elements should still be included in the tree to work around
/// platform limitations (e.g. accessibility scrolling on iOS).
///
/// See also:
///
///  * [SemanticsFlag.isHidden] for the purpose of marking a node as hidden.   ¿-äy¿.]¿.]Å3/// Computes values, ensuring `rect` is properly bounded by ancestor clipping rects.
///
/// See also:
///
/// * [RenderObject.describeSemanticsClip], typically used to determine `parentSemanticsClipRect`.
/// * [RenderObject.describeApproximatePaintClip], typically used to determine `parentPaintClipRect`. ¿.q¿.x¿.w  ¿.î¿.õ¿.ö  ¿.≥¿.«¿.∆   ¿7ïÅ)¿7–¿7–+/// From parent to child coordinate system. ¿7ﬂ
¿7Ê¿7Â  ¿7Î¿7Ù¿7Û   ¿9ÓÖ-¿9˙¿9˙  ¿:! ¿:/¿:.  ¿:G¿:U¿:T  ¿:l¿:u¿:t   ¿A∫ÉÚ¿Aø¿Aø  ¿A’¿A„¿A‚  ¿AÓ¿A¸¿A˚  ¿B¿B¿B  ¿B)¿B0¿B/   ¿E∞ÄÄ¿EΩ¿EΩ  ¿EÕ¿E‘¿E”  ¿E÷¿E›¿E‹    ¿I3Ç0¿JK¿JKÅ/// A class that creates [DiagnosticsNode] by wrapping [RenderObject.debugCreator].
///
/// Attach a [DiagnosticsDebugCreator] into [FlutterErrorDetails.informationCollector]
/// when a [RenderObject.debugCreator] is available. This will lead to improved
/// error message. ¿JãÄ÷¿J˘ ¿J˘¿K i/// Create a [DiagnosticsProperty] with its [value] initialized to input
/// [RenderObject.debugCreator].¿K¿K¿K  
¿K%¿K*¿K_¿K+¿K;¿KG¿KB¿KI¿KX¿KY           á/ÅhàGàGÅ/// Signature for painting into a [PaintingContext].
///
/// The `offset` argument is the offset from the origin of the coordinate system
/// of the [PaintingContext.canvas] to the coordinate system of the callee.
///
/// Used by many of the methods of [PaintingContext].  àoàÄà  àààêàè   ¿ Ç9Ä‡¿ Ç·¿ Ç·Äü/// Signature for a function that is called for each [RenderObject].
///
/// Used by [RenderObject.visitChildren] and [RenderObject.visitChildrenForSemantics].  ¿ É¿ É¿ É   ¿ ÉÄΩ¿ Éì¿ Éìo/// Signature for a function that is called during layout.
///
/// Used by [RenderObject.invokeLayoutCallback].¿ É¢¿ É¢¿ É¢ ¿ É…¿ ÉÃ¿ ÉÀ   ¿ Â›Ä¥¿ ÊW¿ ÊWq/// Signature for the callback to [PipelineOwner.visitChildren].
///
/// The argument is the child being visited.  ¿ Ê|¿ Êã¿ Êä   ¿éËä®¿ê¿êÅ,/// Generic mixin for render objects with one child.
///
/// Provides a child model for a render object subclass that has
/// a unique child, which is accessible via the [child] getter.
///
/// This mixin is typically used to implement render objects created
/// in a [SingleChildRenderObjectWidget].¿ê6¿ê6¿ê6 ¿ñ'¿ñ2¿ñ2  ¿ñ=G¿ñt¿ñt%/// The render object's unique child.   ¿ñáÄ™¿ñã¿ñã  ¿ñë¿ñù¿ñú   ¿êjÖπ¿ë;¿ë;Äø/// Checks whether the given render object has the correct [runtimeType] to be
/// a child of this render object.
///
/// Does nothing if assertions are disabled.
///
/// Always returns true. ¿ëN¿ë\¿ë[   ¿ó5f¿óF¿óF  ¿óM¿ó\¿ó[  ¿ó5¿ó6¿óüI¿ó∞¿ó∞   ¿óü¿ó†¿óÏe¿ó˝¿ó˝   ¿óÏ¿óÌ¿òUy¿òf¿òf  ¿òt¿òâ¿òà  ¿òU¿òV¿ò“Äº¿òÙ¿òÙ   ¿ò“¿ò” ¿ôíÉc¿öŒ¿öŒÅ5/// Parent data to support a doubly-linked list of children.
///
/// The children can be traversed using [nextSibling] or [previousSibling],
/// which can be called on the parent data of the render objects
/// obtained via [ContainerRenderObjectMixin.firstChild] or
/// [ContainerRenderObjectMixin.lastChild].¿öÁ¿öÁ¿öÁ ¿õQ¿õ[¿õ[4/// The previous sibling in the parent's child list. ¿õoI¿õ≠¿õ≠0/// The next sibling in the parent's child list.  ¿õΩÅ6¿õ¿õ/// Clear the sibling pointers.  ¿õﬂ¿õ‡ ¿ú˜Æñ¿†Ÿ¿†ŸÉ€/// Generic mixin for render objects with a list of children.
///
/// Provides a child model for a render object subclass that has a doubly-linked
/// list of children.
///
/// The [ChildType] specifies the type of the children (extending [RenderObject]),
/// e.g. [RenderBox].
///
/// [ParentDataType] stores parent container data on its child render objects.
/// It must extend [ContainerParentDataMixin], which provides the interface
/// for visiting children. This data is populated by
/// [RenderObject.setupParentData] implemented by the class using this mixin.
///
/// When using [RenderBox] as the child type, you will usually want to make use of
/// [RenderBoxContainerDefaultsMixin] and extend [ContainerBoxParentData] for the
/// parent data.
///
/// Moreover, this is a required mixin for render objects returned to [MultiChildRenderObjectWidget].
///
/// See also:
///
///  * [SlottedContainerRenderObjectMixin], which organizes its children
///    in different named slots.¿†˜¿†˜¿†˜¿°:¿°¿° ¿§î¿§ò¿§ò ¿§¶¿™≠¿™∏¿™∏  ¿™«¿™“¿™“  ¿§¨@¿§“¿§“/// The number of children.   ¿∆°R¿∆Ÿ¿∆Ÿ&/// The first child in the child list.   ¿∆˜O¿«.¿«.%/// The last child in the child list.   ¿°nÅó¿°s¿°s  ¿°ì¿°û¿°ù  ¿°•¿°±¿°∞   ¿£	Åá¿£¿£  ¿£*¿£5¿£4  ¿£<¿£H¿£G   ¿§Öπ¿•¡¿•¡Äø/// Checks whether the given render object has the correct [runtimeType] to be
/// a child of this render object.
///
/// Does nothing if assertions are disabled.
///
/// Always returns true. ¿•‘¿•‚¿•·   ¿™‡á‚¿™Â¿™Â  ¿™˙¿´¿´  ¿´¿´¿´   ¿≤∆Ñ¿≥¢¿≥¢ÄŒ/// Insert child into this render object's child list after the given child.
///
/// If `after` is null, then this inserts the child at the start of the list,
/// and the child becomes the new [firstChild]. ¿≥©¿≥¥¿≥≥  ¿≥ª¿≥«¿≥∆   ¿∂’Äá¿∑¿∑?/// Append child to the end of this render object's child list. ¿∑ ¿∑+¿∑*   ¿∑`Äí¿∑Ø¿∑ØG/// Add all the children to the end of this render object's child list. ¿∑∂¿∑»¿∑«   ¿∑ˆÑq¿∑˚¿∑˚  ¿∏¿∏¿∏   ¿ºkÄ∆¿º›¿º›f/// Remove this child from the child list.
///
/// Requires the child to be present in the child list. ¿º‰¿ºÔ¿ºÓ   ¿Ω5Ç3¿Ωº¿Ωº{/// Remove all their children from this render object's child list.
///
/// More efficient than removing them individually.   ¿ølÇÃ¿¿ñ¿¿ñÅ/// Move the given `child` in the child list to be after another child.
///
/// More efficient than removing and re-adding the child. Requires the child
/// to already be in the child list at some position. Pass null for `after` to
/// move the child to the start of the child list. ¿¿õ¿¿¶¿¿•  ¿¿≠¿¿π¿¿∏   ¿¬<Å)¿¬M¿¬M  ¿¬T¿¬c¿¬b  ¿¬<¿¬=¿√iÅ¿√z¿√z   ¿√i¿√j¿ƒyÅ¿ƒä¿ƒä   ¿ƒy¿ƒz¿≈ÉÅ¿≈î¿≈î  ¿≈¢¿≈∑¿≈∂  ¿≈É¿≈Ñ¿«JÅ¿«ò¿«ò@/// The previous child before the given child in the child list. ¿«§¿«Ø¿«Æ   ¿»\Å¿»•¿»•;/// The next child after the given child in the child list. ¿»∞¿»ª¿»∫   ¿…dÇ'¿…Ü¿…Ü   ¿…d¿…e ¿Àèä¿Ã√¿Ã√Å-/// Mixin for [RenderObject] that will call [systemFontsDidChange] whenever the
/// system fonts change.
///
/// System fonts can change when the OS installs or removes a font. Use this
/// mixin if the [RenderObject] uses [TextPainter] or [Paragraph] to correctly
/// update the text when it happens.  ¿œû4¿œ£¿œ£ ¿œÕ ¿Ã˙Ç†¿œg¿œgÇ1/// A callback that is called when system fonts have changed.
///
/// The framework defers the invocation of the callback to the
/// [SchedulerPhase.transientCallbacks] phase to ensure that the
/// [RenderObject]'s text layout is still valid when user interactions are in
/// progress (which usually take place during the [SchedulerPhase.idle] phase).
///
/// By default, [markNeedsLayout] is called on the [RenderObject]
/// implementing this mixin.
///
/// Subclass should override this method to clear any extra cache that depend
/// on font-related metrics.  ¿œD¿œE¿œQ¿œR¿œ÷ÉO¿œ€¿œ€    ¿”)Åæ¿”:¿”:  ¿”A¿”P¿”O  ¿”)¿”*¿‘ÎÄæ¿‘¸¿‘¸   ¿‘Î¿‘Ï ¿ ÔôH¿ Ô¶¿ Ô¶ ¿ Ô¡   ÄÆ  dart:ui  ÄÃ  package:flutter/widgets.dart  Äˇ  box.dart  Å  proxy_box.dart  Å;  	view.dart  ÅW  viewport.dart ïµ <ÄÜÄ§Ä•ÄøÄ√ÄÚÄˆÅÅ2ÅNÅnÅwÅxÅ•Å¶ÅœÅ˘Ç!ÇIÇrÇõÇúÇ≥Ç»Ç›ÇﬁÉÉÉ5ÉNÉkÉÉÉôÉ≥É∆É‹ÉÚÑÑ&Ñ;ÑSÑúÑƒÑ≈ÖÖÖ[Ö£Ö◊Ö€ÖÈÖÌÜ8Ü}ÜêÜÕÜ⁄ÜÎÜ˛Üˇáá,á.á/ádáháπàà	à?àòàôàØà≥ââJâîâ®â¨â˝äMäùäÁãããLãäã∂ãÿãﬁå&å=åJåâåäå≤å≥ç çGçMçàçéç⁄ç¯ç˘é é&éqéæèè+è1èAèGèóè∏êê9êçêëêíêπê”ê¸ëë&ëKë[ëíë¡ëÒííí*í4í|íöí¿ííÒì>ìâì‘ì˚îHî}îäî«îÂî˜ï$ï9ïEïkï≈ï”ñ ñTñ∑óóó@óFóuóvó≥óËó¯òBòUò_ò`ò•ò›òﬁô-ôaôûô»ôÃôÕöö!ölöπõõBõHõXõ^õÆõœú	úKúkúôúöúÁùùù=ùPùZù≤ùæùÈû;ûúûÂûÏüüNüRüSü†ü†$†*†:†@†ç†ß†‹†ˆ°°K°R°b°Å°ê°»°Ì°ˆ¢	¢¢¢¢<¢B¢ê¢ﬂ£/£f£v£û£±£ª£º£ﬂ£˛§$§r§ª§Á••E•r••¨•≤•∂•∑•Û¶¶3¶p¶q¶≥¶Óß1ß>ßmßìßõß≠ßÊ®®g®|®à®é®√©©<©_©c©d©∞©ø©≈™™T™Å™á™‘™Á™Ù´´1´E´h´l´m´á´≥´√´⁄¨¨$¨E¨T¨{¨û¨ø¨«¨⁄¨‰¨˙¨˛¨ˇ≠≠3≠T≠g≠h≠å≠í≠‹Æ&ÆEÆQÆgÆÇÆõÆ°ÆƒÆŸÆ›ÆﬁÆ˘ØØGØâØ ØˆØ˙Ø˚∞L∞[∞a∞Ø∞˝±G±á±ç±…±œ±ﬂ≤
≤P≤ç≤ë≤í≤Õ≤”≥≥n≥Ω≥ ≥–¥¥j¥|¥â¥ö¥ª¥‘¥‚¥Ë¥¯µ µ<µPµ}µüµ€∂∂!∂L∂h∂|∂©∂À∂¸∑-∑5∑H∑R∑ä∑§∑∫∑Œ∑“∑”∏#∏7∏=∏å∏’∏‰∏Íπ5πÖπ—πÛ∫∫0∫I∫O∫x∫|∫}∫–∫÷ª&ªoªºªÓªÙº?ºèº€º˝ΩΩ;ΩTΩZΩÑΩàΩâΩæΩƒææPæVæ£æıøEøãøëø°øßøı¿ @¿ @!¿ @>¿ @V¿ @Z¿ @[¿ @¨¿ @˚¿ AK¿ Am¿ As¿ A¬¿ B¿ B¿ B ¿ Be¿ Bµ¿ C¿ CS¿ Cñ¿ C´¿ C±¿ D¿ DS¿ D†¿ DÒ¿ EA¿ E¿ EÖ¿ Eï¿ Eõ¿ EÊ¿ E˙¿ F¿ F+¿ FP¿ Fe¿ FÅ¿ Fà¿ F÷¿ G'¿ GI¿ Go¿ Gu¿ Gí¿ GØ¿ GÏ¿ G˛¿ H)¿ H0¿ H1¿ HT¿ H~¿ HÇ¿ HÉ¿ HÀ¿ H—¿ I¿ I$¿ Is¿ I£¿ Iß¿ I®¿ I◊¿ I›¿ J/¿ Jw¿ JÆ¿ J˙¿ KJ¿ Kà¿ KÃ¿ K“¿ L ¿ Ld¿ Ly¿ L¿ L«¿ M¿ MY¿ Mn¿ Mt¿ M≈¿ N¿ N¿ N#¿ Ns¿ N¥¿ N∫¿ O¿ O	¿ OS¿ O†¿ O‰¿ P4¿ PÑ¿ PÃ¿ Q¿ QN¿ Qc¿ QÇ¿ Qù¿ Q∞¿ Q√¿ QÍ¿ R¿ R.¿ R5¿ RZ¿ Rw¿ Rä¿ Rê¿ R»¿ R‰¿ S#¿ S/¿ SS¿ Sz¿ S≈¿ SŸ¿ SÊ¿ TI¿ T\¿ Tb¿ Tf¿ Tg¿ Tû¿ T§¿ TÛ¿ T˘¿ U>¿ UD¿ Uî¿ U◊¿ U›¿ V-¿ Vx¿ Vü¿ V•¿ Vˆ¿ W8¿ W>¿ Wè¿ Wï¿ W‹¿ W˝¿ X¿ X+¿ X<¿ XQ¿ Xx¿ X†¿ Xæ¿ X≈¿ XÍ¿ Y¿ Y¿ Y ¿ YT¿ Yè¿ Y´¿ YÏ¿ Y¯¿ Z¿ ZE¿ Zé¿ Z¢¿ ZØ¿ [¿ [%¿ [+¿ [/¿ [0¿ [Z¿ [`¿ [Ø¿ [µ¿ [˙¿ \ ¿ \P¿ \ì¿ \ô¿ \Ë¿ ]3¿ ]O¿ ]U¿ ]•¿ ]Ê¿ ]Ï¿ ^0¿ ^6¿ ^}¿ ^ú¿ ^∑¿ ^ ¿ ^€¿ ^Ó¿ _¿ _=¿ _Z¿ _a¿ _Ü¿ _£¿ _∂¿ _º¿ _¿ `(¿ `D¿ `É¿ `è¿ `≥¿ `⁄¿ a#¿ a7¿ aD¿ a•¿ a∏¿ aæ¿ a¬¿ a√¿ aı¿ a˚¿ b=¿ bC¿ bî¿ b∫¿ b¿¿ c¿ cW¿ c]¿ c§¿ c™¿ c˜¿ dI¿ dô¿ dﬂ¿ e¿ e¿ e3¿ eZ¿ ez¿ eÅ¿ eƒ¿ eÈ¿ f¿ f"¿ f&¿ f'¿ fX¿ f^¿ f≠¿ f≥¿ g¿ g*¿ g0¿ g|¿ gÕ¿ h¿ h¿ h]¿ hü¿ h•¿ hÏ¿ i¿ i(¿ i;¿ iR¿ iy¿ ió¿ iû¿ i≈¿ j¿ j"¿ jQ¿ jm¿ jÆ¿ j⁄¿ jÎ¿ j˙¿ k¿ k¿ k|¿ kÖ¿ kô¿ k¶¿ k≥¿ kƒ¿ kı¿ l¿ l*¿ l=¿ lC¿ lG¿ lH¿ lz¿ lÄ¿ lÕ¿ l˘¿ lˇ¿ mO¿ mò¿ mË¿ mÓ¿ n;¿ n{¿ nÅ¿ n»¿ nŒ¿ o¿ om¿ oΩ¿ p¿ p¿ p2¿ pA¿ ph¿ pÑ¿ pã¿ p∆¿ p–¿ pÊ¿ pˇ¿ q+¿ q=¿ qA¿ qB¿ qN¿ qe¿ q‡¿ q‚¿ q„¿ r¿ r¿ r^¿ rü¿ r£¿ r…¿ rÕ¿ s¿ si¿ sç¿ së¿ s‡¿ t0¿ t}¿ tÅ¿ t—¿ u¿ um¿ u∫¿ u«¿ uÀ¿ v¿ vb¿ v¨¿ vÌ¿ w=¿ wç¿ w€¿ x!¿ x=¿ xA¿ xê¿ x€¿ y*¿ yt¿ y™¿ y˙¿ z¿ z¿ zd¿ z≤¿ {¿ {¿ {¿ {o¿ {¿¿ {À¿ {Ë¿ |9¿ |Å¿ |ò¿ |ô¿ |„¿ |˜¿ |¯¿ }:¿ }S¿ }T¿ }Ç¿ }à¿ }À¿ }—¿ ~ ¿ ~<¿ ~B¿ ~ê¿ ~‡¿ /¿ x¿ ±¿ Ä¿ ÄS¿ Äd¿ Äj¿ Ä∏¿ Å¿ Å>¿ ÅD¿ ÅÜ¿ Å¢¿ Å»¿ Å¯¿ Åˇ¿ Ç¿ Ç2¿ Ç6¿ Ç8¿ Ç9¿ Ç~¿ ÇÇ¿ ÇŸ¿ É¿ É¿ ÉV¿ ÉZ¿ Éã¿ ÉŸ¿ É⁄¿ Ñ¿ Ñd¿ Ñ§¿ Ñ‹¿ Ö¿ ÖG¿ Öz¿ Öß¿ ÖΩ¿ Ö∆¿ ÖÃ¿ ÖÕ¿ ÖÈ¿ Ü¿ Ü$¿ Ü(¿ Ü)¿ ÜG¿ ÜH¿ Üí¿ Ü≤¿ Ü≥¿ Üø¿ Ü“¿ á¿ áJ¿ áv¿ áƒ¿ á ¿ áÀ¿ áÁ¿ à¿ à%¿ àN¿ àR¿ àT¿ àU¿ àå¿ àê¿ à‡¿ â1¿ â~¿ âñ¿ âö¿ âÂ¿ ä,¿ äv¿ ä¢¿ äÎ¿ ã9¿ ãâ¿ ã⁄¿ å(¿ åp¿ å∂¿ ç¿ çO¿ çè¿ ç€¿ é)¿ év¿ éz¿ é…¿ è¿ è`¿ è~¿ èÇ¿ è”¿ ê!¿ êp¿ êΩ¿ ë	¿ ëW¿ ëò¿ ëú¿ ëË¿ í6¿ íÜ¿ í–¿ íˇ¿ ì2¿ ìR¿ ìX¿ ì•¿ ìÚ¿ î¿ î*¿ îG¿ îi¿ îÖ¿ î®¿ îØ¿ îÔ¿ ï'¿ ïS¿ ïí¿ ï≈¿ ïÍ¿ ñ ¿ ñ	¿ ñ¿ ñ¿ ñ¿ ñd¿ ñà¿ ñé¿ ñﬂ¿ ó,¿ óy¿ óò¿ óû¿ óÂ¿ ò2¿ ò{¿ ò•¿ ò¶¿ òÏ¿ òÚ¿ ô:¿ ôP¿ ô¿ ôÄ¿ ô◊¿ ô›¿ ö2¿ ö_¿ öì¿ öî¿ ö‹¿ ö‚¿ õ#¿ õS¿ õT¿ õö¿ õ†¿ õ¿ ú¿ ú6¿ ú\¿ úy¿ úÜ¿ úÆ¿ ú¥¿ ú∏¿ úπ¿ ú˛¿ ù)¿ ùD¿ ùj¿ ùà¿ ùñ¿ ùú¿ ùµ¿ ùÃ¿ ùÈ¿ ùÌ¿ ùÓ¿ û:¿ ûÖ¿ û¬¿ û«¿ ü¿ ü\¿ ü•¿ ü›¿ ü‚¿ †¿ †n¿ †º¿ °¿ °¿ °D¿ °Å¿ °Ç¿ °¿¿ °∆¿ ¢¿ ¢¿ ¢O¿ ¢k¿ ¢ù¿ ¢ø¿ ¢Ê¿ ¢Á¿ £)¿ £/¿ £¿ £ ¿ § ¿ §¿ §O¿ §f¿ §¿ §≤¿ §ƒ¿ §˜¿ •,¿ •h¿ •ö¿ •ß¿ •±¿ •∆¿ •“¿ •Û¿ ¶+¿ ¶V¿ ¶_¿ ¶e¿ ¶u¿ ¶ï¿ ¶®¿ ¶≤¿ ¶º¿ ¶Î¿ ß¿ ßW¿ ßá¿ ß◊¿ ®¿ ®5¿ ®a¿ ®ì¿ ®Ë¿ ®˝¿ ©¿ ©¿ ©J¿ ©É¿ ©¨¿ ©∏¿ ©¬¿ ™¿ ™0¿ ™X¿ ™`¿ ™a¿ ™s¿ ™ö¿ ™Ø¿ ™ª¿ ™¿ ´¿ ´¿ ´#¿ ´H¿ ´é¿ ´ó¿ ´ß¿ ´Õ¿ ´ﬂ¿ ¨¿ ¨*¿ ¨?¿ ¨K¿ ¨f¿ ¨å¿ ¨î¿ ¨ö¿ ¨û¿ ¨ü¿ ¨Ì¿ ≠>¿ ≠ã¿ ≠⁄¿ Æ¿ Æ;¿ Æ<¿ Æj¿ Æ™¿ Æ…¿ Æ›¿ ÆÌ¿ Ø#¿ ØU¿ Øh¿ Ør¿ Ø|¿ Øé¿ Øû¿ Ø√¿ Ø’¿ ∞¿ ∞#¿ ∞/¿ ∞5¿ ∞9¿ ∞:¿ ∞å¿ ∞ç¿ ∞≈¿ ∞À¿ ±¿ ±-¿ ±M¿ ±f¿ ± ¿ ±–¿ ≤4¿ ≤~¿ ≤¬¿ ≤È¿ ≤Ò¿ ≤˜¿ ≥'¿ ≥Z¿ ≥~¿ ≥Ñ¿ ≥ê¿ ≥¬¿ ¥¿ ¥¿ ¥&¿ ¥J¿ ¥P¿ ¥T¿ ¥U¿ ¥ë¿ ¥í¿ ¥œ¿ ¥’¿ µ¿ µ¿ µX¿ µy¿ µ©¿ µ ¿ µÀ¿ ∂¿ ∂¿ ∂Q¿ ∂°¿ ∂Ú¿ ∂¯¿ ∑A¿ ∑W¿ ∑p¿ ∑£¿ ∑µ¿ ∑Á¿ ∏¿ ∏W¿ ∏à¿ ∏ï¿ ∏ü¿ ∏¥¿ ∏¿¿ ∏·¿ π¿ πC¿ πL¿ πR¿ π\¿ πn¿ πè¿ π§¿ π∞¿ π¿ ∫¿ ∫¿ ∫^¿ ∫Å¿ ∫Ÿ¿ ª
¿ ªf¿ ªô¿ ª≈¿ ªÈ¿ º%¿ º:¿ ºu¿ ºÉ¿ ºñ¿ º¬¿ ºŒ¿ ºÿ¿ º‡¿ Ω¿ Ω1¿ Ω9¿ ΩG¿ Ωk¿ Ω±¿ Ω∫¿ Ω ¿ Ω‹¿ Ω˛¿ æ¿ æ¿ æ:¿ æ`¿ æh¿ æn¿ ær¿ æs¿ æ¿¿ æ∆¿ ø¿ øg¿ øò¿ ø‚¿ ¿,¿ ¿y¿ ¿ã¿ ¿ë¿ ¿⁄¿ ¿˜¿ ¡0¿ ¡S¿ ¡T¿ ¡f¿ ¡l¿ ¡∏¿ ¬¿ ¬G¿ ¬V¿ ¬ú¿ ¬Õ¿ √¿ √¿ √X¿ √Ä¿ √Å¿ √ì¿ √ô¿ √‰¿ ƒ4¿ ƒm¿ ƒ|¿ ƒ¿ ≈G¿ ≈Ç¿ ≈Ü¿ ≈ƒ¿ ≈Î¿ ∆¿ ∆<¿ ∆@¿ ∆A¿ ∆b¿ ∆∏¿ ∆›¿ ∆Ì¿ «¿ «p¿ «{¿ «Ã¿ «ı¿ «˝¿ »'¿ »I¿ »g¿ »è¿ »ï¿ »ô¿ »ö¿ »¿¿ »Â¿ …¿ …)¿ …-¿ ….¿ …S¿ …ò¿ …ô¿ …Â¿ …Û¿ …˘¿  .¿  w¿  }¿   ¿ À¿ ÀD¿ ÀJ¿ Àì¿ À≠¿ À–¿ Àﬁ¿ À‰¿ À˝¿ ÃQ¿ ÃW¿ Ã|¿ Ãå¿ ÃØ¿ Ã¬¿ ÃÃ¿ Ã÷¿ Õ¿ Õ0¿ Õ{¿ Õ°¿ ÕŸ¿ Œ¿ Œ<¿ ŒF¿ ŒN¿ Œ|¿ Œ±¿ Œ—¿ ŒŸ¿ ŒÁ¿ œ¿ œU¿ œ^¿ œn¿ œÄ¿ œ¶¿ œª¿ œ«¿ œ‚¿ –¿ –¿ –¿ –¿ –¿ –'¿ –Y¿ –w¿ –≈¿ –Ã¿ ––¿ –—¿ –›¿ —"¿ —M¿ —Æ¿ —≤¿ —≥¿ —»¿ —…¿ “¿ “"¿ “#¿ “B¿ “á¿ “®¿ “π¿ “Ω¿ “æ¿ ”¿ ”¿ ”i¿ ”o¿ ”∫¿ ‘	¿ ‘,¿ ‘W¿ ‘v¿ ‘ê¿ ‘√¿ ‘‡¿ ‘·¿ ’¿ ’2¿ ’8¿ ’<¿ ’=¿ ’j¿ ’p¿ ’ª¿ ÷¿ ÷.¿ ÷@¿ ÷_¿ ÷ï¿ ÷´¿ ÷˙¿ ◊K¿ ◊å¿ ◊ç¿ ◊¿¿ ◊÷¿ ◊‹¿ ◊‡¿ ◊·¿ ÿ&¿ ÿm¿ ÿª¿ Ÿ
¿ Ÿ:¿ Ÿá¿ Ÿà¿ Ÿ¥¿ Ÿ∫¿ ⁄	¿ ⁄V¿ ⁄£¿ ⁄Ó¿ €;¿ €ä¿ €€¿ €˚¿ ‹¿ ‹B¿ ‹f¿ ‹l¿ ‹Ω¿ ›¿ ›¿ ›=¿ ›f¿ ›é¿ ›∂¿ ﬁ¿ ﬁ)¿ ﬁB¿ ﬁf¿ ﬁl¿ ﬁâ¿ ﬁ©¿ ﬁØ¿ ﬁ≥¿ ﬁ¥¿ ﬁ˝¿ ﬂ¿ ﬂT¿ ﬂf¿ ﬂl¿ ﬂª¿ ‡
¿ ‡2¿ ‡Z¿ ‡Å¿ ‡⁄¿ ‡˜¿ ·¿ ·4¿ ·:¿ ·W¿ ·m¿ ·s¿ ·w¿ ·x¿ ·¿¿ ·∆¿ ·÷¿ ·‹¿ ‚¿ ‚*¿ ‚_¿ ‚¿ ‚É¿ ‚Ñ¿ ‚Ω¿ ‚√¿ „¿ „a¿ „≤¿ „∏¿ „Ù¿ ‰¿ ‰&¿ ‰D¿ ‰c¿ ‰Ö¿ ‰±¿ ‰ˇ¿ Â¿ Â%¿ ÂA¿ Âb¿ Âí¿ Â≤¿ Â÷¿ Â⁄¿ Â‹¿ Â›¿ Ê¿ Ê"¿ ÊO¿ Êí¿ Êì¿ Êª¿ Êø¿ Êˇ¿ ÁL¿ Áõ¿ ÁÈ¿ Ë6¿ Ë]¿ Ëa¿ Ë±¿ È¿ ÈH¿ Èh¿ Èl¿ È∫¿ Í¿ Í>¿ Íâ¿ ÍÀ¿ Í—¿ Î!¿ Îc¿ Îi¿ Îy¿ Î¿ Î∆¿ Ï¿ Ï!¿ Ï"¿ Ïp¿ Ïæ¿ Ï◊¿ Ï›¿ Ì.¿ Ì{¿ Ì»¿ ÌÁ¿ ÌÌ¿ Ó4¿ ÓÉ¿ Ó—¿ Ó◊¿ ÓÁ¿ ÓÌ¿ Ô6¿ Ôx¿ Ôñ¿ Ôò¿ Ôô¿ Ô„¿ Ô‰¿ ¿ 
¿ N¿ n¿ r¿ µ¿ π¿ Ò¿ ÒU¿ Ò†¿ Ò¿¿ Òƒ¿ Ú¿ Ú]¿ Ú¶¿ Úˆ¿ ÛC¿ Ûí¿ Û‚¿ Ù	¿ Ù¿ ÙQ¿ Ùx¿ Ù|¿ Ùç¿ Ùë¿ Ùﬁ¿ ı.¿ ı¿ ıô¿ ıù¿ ıÈ¿ ˆ7¿ ˆá¿ ˆÿ¿ ˜¿ ˜¿ ˜A¿ ˜E¿ ˜ã¿ ˜Ÿ¿ ¯&¿ ¯q¿ ¯¿¿ ˘¿ ˘^¿ ˘¨¿ ˘Ù¿ ˙C¿ ˙ê¿ ˙€¿ ˚¿ ˚ ¿ ˚o¿ ˚ø¿ ¸¿ ¸L¿ ¸P¿ ¸_¿ ¸c¿ ¸™¿ ¸Ò¿ ˝¿ ˝¿ ˝_¿ ˝∞¿ ˝¸¿ ˛I¿ ˛é¿ ˛œ¿ ˛”¿ ˇ#¿ ˇV¿ ˇZ¿ ˇn¿ ˇr¿ ˇΩ¿ ˇÏ¿ ˇ¿ =¿ ã¿ ‹¿$¿n¿º¿	¿.¿2¿`¿d¿µ¿¿Q¿°¿Ú¿	¿¿]¿m¿q¿±¿ˇ¿¿¿a¿∞¿¥¿Á¿Î¿=¿ç¿‹¿'¿r¿v¿ƒ¿¿`¿¨¿˚¿	J¿	¿	–¿
 ¿
-¿
Å¿
≥¿
∆¿
Ú¿1¿\¿Ä¿ñ¿ü¿•¿Í¿¿¿¿k¿∫¿¿4¿:¿{¿Ã¿¿7¿=¿â¿è¿ü¿•¿“¿Ë¿ˇ¿%¿;¿[¿Ñ¿û¿¶¿™¿´¿—¿◊¿¿0¿D¿T¿u¿à¿í¿ß¿´¿¨¿À¿Ã¿¿
¿U¿§¿Ô¿.¿w¿«¿ﬂ¿Â¿0¿W¿]¿ô¿™¿Ω¿⁄¿¿T¿Z¿y¿â¿÷¿Ë¿¿)¿L¿∫¿»¿’¿Ú¿¿¿¿¿ ¿!¿Q¿W¿§¿Û¿C¿Å¿á¿“¿¿Q¿è¿‡¿,¿x¿≥¿Õ¿Œ¿¿¿e¿ñ¿Õ¿Ù¿¿F¿L¿P¿Q¿ã¿ë¿·¿)¿f¿l¿∫¿¿U¿§¿Í¿:¿@¿à¿ÿ¿˜¿¿$¿%¿v¿Ö¿ã¿Ã¿Ÿ¿ ¿ %¿ G¿ h¿ á¿ ç¿ ë¿ í¿ Ã¿ “¿!#¿![¿!h¿!Ñ¿!Ö¿!¿¿!∆¿"¿"-¿"F¿"G¿"è¿"ï¿"√¿"…¿#¿#)¿#A¿#q¿#r¿#∫¿#¿¿$¿$b¿$s¿$Ä¿$®¿$À¿$€¿$˚¿%¿%<¿%D¿%ç¿%†¿%™¿%´¿%«¿%ﬁ¿&¿&$¿&>¿&R¿&o¿&u¿&é¿&í¿&ì¿&Â¿&Î¿':¿'ç¿'û¿'´¿'“¿'ı¿(¿(C¿(k¿(ã¿(®¿(¬¿(÷¿(Ï¿(Ú¿)	¿)/¿)O¿)S¿)T¿)ò¿)û¿)Ó¿*#¿*$¿*b¿*h¿*Ü¿*å¿*ú¿*¢¿*ˆ¿+¿+¿+\¿+z¿+ï¿+≥¿+…¿+Ô¿,&¿,D¿,i¿,ø¿,¿-N¿-n¿-Õ¿-ﬁ¿.3¿.à¿.Ÿ¿/¿/v¿/Ö¿/é¿/ï¿/ô¿/ö¿/Â¿/Î¿08¿0E¿0¿0•¿0¶¿0Ò¿0˜¿1D¿1Q¿1ã¿1±¿1≤¿1Ì¿1Û¿2@¿2L¿2ê¿2ª¿2º¿3¿3L¿3ö¿3∑¿3÷¿3Ù¿4¿4V¿4É¿4ì¿4…¿4Í¿4˝¿5¿5%¿55¿5k¿5~¿5à¿5õ¿5ü¿5†¿5¿5¸¿6¿6B¿6H¿6é¿6À¿6Î¿6Ï¿7¿7¿7I¿7O¿7ü¿7Ô¿81¿87¿8Ö¿8¨¿8¬¿8“¿8Ó¿9&¿9f¿9ì¿9¿¿9“¿:	¿:¿:"¿:*¿:+¿:Z¿:®¿:˘¿;¿;G¿;^¿;s¿;{¿;|¿;©¿;“¿<¿<Y¿<µ¿<Î¿=>¿=ã¿=⁄¿>¿>)¿>y¿>í¿>©¿>≥¿>¥¿>Î¿?,¿?=¿?b¿?s¿?}¿?Ö¿?Ü¿?‘¿?˚¿@Q¿@≥¿@…¿@ ¿@¿A(¿Ay¿Aï¿A˚¿B¿B5¿Bg¿By¿B∞¿BΩ¿BÍ¿C6¿CU¿Cå¿Cô¿C•¿C≠¿CÆ¿C‘¿D¿Dp¿D”¿E ¿E2¿ED¿E{¿Eà¿Eù¿F¿F¿F¿F$¿F%¿FV¿Fó¿F†¿FÓ¿G¿G-¿Gê¿G˜¿H.¿H/¿He¿Hv¿Hù¿H»¿H¯¿I¿I=¿IH¿Is¿IÊ¿J¿J8¿JC¿Je¿Jí¿Jª¿JŸ¿K¿K¿K0¿K¥¿L¿L#¿L-¿L7¿LJ¿LN¿LO¿L†¿LÕ¿L”¿M$¿Mq¿M∫¿M¿¿N¿ND¿Nî¿NÂ¿N˙¿O¿O/¿OO¿O_¿O|¿Oè¿Oô¿O≤¿O∂¿O∑¿OÙ¿O˙¿P:¿PZ¿PÄ¿Pô¿Pö¿P¯¿P˛¿Q3¿Q9¿Qo¿Qñ¿Qó¿Q’¿Q€¿R'¿R]¿Rc¿R°¿R◊¿S¿S/¿ST¿Sq¿Sç¿S°¿SÔ¿T6¿Tk¿T´¿T€¿T˜¿U¿U¿U=¿Uh¿Uê¿Uñ¿UÀ¿V
¿V9¿VT¿Vl¿Vr¿V¡¿W
¿W=¿Wb¿WÑ¿Wä¿Wé¿Wè¿W”¿WŸ¿X)¿XT¿XZ¿Xò¿Xﬁ¿X¸¿Y¿Y¿Y;¿YN¿Yä¿Yé¿Yè¿Yœ¿Y’¿Z&¿Zr¿Zø¿Zˆ¿Z¸¿[2¿[P¿[f¿[v¿[ì¿[¶¿[∞¿[√¿[«¿[»¿[‰¿[Â¿\1¿\7¿\~¿\∫¿\‰¿]1¿]o¿]≤¿]“¿]ÿ¿^&¿^t¿^z¿^¿¿_¿_D¿_x¿_æ¿`	¿`¿`^¿`Æ¿`¿a?¿aè¿a—¿aÙ¿aı¿bG¿bî¿b¡¿b¬¿c¿c¿cL¿cr¿c¿cü¿cø¿d$¿d*¿dD¿dH¿dI¿df¿dg¿d∏¿e¿eW¿e§¿eœ¿e‹¿f¿f¿fW¿f•¿f…¿fœ¿g¿gp¿g¬¿gÈ¿h¿h¿hS¿hx¿h≥¿h∆¿hÃ¿hÍ¿i¿iM¿ip¿iã¿iŒ¿i‰¿iÏ¿iÚ¿j¿j/¿j3¿j4¿jÖ¿j÷¿k¿k"¿k6¿k<¿kç¿k€¿l(¿lg¿lm¿lΩ¿lÚ¿l¯¿mH¿më¿m·¿n.¿n{¿n»¿o¿o¿oI¿oó¿o⁄¿o‡¿o˜¿o˝¿pF¿pê¿pﬂ¿q¿q[¿q¨¿q»¿qŒ¿q˙¿rF¿ra¿rà¿r†¿r‡¿rÓ¿rÙ¿s¿s4¿sP¿sü¿sÏ¿t¿t1¿t9¿tG¿tM¿tr¿të¿tû¿tπ¿t‘¿tË¿u¿uc¿uo¿uÜ¿uî¿u¬¿uË¿u¿uˆ¿u˙¿u˚¿vJ¿v\¿vb¿v¶¿v˜¿wF¿ww¿w}¿w´¿w∏¿wŸ¿x ¿x¿x:¿xh¿xë¿x±¿xæ¿xÍ¿x¿y¿y¿y¿yZ¿yß¿yÊ¿yÏ¿z5¿z;¿zi¿zö¿z±¿zŒ¿z“¿z”¿{"¿{I¿{ó¿{◊¿|¿|;¿|a¿|g¿|k¿|l¿|∫¿} ¿},¿}:¿}@¿}í¿}æ¿}˝¿~6¿~:¿~;¿~Ñ¿~‘¿~Ê¿¿@¿è¿¿¿ﬂ¿Ä¿Ä¿Ä¿Äf¿Äl¿Äπ¿Äﬂ¿ÄÂ¿Å)¿ÅJ¿Åg¿Å}¿Å¢¿Å…¿Å¿Ç¿Ç¿ÇD¿ÇW¿Ça¿Çã¿Çè¿Çê¿ÇΩ¿Ç›¿Ç˜¿É¿ÉK¿Éo¿Éö¿É∆¿É÷¿É˙¿Ñ¿ÑT¿Ñu¿Ñî¿ÑÕ¿Ñ’¿ÑË¿ÑÚ¿Ñ¸¿Ö¿Ö5¿ÖN¿ÖÅ¿Öá¿Öó¿ÖÕ¿ÖÚ¿Ü¿Ü*¿Ü4¿ÜN¿Üd¿Üh¿Üi¿Üö¿Ü†¿ÜÔ¿á>¿áé¿áº¿á¬¿à¿à`¿à±¿à˝¿âA¿âë¿âÃ¿â“¿ä¿äj¿ä≤¿ä∏¿ã¿ãU¿ã¢¿ãœ¿ã¸¿åD¿åa¿åò¿åÀ¿å›¿ç¿ç^¿çh¿ç}¿çâ¿ç›¿ç„¿çÔ¿é¿é8¿é[¿é´¿é«¿è)¿è_¿è•¿è»¿èˆ¿ê¿ê¿ê%¿êh¿ê≥¿ë¿ëA¿ëè¿ëø¿ë¿í¿í6¿íå¿íﬂ¿ì¿ì:¿ìK¿ìZ¿ìf¿ìå¿ìó¿ì†¿ìß¿ìÀ¿ìÔ¿î¿îo¿î—¿î·¿ï¿ï#¿ï-¿ï.¿ïf¿ïx¿ï∆¿ñ¿ñ6¿ñf¿ñ≤¿ñ’¿ñÔ¿ó'¿óN¿óu¿óä¿óñ¿óó¿ó ¿ó˙¿ò¿ò¿ò<¿òb¿òj¿òx¿ò~¿òû¿òü¿òÌ¿ô<¿ôä¿ôº¿ôÓ¿ôÙ¿ö¿ö¿öC¿ön¿ö~¿ö¢¿ö¡¿ö’¿õ7¿õB¿õJ¿õ]¿õg¿õÄ¿õí¿õ∏¿õÕ¿õŸ¿õÂ¿õ˛¿ú¿ú>¿úU¿úc¿ú~¿ú≥¿úª¿úÕ¿úÙ¿ù	¿ù¿ù¿ùH¿ùX¿ù|¿ù≤¿ù”¿ùÊ¿ù¿ù˙¿û¿û3¿ûE¿ûo¿ûÑ¿ûê¿û©¿û‹¿û‚¿ûÚ¿ü(¿üM¿ür¿üÖ¿üè¿ü©¿üø¿ü¿¿ü˜¿†¿†!¿†%¿†&¿†r¿†ª¿°¿°T¿°•¿°“¿°ﬂ¿°˙¿°˚¿¢H¿¢w¿¢}¿¢≈¿£¿£V¿£\¿£¨¿£˚¿§*¿§0¿§Ä¿§∆¿•¿•(¿•5¿•X¿•Y¿•ò¿•⁄¿•‡¿¶/¿¶z¿¶≈¿¶˛¿ß¿ßC¿ßX¿ß^¿ßØ¿ß˛¿®*¿®7¿®O¿®P¿®í¿®ò¿®Á¿©2¿©}¿©∂¿©º¿™¿™]¿™´¿™¸¿´¿´¿´_¿´≠¿´Ú¿¨B¿¨ã¿¨√¿¨–¿¨Ë¿¨È¿≠0¿≠Ä¿≠Õ¿Æ¿Æ5¿Æ;¿Æå¿Æ⁄¿Ø+¿Øt¿Øz¿ØÀ¿∞¿∞!¿∞W¿∞d¿∞µ¿∞ÿ¿∞˚¿±&¿±O¿±Y¿±ã¿±Ø¿±π¿±…¿±ı¿±˚¿±ˇ¿≤ ¿≤¿≤¿≤R¿≤X¿≤•¿≤≤¿≤Í¿≥¿≥¿≥C¿≥I¿≥ñ¿≥¢¿≥‰¿¥¿¥¿¥U¿¥[¿¥¨¿¥ı¿µF¿µX¿µ^¿µÆ¿∂¿∂J¿∂û¿∂»¿∂Œ¿∑¿∑0¿∑6¿∑é¿∑µ¿∑∂¿∏¿∏<¿∏B¿∏í¿∏Ø¿∏⁄¿∏˙¿π¿π"¿π#¿π^¿πd¿π≤¿∫¿∫+¿∫1¿∫Ç¿∫–¿∫›¿ª	¿ª
¿ª+¿ª,¿ªk¿ªq¿ª¿¿ª∆¿º¿º`¿º±¿Ω ¿ΩK¿Ω[¿Ωa¿ΩÆ¿Ωÿ¿Ωﬁ¿æ1¿æÇ¿æœ¿ø!¿ø4¿øã¿øŸ¿¿+¿¿J¿¿p¿¿t¿¿u¿¿∫¿¿¿¿¡¿¡]¿¡™¿¡˘¿¬L¿¬ö¿¬‡¿√,¿√z¿√Ø¿√µ¿ƒ¿ƒP¿ƒö¿ƒÊ¿≈5¿≈Ñ¿≈£¿≈©¿≈¯¿∆E¿∆ë¿∆û¿∆´¿∆…¿«,¿«K¿«O¿«P¿«]¿«Ö¿«ë¿«´¿«Û¿»:¿»[¿»b¿»Ö¿»â¿»ä¿»‹¿»›¿…1¿…7¿…à¿…€¿…Î¿…Ò¿ ¿ A¿ ]¿ m¿ ê¿ £¿ ≠¿ ¿¿ ƒ¿ ≈¿À¿ÀX¿À^¿ÀÆ¿À˛¿Ã¿Ã¿ÃM¿Ãî¿Ã€¿Õ"¿Õg¿Õú¿Õ¢¿ÕÁ¿Œ-¿Œf¿Œê¿Œ≠¿Œ‘¿Œ‚¿ŒË¿œ¿œ2¿œb¿œí¿œ¢¿œ™¿œ´¿–¿–3¿–C¿–K¿–Q¿–é¿–ß¿–‚¿–Ë¿–Ï¿–Ì¿—.¿—r¿—x¿—…¿—Ò¿—˜¿“6¿“s¿“ë¿“Ô¿”¿”¿”¿”4¿”\¿”j¿”p¿”®¿”«¿”¿‘¿‘:¿‘\¿‘d¿‘l¿‘£¿‘√¿‘…¿’¿’c¿’Ø¿÷¿÷Q¿÷Ü¿÷°¿÷Ã¿◊!¿◊L¿◊d¿◊ü¿◊ ¿◊‚¿◊Ô¿ÿ¿ÿ ¿ÿ$¿ÿ%¿ÿd¿ÿj¿ÿª¿Ÿ¿ŸT¿Ÿç¿Ÿì¿Ÿ…¿Ÿœ¿⁄¿⁄j¿⁄Ø¿⁄˚¿€6¿€S¿€i¿€y¿€ï¿€®¿€≤¿€≈¿€…¿€ ¿€Â¿€Ê¿‹%¿‹+¿‹|¿‹»¿›¿›N¿›T¿›ä¿›∑¿›Õ¿››¿ﬁ	¿ﬁ¿ﬁ&¿ﬁ9¿ﬁ=¿ﬁ>¿ﬁj¿ﬁk¿ﬁ≤¿ﬁ∏¿ﬁ˝¿ﬂJ¿ﬂö¿ﬂÈ¿‡¿‡¿‡R¿‡é¿‡î¿‡‘¿·!¿·c¿·i¿·y¿·¿·Õ¿‚¿‚/¿‚I¿‚f¿‚ú¿‚≥¿‚¡¿‚«¿‚ﬂ¿„%¿„G¿„{¿„ç¿„ª¿‰¿‰¿‰!¿‰-¿‰p¿‰¶¿‰◊¿‰Ú¿Â¿ÂE¿ÂM¿Ân¿Âé¿Âõ¿Â≠¿Â€¿Ê8¿ÊB¿ÊW¿Êc¿Ê≠¿Ê˜¿Á;¿Áy¿ÁÇ¿Áø¿Á˛¿Ë"¿Ë(¿Ë,¿Ë-¿Ëz¿Ëá¿Ëç¿Ëﬁ¿È2¿È}¿ÈÃ¿Í¿Í¿Íl¿Íº¿Íﬂ¿ÍÂ¿Íı¿Í˚¿ÎK¿Îä¿Î¥¿Î—¿Ï¿Ï=¿ÏK¿ÏQ¿Ïy¿Ïø¿Ï·¿Ì¿ÌX¿Ìé¿Ì∏¿Ì”¿Ó ¿Ó&¿Ó.¿Ó;¿ÓS¿ÓY¿Ó]¿Ó^¿ÓÆ¿Ó¸¿ÔM¿Ôñ¿Ôœ¿ÔÚ¿¿'¿_¿á¿≤¿”¿ˆ¿Ò¿ÒI¿Ò†¿Ò±¿Òª¿ÒÏ¿ÚH¿ÚY¿Úc¿ÚÑ¿Úå¿Ú¶¿Ú¨¿Ú∞¿Ú±¿Ú¸¿Û¿ÛP¿Ûx¿Û~¿Û¬¿Û˙¿Ù¿Ù0¿ÙU¿Ù{¿Ùö¿Ù¬¿ÙÊ¿Ùˇ¿ı(¿ı,¿ı-¿ır¿ı≥¿ı≈¿ıÀ¿ˆ¿ˆA¿ˆ^¿ˆ~¿ˆî¿ˆπ¿ˆﬂ¿ˆ˛¿˜Q¿˜s¿˜ó¿˜≠¿˜±¿˜≤¿˜ı¿¯¿¯"¿¯D¿¯|¿¯¬¿¯ﬁ¿˘.¿˘K¿˘X¿˘t¿˘ø¿˘⁄¿˘Á¿˘Û¿˘˚¿˙¿˙¿˙d¿˙≤¿˚ ¿˚O¿˚õ¿˚Ë¿¸1¿¸I¿¸W¿¸]¿¸ì¿¸∆¿¸ÿ¿˝
¿˝X¿˝b¿˝w¿˝É¿˝◊¿˝›¿˝Ì¿˛¿˛<¿˛p¿˛ò¿˛Œ¿˛Ô¿ˇ¿ˇ#¿ˇ1¿ˇS¿ˇè¿ˇ´¿ˇ˚¿ ¿ -¿ f¿ ¨¿ Ã¿¿q¿µ¿∆¿#¿3¿?¿I¿Å¿ô¿Á¿ˇ¿¿(¿y¿≠¿∫¿÷¿$¿q¿±¿æ¿¿#¿+¿>¿H¿p¿Ä¿£¿”¿Û¿3¿F¿P¿i¿í¿ø¿…¿Á¿@¿ò¿±¿‹¿‚¿Ú¿¿E¿i¿|¿Ü¿º¿‡¿Ê¿Í¿Î¿	7¿	Å¿	á¿	◊¿	¿
¿
	¿
D¿
Å¿
Ç¿
Õ¿
”¿¿d¿≤¿ˇ¿%¿+¿y¿…¿¿.¿4¿Ä¿ ¿¿K¿É¿Ñ¿‘¿Ô¿ı¿E¿é¿î¿ﬁ¿*¿v¿ø¿¿D¿í¿¥¿∏¿π¿ ¿¿V¿¢¿Û¿¿¿Y¿¶¿Ú¿B¿í¿Ø¿‚¿¿¿¿¿Z¿•¿ª¿¡¿¿[¿v¿|¿Œ¿¿¿d¿¨¿’¿€¿&¿j¿ä¿ü¿•¿Ò¿@¿é¿›¿Ô¿ ¿6¿Ü¿ø¿∆¿¿(¿J¿ò¿∞¿–¿—¿Ô¿!¿"¿E¿m¿ë¿í¿¥¿‹¿˜¿O¿å¿ß¿Ø¿—¿˜¿\¿l¿Ü¿÷¿·¿¿4¿<¿B¿C¿_¿{¿û¿»¿  ¿ [¿ ¨¿ ¥¿ ∫¿ ‘¿!¿!¿!¿!,¿!`¿!°¿!Í¿!¿"¿"]¿"z¿"Ä¿"√¿"«¿"»¿#¿#Q¿#í¿#ò¿#Œ¿#‘¿$¿$A¿$G¿$ó¿$‰¿%4¿%n¿%∫¿%ª¿&¿&Q¿&ù¿&È¿':¿'Ü¿'—¿'ﬁ¿'‰¿(/¿(|¿(»¿(„¿(È¿):¿)à¿)÷¿*&¿*u¿*∫¿*¿¿*–¿*÷¿+"¿+^¿+§¿+•¿+¥¿+µ¿+¸¿,!¿,'¿,n¿,Ö¿,ã¿,‘¿,¯¿-¿-+¿-P¿-z¿-ö¿-Ω¿-È¿.¿.8¿.<¿.=¿.é¿.î¿.ﬂ¿.˚¿/¿/J¿/ï¿/‰¿0,¿0|¿0√¿0…¿0ﬂ¿0Â¿15¿1H¿1N¿1\¿1£¿1µ¿2¿2:¿2K¿2l¿2í¿2±¿2ª¿2¡¿2›¿2¯¿3¿3
¿3¿3&¿33¿3z¿3õ¿3ü¿3†¿3ı¿3˚¿4F¿4Å¿4á¿4¬¿4»¿5¿5O¿5x¿5Ü¿5å¿5Õ¿5˙¿6¿6M¿6S¿6W¿6X¿6Ü¿6ø¿6¿¿6˜¿7(¿7h¿7Æ¿7º¿7˙¿8J¿8æ¿8«¿8Õ¿8¯¿8¸¿8˝¿9=¿9g¿9Ç¿9É¿9‘¿9⁄¿:¿:-¿:E¿:Y¿:_¿:Å¿:Ö¿:Ü¿:´¿:»¿:…¿:Ù¿:˙¿;H¿;å¿;≥¿;π¿<¿<¿<9¿<R¿<k¿<q¿<Ç¿<Ü¿<á¿<–¿<÷¿=%¿=+¿=t¿=¿¿=—¿=Î¿>¿>$¿>M¿>k¿>s¿>w¿>x¿>¿¿>∆¿?¿?^¿?ä¿?Æ¿?À¿@¿@9¿@e¿@s¿@y¿@z¿@≈¿A¿A_¿A´¿A¨¿A“¿B.¿B/¿BQ¿Bü¿B‰¿C¿C¿C7¿CÉ¿C°¿C¢¿CÒ¿DA¿Dã¿D©¿D‘¿E¿EQ¿E`¿Eh¿Ei¿Eí¿E‰¿F5¿Fd¿Fé¿F∂¿Fæ¿Fø¿F„¿G9¿G~¿G—¿H#¿Hl¿H|¿HÑ¿Hä¿H—¿I"¿If¿Iµ¿J¿JT¿Jf¿J±¿J„¿JÈ¿K¿K9¿KT¿Kµ¿KÊ¿L¿L¿L¿L¿L¿L\¿Lx¿LÀ¿L„¿M1¿MÉ¿Më¿Mó¿M∞¿MÍ¿M¿N0¿Ny¿NΩ¿Nƒ¿N›¿O¿O¿O>¿O|¿OØ¿OÈ¿P)¿P*¿PC¿PÅ¿Pá¿P∞¿PÙ¿Q0¿Qs¿Qâ¿Q´¿Q≤¿QÀ¿QÔ¿Qı¿RB¿RN¿R≤¿Rπ¿RΩ¿Ræ¿S
¿S8¿S[¿S¿SÜ¿SÍ¿SÎ¿T.¿Tç¿TË¿UB¿U¶¿Uˇ¿VX¿V¶¿V“¿W*¿Wm¿W—¿X"¿XS¿Xô¿X‘¿XÒ¿YE¿Yw¿Y©¿Y≤¿YÔ¿Z¿Z6¿Zb¿Zå¿Zæ¿Z»¿Z–¿[.¿[R¿[i¿[û¿[®¿[ˆ¿\E¿\c¿\ò¿\—¿\‚¿]¿]¿]¿]Y¿]•¿]⁄¿^#¿^W¿^π¿^Ô¿_
¿_Q¿__¿_k¿_®¿_≤¿_∫¿_¬¿_√¿`¿`¿`.¿`}¿`†¿`®¿`ﬁ¿a3¿aP¿aY¿ax¿a‘¿b(¿bJ¿bî¿b ¿b˜¿cE¿cQ¿cl¿cx¿cÅ¿cŸ¿d¿dV¿dÖ¿d–¿dÁ¿dÚ¿d˙¿e ¿e¿e$¿e%¿eJ¿em¿eï¿eµ¿eÁ¿f,¿fr¿fô¿fÆ¿f˘¿g¿g,¿gX¿gê¿g€¿g‰¿gÒ¿h6¿h|¿h©¿h¡¿hÌ¿i¿iO¿id¿iØ¿i∏¿iﬂ¿j=¿j`¿jh¿jn¿jì¿j¶¿j™¿j´¿jŒ¿k¿k ¿k'¿kÜ¿kª¿kˇ¿l)¿l;¿lC¿lò¿lº¿lƒ¿lÁ¿m¿mg¿m±¿m◊¿n¿n¿n¿n¿ne¿nÜ¿nå¿nê¿në¿n ¿n–¿o ¿oi¿o{¿oÅ¿o∫¿o˛¿p>¿pZ¿p^¿p_¿põ¿p°¿p–¿q!¿qk¿qª¿qÊ¿qÏ¿r8¿rP¿rV¿r£¿rÓ¿s¿s=¿sU¿sx¿sû¿s§¿sƒ¿t=¿t†¿t§¿t•¿t±¿t≤¿u¿u¿uW¿uX¿ui¿uj¿u∏¿v ¿v¿v¿v\¿v®¿vΩ¿w¿w\¿w™¿w◊¿x¿x¿x¿xo¿x£¿x§¿xœ¿x€¿xˆ¿y"¿y;¿yW¿yv¿yç¿yï¿yŸ¿y¿z¿zW¿zy¿zè¿zô¿z…¿z—¿zÎ¿{¿{¿{/¿{Q¿{Y¿{Ç¿{∂¿{æ¿{’¿{Ù¿{¸¿|¿|¿|¿|¿|&¿|¿|Ä¿|Ω¿}¿},¿}8¿}P¿}o¿}í¿}»¿}‡¿}Á¿~¿~1¿~W¿~É¿~ü¿~Ω¿~∆¿~Õ¿~—¿~“¿¿E¿K¿ñ¿“¿ﬁ¿ÄC¿Äm¿Ä¥¿Äª¿Äø¿Ä¿¿ÄÕ¿ÄŸ¿Å¿ÅI¿Å]¿Åº¿Å√¿Å◊¿Å˚¿Ç¿Ç$¿Ç@¿Çf¿Ço¿Çv¿Çä¿Ç±¿Ç«¿Ç€¿É'¿ÉD¿ÉM¿ÉT¿Éh¿É¬¿É…¿Ñ(¿Ñ<¿Ñò¿Ñü¿Ñ≥¿Ö¿Ö¿Ö*¿Ö>¿Öu¿Ö…¿Ü!¿Ü*¿Ü1¿ÜE¿ÜY¿Üw¿Ü≤¿Ü◊¿Ü‡¿ÜÁ¿ÜÎ¿ÜÏ¿Ü¯¿á@¿áA¿áí¿á£¿á©¿áÙ¿à8¿à>¿àé¿àÕ¿â¿âe¿â™¿â ¿â–¿ä¿ä]¿äc¿äs¿äy¿ä≈¿ä˛¿ã¿ã2¿ãB¿ãi¿ãà¿ãè¿ã±¿ãÕ¿ãı¿å	¿å%¿å;¿åD¿åJ¿åN¿åO¿å†¿å∂¿åº¿ç¿ç[¿çâ¿çè¿çﬂ¿é,¿éP¿éc¿é¢¿é©¿é·¿éÂ¿éÁ¿éË¿è¿è!¿èb¿è¢¿è¶¿èÎ¿ê¿êh¿êπ¿êﬁ¿ê‰¿ë¿ë¿ë4¿ëd¿ët¿ëï¿ëÕ¿ëÂ¿í6¿íi¿ív¿íí¿íﬁ¿ì)¿ì{¿ìÃ¿ìŸ¿ìÚ¿î¿îj¿îÑ¿îª¿î»¿î·¿ï	¿ï\¿ïz¿ïö¿ï—¿ïﬁ¿ïÍ¿ïÚ¿ñ¿ñ¿ñ ¿ñ$¿ñ%¿ñ:¿ñ;¿ñc¿ñÖ¿ñ•¿ñø¿ñŸ¿ñﬂ¿ñÛ¿ó¿ó(¿ó.¿ó2¿ó3¿ó?¿ód¿ó}¿óò¿óú¿óù¿ó©¿óª¿óœ¿óÂ¿óÈ¿óÍ¿óˆ¿ò¿ò+¿òH¿òN¿òR¿òS¿ò_¿òì¿ò≠¿ò≈¿òÀ¿òœ¿ò–¿ò‹¿ô¿ô'¿ôl¿ôã¿ôè¿ôë¿ôí¿ôœ¿ô”¿ö¿ö`¿öú¿ö»¿õ¿õN¿õl¿õm¿õ†¿õ∫¿õª¿õ›¿õÈ¿õ˚¿ú¿ú&¿úp¿úw¿ú‹¿ú¿úÙ¿úˆ¿ú˜¿ù5¿ù9¿ùä¿ù†¿ù§¿ù˜¿û¿û¿û`¿û¨¿û·¿ü/¿ü3¿üÜ¿üÿ¿üÈ¿üÌ¿†S¿†W¿†e¿†i¿†≤¿†”¿†ı¿°¿°T¿°V¿°l¿°ª¿¢¿¢;¿¢s¿¢£¿¢‡¿¢Ê¿£¿£¿£¿£R¿£ú¿£Œ¿§¿§.¿§k¿§q¿§ç¿§ë¿§í¿§©¿§™¿§»¿§Ì¿§Ó¿•?¿•d¿•j¿•ô¿•ü¿•∫¿•Í¿•˙¿¶¿¶S¿¶k¿¶º¿¶Ô¿¶¸¿ß¿ßd¿ßØ¿®¿®R¿®_¿®x¿®†¿®¿©
¿©A¿©N¿©g¿©è¿©‚¿™ ¿™ ¿™W¿™d¿™p¿™x¿™ã¿™ï¿™¶¿™™¿™´¿™≈¿™ﬁ¿´!¿´q¿´¢¿´◊¿´Ì¿¨
¿¨#¿¨N¿¨¿¨†¿≠ ¿≠6¿≠>¿≠Y¿≠u¿≠Ç¿≠•¿≠«¿Æ¿ÆX¿Æ™¿Æ€¿Ø-¿ØR¿ØÉ¿Ø∞¿ØÃ¿Ø€¿∞%¿∞T¿∞ó¿∞»¿∞˜¿±5¿±Å¿±ª¿≤¿≤?¿≤{¿≤±¿≤π¿≤ø¿≤√¿≤ƒ¿≥¿≥¿≥i¿≥õ¿≥–¿¥¿¥)¿¥>¿¥®¿¥Ø¿¥˛¿µ ¿µA¿µX¿µd¿µé¿µÁ¿∂B¿∂ò¿∂ü¿∂Œ¿∂“¿∂”¿∑¿∑3¿∑Y¿∑]¿∑^¿∑®¿∑”¿∑Ô¿∑Û¿∑Ù¿∏#¿∏s¿∏º¿π ¿π¿πQ¿πu¿π¶¿π≥¿πÔ¿∫9¿∫â¿∫è¿∫æ¿∫·¿ª¿ª"¿ªZ¿ª†¿ªÙ¿ª˙¿º&¿ºN¿ºd¿ºh¿ºi¿ºñ¿ºú¿º÷¿º˜¿Ω¿Ω.¿Ω2¿Ω3¿Ωy¿Ω¿Ωµ¿Ω ¿ΩÓ¿æ
¿æ\¿æó¿æ≈¿æÔ¿ø¿ø¿ø!¿ø9¿øP¿øe¿øi¿øj¿ø¥¿ø∫¿¿	¿¿Z¿¿è¿¿¬¿¿›¿¿¯¿¡¿¡6¿¡Ü¿¡∫¿¡»¿¡Œ¿¡Ô¿¬¿¬5¿¬9¿¬:¿¬F¿¬k¿¬Ñ¿¬®¿¬ƒ¿¬ﬂ¿√1¿√\¿√b¿√f¿√g¿√s¿√Ö¿√ô¿√Ω¿√Ÿ¿√Ô¿ƒA¿ƒl¿ƒr¿ƒv¿ƒw¿ƒÉ¿ƒû¿ƒ¬¿ƒﬁ¿ƒ˘¿≈K¿≈v¿≈|¿≈Ä¿≈Å¿≈ç¿≈¡¿≈Â¿∆¿∆¿∆i¿∆î¿∆ö¿∆û¿∆ü¿∆»¿∆Ù¿∆ı¿«¿«G¿«H¿«ã¿«∑¿«Ÿ¿»)¿»U¿»Y¿»Z¿»ò¿»√¿»Â¿…5¿…]¿…a¿…b¿…n¿…†¿…‡¿…˛¿ #¿ 8¿ M¿ í¿ ¥¿ ≈¿ œ¿ „¿À7¿Àe¿Àm¿Às¿Àà¿Àå¿Àé¿Àè¿Àﬂ¿À¯¿À¸¿ÃI¿Ãò¿ÃΩ¿Ã¯¿Õ8¿Õ>¿Õ¿Õ¬¿Œ¿Œd¿Œj¿ŒÆ¿ŒÕ¿Œ”¿œ#¿œB¿œO¿œ`¿œÄ¿œó¿œõ¿œú¿œ‘¿œ˙¿–¿–M¿–¥¿–¯¿–ˇ¿—2¿—@¿—F¿—z¿—≈¿—¸¿“3¿“A¿“n¿“”¿“‹¿“Ú¿”¿”¿”"¿”&¿”'¿”3¿”X¿”q¿”æ¿‘¿‘\¿‘í¿‘‰¿‘Ë¿‘È¿‘ı¿’¿’=¿’í¿’¶¿’™¿’¨¿’≠¿’˙¿÷¿÷
¿÷-¿÷~¿÷ù¿÷Ô¿◊;¿◊_¿◊ß¿◊®¿◊Ë¿ÿ*¿ÿ+¿ÿr¿ÿ√¿ÿ…¿ÿŸ¿ÿﬂ¿Ÿ-¿Ÿk¿Ÿö¿Ÿõ¿ŸË¿⁄)¿⁄e¿⁄g¿⁄h¿⁄µ¿⁄Ë¿⁄Ï¿€5¿€Z¿€ô¿€π¿€Ó¿‹¿‹¿‹¿‹a¿‹b¿‹n¿‹±¿‹Ÿ¿‹›¿‹ﬁ¿‹Í¿›L¿›N¿›O¿›ù¿›Â¿›È¿ﬁ:¿ﬁã¿ﬁπ¿ﬂ¿ﬂ%¿ﬂF¿ﬂ{¿ﬂ™¿ﬂ´¿ﬂ˘¿‡¿‡D¿‡E¿‡p¿‡q¿‡ü¿‡•¿‡µ¿‡ª¿·
¿·>¿·â¿·π¿‚¿‚4¿‚M¿‚y¿‚°¿‚ ¿‚Û¿„"¿„(¿„)¿„w¿„ª¿„·¿„‚¿‰-¿‰D¿‰J¿‰ò¿‰“¿‰Î¿‰Ï¿Â¿Â¿Âd¿Âµ¿ÂÓ¿ÂÙ¿Ê>¿ÊÅ¿Êç¿Êœ¿Ê–¿Á ¿Á7¿Áh¿Ái¿Áu¿Á⁄¿Á€¿Ë¿Ë¿ËE¿ËK¿Ëk¿Ëô¿Ë∂¿Ë·¿È¿È	¿È
¿ÈM¿ÈS¿Èö¿ÈË¿Í¿Í
¿ÍS¿Íê¿Íº¿Íﬁ¿Í‚¿Í‰¿ÍÂ¿Î6¿ÎN¿ÎR¿Î°¿Î≤¿Î˜¿ÏZ¿Ï[¿Ïg¿ÏÄ¿Ï£¿Ï¬¿ÏÎ¿Ì¿ÌC¿ÌJ¿Ìç¿Ì∫¿Ì„¿Ó¿Ó3¿Ó4¿Óa¿Óâ¿Ó¥¿Óª¿ÓÌ¿Ô7¿Ôi¿Ôó¿Ôò¿Ôæ¿Ôø¿Ô˚¿A¿h¿à¿¬¿Ù¿Ò¿Ò0¿ÒT¿Ò]¿Òc¿Ò∞¿Ò“¿Ú¿Ú¿Úk¿Ú∂¿Û¿ÛS¿Ûa¿Ûî¿Û™¿ÛÆ¿ÛØ¿Ûª¿ÛÈ¿ÛÍ¿ÙE¿ÙF¿ÙR¿Ùl¿Ùö¿Ùû¿Ùü¿Ù´¿ÙÓ¿ı¿ı¿ı¿ı¿ı]¿ı´¿ıØ¿ˆ¿ˆ<¿ˆá¿ˆ‘¿˜
¿˜¿˜¿˜Z¿˜í¿˜ñ¿˜ó¿˜£¿˜º¿˜Ë¿¯¿¯9¿¯b¿¯ë¿¯ò¿¯‰¿˘¿˘¿˘¿˘¿˘9¿˘:¿˘F¿˘`¿˘l¿˘y¿˘§¿˘Ò¿˙¿˙¿˙¿˙¿˙¿˙l¿˙ê¿˙î¿˙‹¿˚*¿˚M¿˚Q¿˚õ¿˚Í¿¸8¿¸â¿¸’¿˝¿˝¿˝b¿˝Æ¿˝ˆ¿˛¿˛V¿˛w¿˛ö¿˛æ¿˛Í¿ˇ5¿ˇO¿ˇÑ¿ˇµ¿ˇ‡¿ˇ˙¿ 8¿ Y¿ Ö¿ ã¿ è¿ ê¿ Ø¿ —¿ Û¿¿¿\¿]¿x¿õ¿∫¿⁄¿˘¿ˇ¿R¿d¿É¿û¿À¿¿j¿∂¿…¿ ¿¿_¿Ü¿»¿ ¿6¿d¿ö¿÷¿#¿:¿h¿§¿Ê¿ ¿2¿î¿⁄¿¿G¿i¿î¿£¿Ô¿˚¿	+¿	d¿	Ü¿	≠¿	º¿
 ¿
¿
I¿
à¿
î¿
û¿
¶¿
Ì¿"¿d¿¶¿∞¿◊¿‰¿¸¿¿,¿t¿¨¿›¿#¿L¿z¿Ü¿ê¿¿¿⁄¿‚¿Ë¿Ï¿Ì¿H¿I¿U¿n¿ë¿∞¿Ÿ¿¿1¿8¿g¿≥¿¿U¿[¿s¿í¿≥¿ª¿’¿ˆ¿¿)¿C¿L¿ù¿„¿¿i¿∑¿Ì¿¿F¿ê¿æ¿ ¿‘¿¿6¿r¿¶¿Ù¿C¿í¿⁄¿Ù¿¿%¿-¿;¿A¿B¿Ü¿æ¿Ó¿ı¿ˆ¿8¿v¿|¿}¿ú¿Î¿¿¿E¿k¿å¿º¿¬¿√¿ﬂ¿¿¿-¿V¿ï¿Õ¿¿(¿I¿Q¿W¿ì¿´¿œ¿Ô¿¿¿"¿q¿ß¿Û¿?¿s¿ó¿»¿¿<¿F¿N¿ï¿µ¿Ù¿+¿M¿g¿ê¿ô¿«¿Õ¿Œ¿Ù¿0¿=¿å¿í¿®¿Ô¿ +¿ }¿ œ¿ ˇ¿!,¿!Z¿!Ä¿!Ø¿!‰¿!Ï¿!Ú¿"¿"-¿"1¿"2¿"d¿"ê¿"∏¿"ø¿"ﬂ¿"˝¿#9¿#m¿#í¿#ú¿#¨¿#∞¿#±¿#Ω¿#‰¿$¿$¿$¿$¿$a¿$ß¿$∆¿$Î¿$˝¿%¿%&¿%N¿%T¿%X¿%Y¿%e¿%ì¿%¨¿%˙¿&C¿&^¿&¿&Æ¿&¥¿&∏¿&π¿&‹¿&˙¿'¿':¿'@¿'D¿'E¿'a¿'b¿'n¿'à¿'†¿'§¿'•¿'„¿'Â¿'Ê¿(.¿(2¿(Ä¿(∏¿(”¿)¿)!¿)p¿)Ω¿*¿*^¿*u¿*°¿*…¿*Ù¿*˚¿+H¿+L¿+M¿+e¿+Å¿+ú¿+Ø¿+∞¿+€¿,¿,¿,<¿,q¿,r¿,ß¿,‘¿,’¿,˚¿-¿-¿-m¿-s¿-É¿-â¿-Ó¿.V¿.m¿.ê¿.Ø¿.—¿.◊¿.˘¿.˙¿/¿/Q¿/{¿/|¿/¿¿/˝¿0=¿0ì¿0î¿0”¿1¿1m¿1Ü¿1Â¿1Ù¿2@¿2î¿2ü¿2Û¿3?¿3@¿3x¿3∫¿3‹¿4¿4¿4P¿4ú¿4º¿4Î¿5¿5H¿5Ü¿5›¿5ˇ¿6¿6¿6¿6#¿6$¿6T¿6≠¿6œ¿7¿7I¿7e¿7Ä¿7à¿7é¿7í¿7ì¿7¡¿8 ¿8¿8+¿81¿8_¿8w¿8}¿8ª¿8ø¿8¿¿8ˇ¿9L¿9X¿9]¿9≠¿9Ï¿:¿:C¿:h¿:¿:Ö¿:≥¿:ﬂ¿;
¿;¿;.¿;V¿;z¿;{¿;ù¿;≠¿;Ã¿<'¿<2¿<h¿<°¿<º¿<ƒ¿<Ê¿<ˆ¿=¿=n¿=y¿=´¿>¿>$¿>,¿>2¿>3¿>f¿>°¿>ﬁ¿>Ì¿?
¿?¿?¿?¿?¿?S¿?X¿?ß¿?æ¿?√¿@¿@\¿@ü¿@†¿@Ï¿A:¿A?¿Aè¿A∏¿A—¿AÍ¿B¿B%¿BD¿BJ¿Bw¿Bƒ¿BÏ¿C>¿CÄ¿CÅ¿C”¿C¯¿D9¿DZ¿Da¿Db¿DÑ¿D•¿D≤¿D‘¿E¿EN¿E£¿E©¿E≠¿EÆ¿E·¿Eˆ¿F¿F¿F-¿F1¿F2¿FÖ¿F–¿FÌ¿G¿G8¿G<¿G=¿Gà¿G“¿GÎ¿GÒ¿H;¿H}¿HÉ¿Hì¿Hô¿HË¿I¿I0¿I2¿I3¿Iá¿Iã¿I‚¿J2¿JE¿Jâ¿J‘¿J˜¿K¿Kb¿Kd    
ParentDataPaintingContextConstraints_LocalSemanticsHandlePipelineOwnerPipelineManifold_flutterRenderingLibraryRenderObjectRenderObjectWithChildMixinContainerParentDataMixinContainerRenderObjectMixin"RelayoutWhenSystemFontsChangeMixin_SemanticsFragment_ContainerSemanticsFragment_InterestingSemanticsFragment_RootSemanticsFragment_IncompleteSemanticsFragment_SwitchableSemanticsFragment_SemanticsGeometryDiagnosticsDebugCreator2flutter.rendering.PaintingContext.pushLayer.offsetÅThe `offset` is the offset to pass to the `painter`. In particular, it is
not an offset applied to the layer itself. Layers conceptually by default
have no position or size, though they can transform their contents. For
example, an [OffsetLayer] applies an offset to its children.?flutter.rendering.PaintingContext.pushClipRect.needsCompositingÅˇThe `needsCompositing` argument specifies whether the child needs
compositing. Typically this matches the value of
[RenderObject.needsCompositing] for the caller. If false, this method
returns null, indicating that a layer is no longer necessary. If a render
object calling this method stores the `oldLayer` in its
[RenderObject.layer] field, it should set that field to null.

When `needsCompositing` is false, this method will use a more efficient
way to apply the layer effect than actually creating a layer.5flutter.rendering.PaintingContext.pushClipRect.offsetÄÖThe `offset` argument is the offset from the origin of the canvas'
coordinate system to the origin of the caller's coordinate system.7flutter.rendering.PaintingContext.pushClipRect.oldLayerÅ–For the `oldLayer` argument, specify the layer created in the previous
frame. This gives the engine more information for performance
optimizations. Typically this is the value of [RenderObject.layer] that a
render object creates once, then reuses for all subsequent frames until a
layer is no longer needed (e.g. the render object no longer needs
compositing) or until the render object changes the type of the layer
(e.g. from opacity layer to a clip rect layer).,flutter.rendering.RenderObject.performResizeÅ|Updates the render objects size using only the constraints.

Do not call this function directly: call [layout] instead. This function
is called by [layout] when there is actually work to be done by this
render object during layout. The layout constraints provided by your
parent are available via the [constraints] getter.

This function is called only if [sizedByParent] is true.-flutter.rendering.RenderObject.getTransformToÇÕApplies the paint transform from this [RenderObject] to the `target`
[RenderObject].

Returns a matrix that maps the local paint coordinate system to the
coordinate system of `target`, or a [Matrix4.zero] if the paint transform
can not be computed.

This method throws an exception when the `target` is not in the same render
tree as this [RenderObject], as the behavior is undefined.

This method ignores [RenderObject.paintsChild]. This means it will still
try to compute the paint transform even if this [RenderObject] or
`target` is currently not visible.

If `target` is null, this method returns a matrix that maps from the
local paint coordinate system to the coordinate system of the
[PipelineOwner.rootNode]. 
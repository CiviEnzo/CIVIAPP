Ä«shouldPainttoStringbuildHandlegetHandleAnchorbuildToolbargetHandleSizecanCutcanCopycanPastecanSelectAll	handleCut
handleCopyhandlePastehandleSelectAllcontextrenderObjectselectionControlsselectionDelegate_selectionOverlaycontextMenuBuildervalue_value
_selection_effectiveStartHandleVisibility_effectiveEndHandleVisibility_effectiveToolbarVisibility'_updateTextSelectionOverlayVisibilitieshandlesVisible_handlesVisibleshowHandleshideHandlesshowToolbar showSpellCheckSuggestionsToolbarshowMagnifierupdateMagnifierhideMagnifierupdate_updateSelectionOverlayupdateForScrollhandlesAreVisibletoolbarIsVisiblemagnifierIsVisiblespellCheckToolbarIsVisiblehidehideToolbardispose_getStartGlyphHeight_getEndGlyphHeight_buildMagnifier_endHandleDragPosition_endHandleDragTarget_dragStartSelection"_handleSelectionEndHandleDragStart_getHandleDy#_handleSelectionEndHandleDragUpdate_startHandleDragPosition_startHandleDragTarget$_handleSelectionStartHandleDragStart%_handleSelectionStartHandleDragUpdate_handleAnyDragEnd_handleSelectionHandleChanged_chooseType_magnifierInfo_magnifierControllermagnifierConfigurationstartHandleType_startHandleTypelineHeightAtStart_lineHeightAtStart_isDraggingStartHandlestartHandlesVisibleonStartHandleDragStart_handleStartHandleDragStart_handleStartHandleDragUpdateonStartHandleDragUpdateonStartHandleDragEnd_handleStartHandleDragEndendHandleType_endHandleTypelineHeightAtEnd_lineHeightAtEnd_isDraggingEndHandleendHandlesVisibleonEndHandleDragStart_handleEndHandleDragStart_handleEndHandleDragUpdateonEndHandleDragUpdateonEndHandleDragEnd_handleEndHandleDragEndtoolbarVisibleselectionEndpoints_selectionEndpointsdebugRequiredFortoolbarLayerLinkstartHandleLayerLinkendHandleLayerLinkdragStartBehavioronSelectionHandleTappedclipboardStatustoolbarLocation_toolbarLocationfadeDuration_handles_toolbar_contextMenuController_spellCheckToolbarController_buildScheduledmarkNeedsBuild_buildStartHandle_buildEndHandle_buildToolbarchildoffset	layerLink
visibilitycreateState_controller_opacity	initStatedidUpdateWidget_toolbarVisibilityChangedbuildhandleLayerLinkonSelectionHandleDragStartonSelectionHandleDragUpdateonSelectionHandleDragEndpreferredLineHeighttype_handleVisibilityChanged_getHandleRecteditableTextKeyforcePressEnabledselectionEnableddelegate#_showMagnifierIfSupportedByPlatform#_hideMagnifierIfSupportedByPlatform_lastSecondaryTapWasOnSelection _positionWasOnSelectionExclusive _positionWasOnSelectionInclusive_expandSelection_extendSelectionshouldShowSelectionToolbar_shouldShowSelectionToolbareditableTextrenderEditable_isShiftPressed_dragStartScrollOffset_dragStartViewportOffset_scrollPosition_scrollDirection_longPressStartedWithoutFocusonTapTrackStartonTapTrackReset	onTapDownonForcePressStartonForcePressEndonUserTapAlwaysCalled	onUserTaponSingleTapUponSingleTapCancelonSingleLongTapStartonSingleLongTapMoveUpdateonSingleLongTapEndonSecondaryTaponSecondaryTapDownonDoubleTapDown_selectParagraphsInRange_selectLinesInRange_moveToTextBoundary_selectTextBoundariesInRangeonTripleTapDownonDragSelectionStartonDragSelectionUpdateonDragSelectionEndbuildGestureDetectorbehavior _getEffectiveConsecutiveTapCount_handleTapTrackStart_handleTapTrackReset_handleTapDown_handleTapUp_handleTapCancel_handleDragStart_handleDragUpdate_handleDragEnd_forcePressStarted_forcePressEnded_handleLongPressStart_handleLongPressMoveUpdate_handleLongPressEnd	_disposedaddListenerremoveListenerdidChangeAppLifecycleState	pasteableunknownnotPasteableenableddisabledToolbarBuilderToolbarItemsParentDataTextSelectionControlsEmptyTextSelectionControlsemptyTextSelectionControlsTextSelectionOverlaySelectionOverlay_SelectionToolbarWrapper_SelectionToolbarWrapperState_SelectionHandleOverlay_SelectionHandleOverlayState+TextSelectionGestureDetectorBuilderDelegate#TextSelectionGestureDetectorBuilderTextSelectionGestureDetector"_TextSelectionGestureDetectorStateClipboardStatusNotifierClipboardStatusLiveTextInputStatusNotifierLiveTextInputStatusTextSelectionHandleControlsÅÊTextSelectionPointTextSelectionDelegateTextSelectionToolbartoolbarBuilderCupertinoTextSelectionToolbarWidgetBuildContextContainerBoxParentData	RenderBoxbooloverrideStringtoStringEditableTextcontextMenuBuilderselectionControlsSelectionAreaonTapcupertinoTextSelectionControlsTextSelectionHandleTypedoubleVoidCallbackOffsetRenderEditablepreferredLineHeight
DeprecatedRectListValueListenableSize	Clipboard
cutEnabledtextEditingValue	selectionisCollapsedcopyEnabledpasteEnabledselectAllEnabledtext
isNotEmptycutSelectionvoidSelectionChangedCausetoolbarcopySelection	pasteTextFuture	selectAllMaterialTextSelectionControlszeroshrinkmaterialTextSelectionControlsOverlayTextEditingValue	LayerLinkDragStartBehaviorstartTextMagnifierConfiguration kFlutterMemoryAllocationsEnabledFlutterMemoryAllocationsinstancedispatchObjectCreatedlibrary	classNameobjectselectionStartInViewportaddListenerselectionEndInViewportmagnifierConfigurationcontextdebugRequiredForstartHandleType	collapsedstartHandlesVisiblelineHeightAtStartonStartHandleDragStartonStartHandleDragUpdateonEndHandleDragEndendHandleTypeendHandlesVisiblelineHeightAtEndonEndHandleDragStartonEndHandleDragUpdateonStartHandleDragEndtoolbarVisibleselectionEndpointsselectionDelegateclipboardStatusstartHandleLayerLinkendHandleLayerLinktoolbarLayerLinkonSelectionHandleTappeddragStartBehaviortoolbarLocationlastSecondaryTapDownPositionWidgetBuildervisibleForTestingTextSelectionValueNotifiervalueshowHandleshideHandlesshowToolbarmounted showSpellCheckSuggestionsToolbarbuilderTextPositiongetPositionForPointshowMagnifiercurrentTextPositionglobalGesturePositionrenderEditableupdateMagnifierhideMagnifierSchedulerBindingschedulerPhaseSchedulerPhasepersistentCallbacksWidgetsBinding	drawFramemarkNeedsBuildtextDirectionleftrightgetEndpointsForSelection_handlestoolbarIsVisible_magnifierControllershown_spellCheckToolbarControllerisShownhidehideToolbardispatchObjectDisposeddisposeremoveListenerint	plainTextisValid
textInside
charactersfirstlengthgetRectForComposingRange	TextRangeendheightlastMagnifierInfogetLineAtOffsetoffsetextentOffsetaffinityTextAffinityupstream
baseOffset
fromPointsgetLocalRectForCaret	topCenterbottomCenterofrootOverlayfindRenderObjectMatrix4getTransformToMatrixUtilstransformRectglobalToLocalfieldBoundspaintBounds	caretRectcurrentLineBoundariesDragStartDetailsattachedglobalPositiondypointlocalToGlobaldxabsfloorDragUpdateDetailsfromPositiondefaultTargetPlatformTargetPlatformiOSmacOSdragStartSelectionNormalizedandroidfuchsialinuxwindowsextentbaseDragEndDetailsuserUpdateTextEditingValuecopyWithdragTextDirectionltrrtldisableddebugCheckHasOverlayemptyMagnifierControllermagnifierBuildershowbelowshouldDisplayHandlesInMagnifieroverlayEntryFadeTransitionValueChangedkindPointerDeviceKindtouchcall
listEqualsHapticFeedbackselectionClickCompositedTransformTargetdownDragGestureRecognizerbuildHandleCupertinoTextSelectionControlsgetDataDurationmillisecondsOverlayEntryContextMenuControllerOverlayStateCapturedThemesInheritedThemecapturefromtowrap	insertAllremoveinsert
visibility	layerLinkchildaddPostFrameCallback
debugLabeltypehandleLayerLinkonSelectionHandleDragStartonSelectionHandleDragUpdateonSelectionHandleDragEndTextFieldTapRegionExcludeSemanticssizebottomRightwidthtopLeftBuilderbuildToolbarStatefulWidgetStateSingleTickerProviderStateMixinAnimationController	Animationview	initStatedurationfadeDurationvsyncwidgetdidUpdateWidgetforwardreverseDirectionalityopacityCompositedTransformFollowerlinkshowWhenUnlinkedkMinInteractiveDimensiongetHandleSizefromLTWHexpandToInclude
fromCirclecenterradiusRelativeRectfromLTRBmaxgetHandleAnchortopSizedBoxAlign	alignment	AlignmentRawGestureDetectorbehaviorHitTestBehaviortranslucentgesturesTypeGestureRecognizerFactoryPanGestureRecognizer$GestureRecognizerFactoryWithHandlers
debugOwnersupportedDevicesstylusunknowngestureSettingsDeviceGestureSettings	touchSloponStartonUpdateonEndPaddingpadding
EdgeInsetsonlybottom	TextFieldCupertinoTextField	GlobalKeyEditableTextState	protectedfromSelectioneditableTextKeycurrentStateRenderObjectPointerDownEventBaseTapAndDragGestureRecognizer
ScrollableScrollableStatecurrentContextmaybeOfpositionpixelsAxisDirectionaxisDirectiononTapTrackStartHardwareKeyboardlogicalKeysPressedintersectionLogicalKeyboardKey	shiftLeft
shiftRightonTapTrackReset	onTapDownhandleTapDownTapDragDownDetailsselectionEnabledTapDownDetailsstylusHandwritingEnabledinvertedStylusScribeisFeatureAvailablethenisAvailableselectPositioncausescribblestartStylusHandwritinghasFocustaponForcePressStartForcePressDetailsforcePressEnabledselectWordsInRange
forcePressonForcePressEnd	onUserTaponUserTapAlwaysCalledonSingleTapUpTapDragUpDetailsrequestKeyboardmousetrackpadtextPositionpreviousSelectionfindSuggestionSpanAtCursorIndexwordAtCursorIndexIsMisspelled
selectWordtoggleToolbarisAffinityTheSamereadOnlyselectWordEdgeonSingleTapCancelonSingleLongTapStartLongPressStartDetails	longPressFeedbackforLongPressselectPositionAtRawFloatingCursorPointstateFloatingCursorDragStateStartstartLocationupdateFloatingCursoronSingleLongTapMoveUpdateLongPressMoveUpdateDetailsmaxLinesaxisDirectionToAxisAxis
horizontalverticaloffsetFromOriginUpdateonSingleLongTapEndLongPressEndDetailsEndonSecondaryTaponSecondaryTapDownhandleSecondaryTapDownonDoubleTapDown	doubleTapTextBoundaryParagraphBoundaryboundaryLineBoundarygetLeadingTextBoundaryAtgetTrailingTextBoundaryAtonTripleTapDownonDragSelectionStartTapDragStartDetails _getEffectiveConsecutiveTapCountconsecutiveTapCountonDragSelectionUpdateTapDragUpdateDetailsonDragSelectionEndTapDragEndDetailsKeykeyGestureDetectorGestureTapDragDownCallbackForcePressGestureRecognizerstartPressureGestureForcePressStartCallbackGestureForcePressEndCallbackGestureTapCallbackGestureTapDownCallbackGestureTapDragUpCallbackGestureCancelCallbackkLongPressTimeoutGestureLongPressStartCallback"GestureLongPressMoveUpdateCallbackGestureLongPressEndCallbackkDoubleTapTimeoutGestureTapDragStartCallbackGestureTapDragUpdateCallbackGestureTapDragEndCallbackdeferToChildminMapTapGestureRecognizerLongPressGestureRecognizeronLongPressStartonLongPressMoveUpdateonLongPressEnd%TapAndHorizontalDragGestureRecognizereagerVictoryOnDragonDragStartonDragUpdate	onDragEndonTapUponCancelTapAndPanGestureRecognizerexcludeFromSemanticsWidgetsBindingObserver
hasStringsFlutterErrorreportErrorFlutterErrorDetails	exceptionstackErrorDescription	pasteablenotPasteablehasListenersaddObserverremoveObserverAppLifecycleStateresumeddetachedinactivehiddenpausedLiveTextisLiveTextInputAvailableenabledContainerBoxParentDataTextSelectionControlsStatefulWidgetStateSingleTickerProviderStateMixinValueNotifierWidgetsBindingObserver-«z˜	˘<r˚Úüë¥ÇÑÑ(TextSelectionPoint ÉÈpackage:flutter/rendering.dartÑQÑkTextSelectionDelegate Ñ*package:flutter/services.dart   Å   
dart:async  Å&   Å8Å;mathÅ;	dart:math  ÅC   "package:characters/characters.dart  Åp   package:flutter/foundation.dart  Åö   package:flutter/gestures.dart  Å¬   package:flutter/rendering.dart  ÅÎ   package:flutter/scheduler.dart  Ç   package:flutter/services.dart  Ç=   
basic.dart  ÇR   binding.dart  Çi   constants.dart  ÇÇ   context_menu_controller.dart  Ç©   
debug.dart  Çæ   editable_text.dart  Ç€   feedback.dart  ÇÛ   framework.dart  É   gesture_detector.dart  É,   inherited_theme.dart  ÉK   magnifier.dart  Éd   overlay.dart  É{   scrollable.dart  Éï   tap_region.dart  ÉØ   ticker_provider.dart  ÉŒ   transitions.dart¿ ‚ñ ¿3é˙ <ÄÜÄ§Ä•Ä÷ÅÅÅÅ%ÅAÅBÅoÅôÅ¡ÅÍÇÇ;Ç<ÇQÇhÇÅÇ®ÇΩÇ⁄ÇÚÉÉ+ÉJÉcÉzÉîÉÆÉÕÉËÉÈÑ*ÑmÑnÑªÑ∆Ñ ÑÿÑ‹Ö"Ö0Ö~Ö•ÖÛÖÙÜDÜHÜôÜ‰á	áRá~áÑá’àà5à6àBàäàåàçà”à˙à˛âOâõâºâ¿âÚâˆä:äàäÿãããDãìã‰åå?åCåìå›çççÄçÑçíçñç‡éé-ébéhé¥éŒé‘è$ètè¿èÙê
ê$êFêcê|êÇêÉê‘ë ëPëüë†ëŒë‘íííhíìíôíÍì'ì-ìwì∫ìÓì˝î&î_îcîzîîî≥îŒîÏïï8ïoïôïûïüïœï¸ï˝ñHñêñ£ñ©ñ˘ñˇóEófóuóûó◊ó€òò_òcòdòØò‚òËô8ô>ôÖô¶ôµôﬁöööLö°ö•ö¶öÙõõõ\õ}õÉõ”ú ú.ú=úfúüú£ú’ú˜ú˚ú¸ùGùíùüù•ùÚûû"ûKûÑûàûæûÊüüTüXüYü£ü©üˆ†††>†w†{†Æ†Ë†Ï†Ì°9°?°ç°ù°¨°’¢¢¢F¢Å¢Ö¢Ü¢¬¢»££'£-£y£¬£’§§%§N§á§ã§Œ••	•
•W•|•Ç•£•©•˙¶¶¶E¶~¶Ç¶ª¶Ú¶ˆ¶¯¶˘ß?ßCßëß‡®-®m®≤®œ®”©©3©t©Ä©∫©ª©«©ﬁ©¯™™2™P™x™ú™”™˝´´´*´@´Z´|´ô´≤´π´›´·´‚´Ó¨>¨V¨Z¨\¨]¨£¨ß¨ı≠D≠ë≠—ÆÆ3ÆäÆãÆÕÆ„ÆÁØ6ØÅØ°Øæ∞
∞∞K∞d∞â∞§∞¬∞Î±±C±c±±†±≈≤≤3≤a≤~≤æ≤Á≤ˇ≥?≥w≥£≥‚¥¥?¥U¥^¥d¥ƒµ"µQµ{µ±µ…µÛ∂'∂a∂ù∂ª∂ˇ∑E∑r∑™∑‚∑˛∏>∏Ä∏Ø∏‚ππFπrπöπÃπ˙∫$∫\∫à∫ ∫—∫’∫÷ªªLªRªüª‡ªıººº_º®ºÔΩΩΩWΩâΩäΩÃΩ˝Ω˛æ/æ0æoæuæ´æ÷æ◊æıø
ø2ø3øNøOøÉøÑøﬁ¿ @6¿ @å¿ @ç¿ @¿¿ @Ï¿ A4¿ A^¿ A§¿ AÃ¿ B.¿ B2¿ B3¿ B`¿ Bf¿ B∑¿ BÊ¿ BÏ¿ C¿ C3¿ CS¿ Cx¿ Cû¿ C¨¿ C≤¿ C—¿ D ¿ D¿ D¿ DA¿ DX¿ Dw¿ Dú¿ D†¿ D°¿ D›¿ E¿ E¿ ES¿ Ej¿ Eâ¿ Eä¿ E‰¿ F¿ F¿ F¿ F ¿ FF¿ FT¿ FZ¿ F[¿ Fx¿ F’¿ F·¿ FÂ¿ FÊ¿ G4¿ G[¿ G∏¿ G◊¿ GÙ¿ H,¿ HD¿ Hx¿ H¿ Hí¿ Hñ¿ Hó¿ H’¿ I¿ IW¿ Iv¿ Iõ¿ I≤¿ IŸ¿ J¿ J.¿ J7¿ J>¿ JB¿ JC¿ JÉ¿ J≥¿ K¿ K&¿ KM¿ Kd¿ Kã¿ K∫¿ K‡¿ KÈ¿ K¿ KÙ¿ Kı¿ L3¿ LL¿ Ls¿ Lw¿ Lx¿ L≥¿ Lπ¿ M¿ MU¿ M•¿ MÓ¿ N>¿ Né¿ Nø¿ NÍ¿ O¿ O¿ O¿ O3¿ OR¿ Oû¿ OÌ¿ P>¿ PL¿ Pt¿ Px¿ Py¿ Pú¿ P≤¿ P‹¿ Q¿ Q'¿ QM¿ Qt¿ Q|¿ QØ¿ Q‘¿ Q¯¿ R¿ RE¿ RM¿ R|¿ Rß¿ Rˆ¿ S;¿ S?¿ S@¿ Sr¿ Sx¿ S…¿ T¿ T¿ T<¿ Tã¿ T€¿ T¿ U¿ U¿ U¿ UN¿ U§¿ U•¿ UÊ¿ UÏ¿ U¸¿ V¿ VU¿ Vx¿ Vª¿ Vº¿ VÓ¿ W=¿ W>¿ Ww¿ W}¿ Wç¿ Wì¿ W⁄¿ X;¿ X<¿ Xq¿ Xú¿ Xù¿ XŸ¿ Y¿ Y¿ YK¿ Y^¿ Yû¿ Y÷¿ Z¿ ZP¿ ZV¿ Zw¿ Z⁄¿ [;¿ [f¿ [ï¿ [¬¿ [’¿ [Ÿ¿ [⁄¿ [¸¿ \A¿ \l¿ \á¿ \Ã¿ ]¿ ]f¿ ]Æ¿ ]˝¿ ^E¿ ^n¿ ^Õ¿ _¿ _d¿ _£¿ `¿ `¿ `¿ `[¿ `_¿ ``¿ `Ä¿ `≈¿ `Ô¿ a¿ a<¿ aõ¿ a„¿ b0¿ bm¿ b…¿ b“¿ bÿ¿ c¿ c"¿ c#¿ cE¿ cq¿ cú¿ cÀ¿ c“¿ d.¿ di¿ dí¿ dπ¿ d¿¿ d¡¿ dË¿ eJ¿ eK¿ eÅ¿ e—¿ f¿ f%¿ fD¿ fù¿ fÏ¿ g.¿ gH¿ gc¿ gj¿ gk¿ g≈¿ h&¿ h'¿ hQ¿ h°¿ h¢¿ hº¿ i¿ iO¿ ir¿ i¶¿ i≠¿ i±¿ i≤¿ j¿ j:¿ j`¿ ja¿ j±¿ j›¿ k¿ k¿ kG¿ km¿ kn¿ k¥¿ k÷¿ k‰¿ kÍ¿ kÎ¿ l#¿ l$¿ lu¿ l∑¿ l‹¿ m?¿ m§¿ mÔ¿ n=¿ nã¿ n€¿ nÊ¿ o*¿ og¿ on¿ oñ¿ oó¿ oº¿ o”¿ o˙¿ p1¿ pW¿ p`¿ pg¿ pk¿ pl¿ pº¿ p“¿ pÿ¿ q$¿ qt¿ q¿¿ r¿ r"¿ r(¿ ry¿ r«¿ s¿ sg¿ sì¿ sô¿ sÊ¿ t7¿ to¿ t•¿ t„¿ u ¿ u\¿ u£¿ uß¿ u®¿ u¿ v¿ v ¿ v&¿ vO¿ vP¿ vû¿ vÁ¿ w<¿ w=¿ w}¿ wï¿ wﬂ¿ wÊ¿ x¿ xW¿ xX¿ xÜ¿ xß¿ x‹¿ x„¿ x‰¿ y<¿ y=¿ yi¿ yí¿ y´¿ y‘¿ z¿ z5¿ z@¿ zI¿ zJ¿ zù¿ z‘¿ z‚¿ zË¿ zÈ¿ {¿ {4¿ {¿ {û¿ {ø¿ |¿ |R¿ |Ñ¿ |÷¿ |¸¿ }¿ }=¿ }q¿ }®¿ }—¿ }‹¿ }ˇ¿ ~"¿ ~C¿ ~f¿ ~å¿ ~π¿ ~‚¿ ~Ì¿ 1¿ b¿ l¿ r¿ s¿ §¿ •¿ Ã¿ „¿ Ä¿ ÄL¿ Är¿ Ä{¿ ÄÇ¿ ÄÜ¿ Äá¿ Ä÷¿ Å¿ Å9¿ Å:¿ Åâ¿ Å∏¿ Åﬁ¿ Åﬂ¿ Ç'¿ ÇI¿ ÇW¿ Ç]¿ Ç^¿ Çò¿ Çô¿ ÇÍ¿ É,¿ ÉQ¿ Éµ¿ Ñ¿ Ñg¿ Ñµ¿ Ö¿ ÖS¿ Ö^¿ Ö¢¿ Öﬂ¿ ÖÊ¿ Ü¿ Ü¿ Ü4¿ ÜK¿ Ür¿ Ü©¿ Üœ¿ Üÿ¿ Üﬂ¿ Ü„¿ Ü‰¿ á.¿ áP¿ á^¿ ád¿ áç¿ áé¿ á‹¿ à%¿ àz¿ àº¿ à‘¿ â ¿ â'¿ âF¿ âú¿ â ¿ âÎ¿ ä$¿ ä+¿ äÉ¿ äÑ¿ ä∞¿ äŸ¿ äÚ¿ ã¿ ãT¿ ã|¿ ãá¿ ãê¿ ãë¿ ã‰¿ å¿ å)¿ å/¿ å0¿ åV¿ å{¿ å∆¿ åÂ¿ ç¿ çe¿ çô¿ çÀ¿ é¿ éC¿ éY¿ éÑ¿ é∫¿ éÔ¿ è¿ è#¿ èF¿ èi¿ èä¿ è≠¿ è”¿ è˙¿ ê+¿ ê6¿ êz¿ ê´¿ êµ¿ êª¿ êº¿ ê„¿ ê˙¿ ë¿ ëY¿ ë¿ ë§¿ ë€¿ í¿ í
¿ í¿ í¿ íC¿ íG¿ íH¿ í{¿ íó¿ í•¿ í´¿ íÀ¿ ì¿ ì1¿ ìV¿ ì¿ ìá¿ ìï¿ ìõ¿ ì¬¿ ìÂ¿ îD¿ îJ¿ îN¿ îO¿ îí¿ îƒ¿ îÙ¿ ï¿ ï¿ ï!¿ ï"¿ ïI¿ ïj¿ ïè¿ ï¥¿ ï∫¿ ï‹¿ ñ¿ ñ¿ ñ¿ ñ7¿ ñ[¿ ñ¿ ñÜ¿ ñä¿ ñå¿ ñç¿ ñ”¿ ñ◊¿ ó"¿ óI¿ ób¿ óÆ¿ ó¥¿ óÔ¿ ò¿ ò¿ ò:¿ òp¿ òó¿ òµ¿ ò÷¿ ò¯¿ ô¿ ôK¿ ôp¿ ôå¿ ô´¿ ôÀ¿ ôË¿ ö¿ ö;¿ ö`¿ öq¿ ö≠¿ öË¿ öÓ¿ õ¿ õ6¿ õ^¿ õÑ¿ õ®¿ õﬁ¿ ú ¿ ú¿ úM¿ úà¿ úé¿ ú´¿ úÚ¿ ù¿ ùL¿ ùs¿ ùû¿ ùœ¿ ù˙¿ û)¿ ûi¿ û°¿ ûÕ¿ ü¿ ü=¿ üe¿ ü{¿ üÑ¿ üä¿ üé¿ üè¿ ü«¿ üÂ¿ üÊ¿ †:¿ †S¿ †X¿ †Y¿ †¶¿ †˜¿ °A¿ °è¿ °º¿ ¢¿ ¢¿ ¢2¿ ¢8¿ ¢â¿ ¢è¿ ¢æ¿ ¢˘¿ ¢˙¿ £>¿ £n¿ £t¿ £Ω¿ £“¿ £¿ §,¿ §}¿ §¡¿ §≈¿ §∆¿ •¿ •_¿ ••¿ •˝¿ ¶¿ ¶"¿ ¶k¿ ¶µ¿ ¶ÿ¿ ¶Ì¿ ß(¿ ßD¿ ßY¿ ß_¿ ß`¿ ß°¿ ß“¿ ß”¿ ®¿ ®]¿ ®Ñ¿ ®–¿ ®ﬂ¿ ®˚¿ ©¿ ©¿ ©¿ ©;¿ ©I¿ ©O¿ ©P¿ ©o¿ ©á¿ ©Â¿ ™¿ ™¿ ™¿ ™¿ ™X¿ ™z¿ ™Ä¿ ™≤¿ ™«¿ ™‡¿ ´$¿ ´i¿ ´•¿ ´⁄¿ ´Ë¿ ´Ó¿ ´Ô¿ ¨¿ ¨¿ ¨¿ ¨?¿ ¨E¿ ¨î¿ ¨◊¿ ≠¿ ≠:¿ ≠_¿ ≠m¿ ≠s¿ ≠ë¿ ≠ß¿ ≠´¿ ≠¨¿ ≠⁄¿ ≠‡¿ Æ1¿ Æ7¿ ÆÜ¿ Æº¿ ÆŸ¿ Ø¿ Ø(¿ Ø6¿ Ø<¿ Ø\¿ Ør¿ Øv¿ Øw¿ Øû¿ Øü¿ Ø ¿ Ø–¿ ∞!¿ ∞E¿ ∞K¿ ∞ï¿ ∞…¿ ∞ ¿ ±¿ ±R¿ ±S¿ ±í¿ ±∑¿ ≤¿ ≤W¿ ≤s¿ ≤ô¿ ≤ß¿ ≤≠¿ ≤Û¿ ≥¿ ≥"¿ ≥#¿ ≥d¿ ≥¥¿ ¥¿ ¥ ¿ ¥F¿ ¥T¿ ¥Z¿ ¥Ü¿ ¥ä¿ ¥ã¿ ¥⁄¿ µ¿ µ¿ µo¿ µ~¿ µ∫¿ µª¿ µˆ¿ ∂¿ ∂j¿ ∂∫¿ ∂÷¿ ∂‰¿ ∂Í¿ ∑¿ ∑¿ ∑¿ ∑@¿ ∑F¿ ∑ï¿ ∑‘¿ ∑˛¿ ∏3¿ ∏V¿ ∏d¿ ∏j¿ ∏Ü¿ ∏ú¿ ∏†¿ ∏°¿ ∏Õ¿ ∏”¿ π"¿ π(¿ πw¿ π©¿ πƒ¿ πÍ¿ ∫¿ ∫¿ ∫#¿ ∫A¿ ∫W¿ ∫[¿ ∫\¿ ∫Å¿ ∫Ç¿ ∫´¿ ∫±¿ ª ¿ ª$¿ ª*¿ ªr¿ ª§¿ ª•¿ ªÎ¿ º)¿ º*¿ ºg¿ ºä¿ º⁄¿ Ω*¿ ΩF¿ Ωj¿ Ωx¿ Ω~¿ Ω¬¿ ΩÎ¿ ΩÔ¿ Ω¿ æ/¿ æ¿ æœ¿ æÎ¿ ø¿ ø¿ ø#¿ øM¿ øQ¿ øR¿ øü¿ øﬂ¿ ø‡¿ ¿0¿ ¿?¿ ¿y¿ ¿z¿ ¿≥¿ ¿’¿ ¡%¿ ¡u¿ ¡ë¿ ¡ü¿ ¡•¿ ¡Ã¿ ¡–¿ ¡—¿ ¡˜¿ ¡˝¿ ¬I¿ ¬m¿ ¬s¿ ¬≠¿ ¬‹¿ ¬›¿ √¿ √f¿ √ñ¿ √—¿ ƒ¿ ƒ¿ ƒX¿ ƒÅ¿ ƒ®¿ ƒ’¿ ƒ¸¿ ≈¿ ≈D¿ ≈i¿ ≈ê¿ ≈£¿ ≈≠¿ ≈µ¿ ≈ª¿ ≈‹¿ ≈‡¿ ≈·¿ ∆+¿ ∆M¿ ∆N¿ ∆ü¿ ∆¨¿ ∆–¿ ∆—¿ «¿ «H¿ «p¿ «q¿ «æ¿ «Ê¿ »¿ »¿ »R¿ »É¿ »ò¿ » ¿ »À¿ …¿ …X¿ …j¿ …¿ …é¿ …∑¿ …¿ …Ù¿  &¿  '¿  e¿  k¿  ∞¿  ¸¿ ÀF¿ Àe¿ Àk¿ À∂¿ Ã¿ Ã5¿ Ã;¿ ÃÉ¿ Ãâ¿ Ãô¿ Ãü¿ Õ¿ Õ4¿ Õ5¿ ÕÄ¿ ÕŒ¿ Õ‘¿ Œ ¿ Œg¿ Œ™¿ Œ˘¿ œ*¿ œy¿ œ∆¿ œ¯¿ –¿ –]¿ –r¿ –°¿ –¢¿ –Ú¿ —
¿ —¿ —[¿ —ã¿ —Ω¿ —æ¿ “	¿ “/¿ “5¿ “É¿ “±¿ “∑¿ ”¿ ”!¿ ”0¿ ”x¿ ”±¿ ”µ¿ ”Ë¿ ‘¿ ‘+¿ ‘P¿ ‘^¿ ‘d¿ ‘Ç¿ ‘ò¿ ‘ú¿ ‘ù¿ ‘Ì¿ ’1¿ ’2¿ ’¿ ’∑¿ ’Ì¿ ’Ó¿ ÷
¿ ÷$¿ ÷%¿ ÷k¿ ÷ª¿ ÷º¿ ◊¿ ◊¿ ◊R¿ ◊õ¿ ◊∞¿ ◊«¿ ◊„¿ ◊Ò¿ ◊˜¿ ◊¯¿ ÿ%¿ ÿ4¿ ÿM¿ ÿw¿ ÿ~¿ ÿ¿ ÿ¡¿ ÿ÷¿ ÿÒ¿ ÿ¯¿ ÿ˘¿ Ÿ
¿ Ÿ%¿ ŸO¿ Ÿë¿ Ÿú¿ Ÿ•¿ Ÿæ¿ ŸË¿ ⁄(¿ ⁄3¿ ⁄<¿ ⁄C¿ ⁄ä¿ ⁄é¿ ⁄è¿ ⁄Œ¿ €¿ €¿ €4¿ €P¿ €p¿ €ë¿ €Ø¿ €Œ¿ €Â¿ €Î¿ €Ô¿ €¿ ‹/¿ ‹u¿ ‹ä¿ ‹€¿ ›¿ ›¿ ›/¿ ›7¿ ›n¿ ›Ä¿ ›ñ¿ ›±¿ ››¿ ›¯¿ ﬁ¿ ﬁ¿ ﬁ¿ ﬁ(¿ ﬁ6¿ ﬁ<¿ ﬁ=¿ ﬁá¿ ﬁ®¿ ﬁ¿¿ ﬁÛ¿ ﬂ¿ ﬂB¿ ﬂi¿ ﬂ¢¿ ﬂ–¿ ﬂ€¿ ﬂ‰¿ ﬂÎ¿ ﬂÔ¿ ﬂ¿ ‡>¿ ‡e¿ ‡»¿ ‡„¿ ‡Ò¿ ‡˜¿ ‡¯¿ ·B¿ ·i¿ ·Å¿ ·¥¿ ·›¿ ‚¿ ‚=¿ ‚`¿ ‚k¿ ‚t¿ ‚{¿ ‚¿ ‚Ä¿ ‚†¿ ‚°¿ ‚Ê¿ „ ¿ „0¿ „>¿ „D¿ „è¿ „»¿ ‰"¿ ‰?¿ ‰O¿ ‰W¿ ‰u¿ ‰¿¿ ‰·¿ Â¿ Â3¿ ÂW¿ ÂÖ¿ Â∏¿ ÂÛ¿ Ê,¿ Ê6¿ Êo¿ Ê|¿ Êö¿ Êƒ¿ ÊÏ¿ ÊÙ¿ Á¿ ÁB¿ Ás¿ Á¨¿ Á„¿ ÁÎ¿ ÁÒ¿ Áı¿ Áˆ¿ Ë.¿ Ët¿ Ëâ¿ Ëô¿ Ë∫¿ ËÕ¿ ËÈ¿ È¿ ÈC¿ ÈX¿ È^¿ Èb¿ Èc¿ È¢¿ Èœ¿ È’¿ Í¿ Í¿ Í.¿ ÍS¿ Í~¿ Íö¿ Í®¿ ÍÆ¿ Í∆¿ Íﬂ¿ ÍÙ¿ Í¯¿ Í˘¿ Î4¿ Îf¿ Î{¿ Îé¿ ÎŒ¿ Ï¿ Ï2¿ ÏÄ¿ ÏÜ¿ Ïí¿ Ï∞¿ Ï¥¿ Ïµ¿ ÏË¿ Ì¿ ÌN¿ Ìs¿ ÌŒ¿ Ó¿ Ó1¿ ÓY¿ Óf¿ Óé¿ ÓÆ¿ Ó›¿ Ô¿ ÔX¿ Ôõ¿ Ôÿ¿ ¿ /¿ `¿ é¿ ó¿ ù¿ ‰¿ Ë¿ È¿ Ò¿ Ò3¿ ÒÄ¿ Ò•¿ Ú ¿ Ú@¿ Úg¿ Úç¿ ÚÊ¿ Û2¿ ÛZ¿ Ûg¿ Ûè¿ Û≠¿ Û⁄¿ Ù¿ ÙS¿ Ùî¿ Ùœ¿ Ù˝¿ ı$¿ ıS¿ ıÅ¿ ıä¿ ıê¿ ı◊¿ ı€¿ ı‹¿ ˆ¿ ˆ=¿ ˆb¿ ˆà¿ ˆé¿ ˆö¿ ˆª¿ ˜¿ ˜	¿ ˜
¿ ˜Y¿ ˜Z¿ ˜ä¿ ˜∂¿ ˜˛¿ ¯¿ ¯¿ ¯#¿ ¯á¿ ¯à¿ ¯›¿ ˘¿ ˘¿ ˘3¿ ˘Y¿ ˘≥¿ ˘¥¿ ˘ÿ¿ ˘‰¿ ˙ ¿ ˙]¿ ˙d¿ ˙e¿ ˙ä¿ ˙¨¿ ˙œ¿ ˙ı¿ ˚¿ ˚5¿ ˚g¿ ˚|¿ ˚ó¿ ˚∂¿ ˚Ã¿ ˚Ï¿ ¸¿ ¸)¿ ¸F¿ ¸S¿ ¸^¿ ¸g¿ ¸n¿ ¸r¿ ¸s¿ ¸∂¿ ˝¿ ˝"¿ ˝(¿ ˝w¿ ˝Õ¿ ˝€¿ ˝·¿ ˛#¿ ˛8¿ ˛n¿ ˛£¿ ˛±¿ ˛∑¿ ˛∏¿ ˛‚¿ ˛Ê¿ ˛Ë¿ ˛È¿ ˇ5¿ ˇÑ¿ ˇ ¿ ˇ˛¿ K¿ r¿ ™¿ Õ¿ ‚¿ ˇ¿¿2¿8¿9¿O¿f¿É¿Æ¿Ø¿ª¿¿¿¿^¿à¿∞¿Ê¿Á¿Û¿¿¿ ¿}¿~¿ü¿ﬁ¿‚¿„¿Ô¿,¿R¿á¿ï¿õ¿‡¿¿@¿D¿E¿Q¿d¿¶¿¡¿÷¿⁄¿€¿ ¿,¿I¿V¿s¿y¿}¿~¿ä¿±¿–¿Ì¿%¿D¿a¿è¿≥¿ÿ¿˚¿¿)¿4¿=¿D¿H¿J¿K¿ã¿¬¿‚¿	¿	¿	?¿	a¿	Ü¿	¨¿	œ¿	Ù¿
	¿
0¿
f¿
l¿
m¿
ê¿
ø¿¿I¿â¿∫¿Â¿	¿/¿\¿]¿i¿ª¿Ω¿æ¿¿2¿Z¿ê¿ë¿ù¿≤¿…¿ ¿'¿(¿H¿Ü¿ä¿ã¿Ø¿€¿¯¿¿"¿(¿,¿-¿u¿à¿é¿›¿*¿U¿ß¿ ¿I¿M¿N¿Z¿ñ¿º¿ ¿ ¿^¿b¿c¿o¿Ç¿√¿ﬁ¿Û¿˜¿¯¿¿+¿Ä¿Å¿Œ¿¿c¿j¿¢¿Â¿*¿m¿≤¿π¿∫¿¿¿9¿@¿A¿è¿‚¿˛¿.¿j¿ü¿†¿»¿Ï¿1¿r¿ë¿Æ¿…¿‚¿
¿4¿L¿v¿ù¿“¿¿n¿ú¿¬¿¿M¿|¿¨¿›¿Ù¿	¿=¿Z¿ü¿…¿¿N¿s¿∑¿˝¿>¿S¿f¿w¿ï¿ø¿Â¿	¿1¿[¿n¿´¿∆¿Â¿ ¿ E¿ X¿ i¿ x¿ Ö¿ ê¿ ô¿ †¿ §¿ ¶¿ ß¿ Ì¿ Ò¿!7¿!{¿!∞¿!˙¿"H¿"ì¿"π¿"Ω¿"À¿"œ¿#¿#m¿#Ä¿#Ω¿#Û¿$L¿$Ä¿$Å¿$ø¿$›¿$ﬁ¿%¿%5¿%7¿%8¿%¿%É¿%…¿&¿&c¿&≤¿&ˇ¿'¿'¿'l¿'ú¿'†¿'ﬂ¿(/¿(|¿( ¿(Ë¿(Ï¿(˙¿(˛¿)K¿)v¿)∫¿)¯¿*$¿*[¿*ú¿*ù¿*‡¿*Ê¿+6¿+Ü¿+¬¿+»¿,¿,"¿,/¿,m¿,n¿,Ω¿,ÿ¿-¿-A¿-d¿-É¿-∑¿-⁄¿-˚¿.¿.?¿.E¿.I¿.J¿.õ¿. ¿.Ô¿/¿/1¿/W¿/z¿/õ¿/º¿/ﬂ¿/Â¿/È¿/Í¿0/¿0\¿0ù¿0…¿0›¿0„¿0‰¿1.¿1b¿1i¿1j¿1Ø¿1Ì¿1Ò¿1Ú¿27¿2v¿2ì¿2ß¿2≠¿2Æ¿3¿3¿3¿3Q¿3ê¿3≠¿3¡¿3«¿3»¿4#¿4'¿4(¿4`¿4e¿4µ¿4˚¿5 ¿5O¿5y¿5~¿5ç¿5í¿5‡¿5Û¿6¿6¿6B¿6d¿6k¿6•¿6¶¿6˙¿7J¿7h¿7ß¿7Á¿8#¿8s¿8û¿8•¿8¶¿8”¿9¿9(¿9/¿93¿94¿9l¿9q¿9§¿9©¿9∏¿9Ω¿:¿:$¿:j¿:§¿:•¿:˘¿;8¿;ô¿;ö¿;«¿<¿<¿<#¿<'¿<(¿<U¿<[¿<¨¿<˚¿=¿=Q¿=|¿=}¿= ¿=¿=˝¿>M¿>N¿>ò¿>»¿>’¿?¿?¿?j¿?¶¿?∆¿?«¿@¿@:¿@a¿@b¿@≥¿@‹¿@›¿@¸¿A)¿Aa¿At¿A¿¿B¿B¿B¿B9¿Bf¿Bû¿B±¿B˝¿C(¿C,¿C-¿Cz¿C√¿CÚ¿D¿D¿Dm¿D∂¿Dª¿E¿E`¿Eõ¿E…¿E ¿F¿F¿F"¿F(¿Fu¿Fà¿Fï¿F∞¿F∆¿G¿GF¿Go¿GÜ¿Gä¿Gã¿GÕ¿G”¿G„¿GÈ¿H6¿HI¿HV¿Hq¿Hé¿Hí¿Hì¿Hœ¿H’¿I&¿IÅ¿Iá¿Ió¿Iù¿IÓ¿I˚¿J*¿JP¿J^¿Jd¿Je¿Jπ¿K¿Kc¿Kπ¿L¿LI¿L£¿LÚ¿ME¿Mk¿M∑¿MÈ¿N:¿NÇ¿N∫¿N‹¿O9¿O:¿Oê¿Oº¿O·¿P*¿PO¿Pr¿PÆ¿P„¿Q¿Qi¿QÅ¿Qé¿Q≠¿QÔ¿R¿Rf¿Ró¿Rß¿R∑¿R√¿RÕ¿R¿S¿SN¿S]¿S~¿S¢¿SÛ¿T¿T5¿Td¿TΩ¿U¿U-¿U7¿UÑ¿U’¿V ¿V=¿VÜ¿Vß¿V ¿VÓ¿W¿W`¿Wr¿W|¿W≈¿WÀ¿Wœ¿W–¿X¿X¿Xd¿XÉ¿Xâ¿XÕ¿X”¿X„¿XÈ¿Y8¿YK¿YX¿Yé¿Y∂¿Yﬁ¿Z¿Z¿Z¿Z?¿Zc¿Zí¿Zô¿Zπ¿ZΩ¿Zæ¿[ ¿[¿[W¿[y¿[¿[√¿[…¿[Ÿ¿[ﬂ¿\,¿\?¿\L¿\Ä¿\®¿\œ¿\Û¿]"¿])¿]O¿]q¿]w¿]{¿]|¿] ¿]Ú¿]¯¿^¿^¿^I¿^J¿^Ü¿^å¿^‘¿^⁄¿^Í¿^¿_7¿_J¿_ò¿_‰¿_˜¿`¿`¿`S¿`W¿`X¿`ò¿`û¿`ﬁ¿`‰¿`Ù¿`˙¿a@¿aX¿ae¿añ¿aº¿a‚¿a¿aˆ¿bL¿bx¿bù¿bÊ¿c¿c,¿cM¿cp¿c¿cø¿c‚¿d¿d.¿d}¿dè¿dô¿d‚¿e¿e>¿eg¿eä¿eŸ¿eÎ¿eı¿f>¿f]¿fÄ¿fÕ¿fÚ¿g!¿gz¿gÿ¿gÍ¿gÙ¿h¿h<¿hg¿hê¿h¡¿i¿iX¿i¨¿iË¿j5¿j]¿já¿jˆ¿ke¿k™¿kπ¿l1¿l]¿ll¿lÿ¿mH¿m∏¿n,¿nH¿nW¿n◊¿oV¿o‘¿p¿p]¿pØ¿p’¿p‰¿qD¿q{¿q÷¿q◊¿r¿rS¿r•¿rÊ¿r˝¿s0¿s@¿sã¿s∆¿t¿tF¿ts¿t©¿t‘¿u¿u¿ui¿uª¿uË¿v¿vI¿v`¿vë¿v°¿vØ¿vπ¿vø¿v„¿vÁ¿vË¿w,¿w2¿wz¿wÄ¿wê¿wñ¿w‡¿w¯¿x¿x"¿x\¿x`¿xa¿x®¿xÆ¿x˝¿y¿y¿y%¿y+¿yx¿yê¿yù¿y⁄¿z ¿z¿z¿z9¿zX¿zy¿z°¿z—¿{¿{L¿{ô¿{«¿| ¿|¿|¿|H¿|r¿|¶¿|≥¿|⁄¿}'¿}Y¿}v¿}∫¿}÷¿~"¿~n¿~¿~é¿~Ø¿~º¿~ˆ¿ ¿#¿F¿g¿ä¿’¿Ä¿Ä8¿ÄB¿ÄH¿ÄI¿Ää¿Äã¿Ä»¿Äˆ¿Ä˙¿Ä˚¿ÅG¿ÅM¿Åõ¿Å∑¿ÅΩ¿ÅÕ¿Å”¿Ç¿Ç=¿ÇJ¿Çë¿Ç∑¿Ç≈¿ÇÀ¿É¿É7¿É\¿ÉØ¿Ñ¿ÑD¿Ñr¿Ñ{¿ÑÀ¿Ö¿Ö ¿ÖE¿Öd¿ÖÖ¿ÖÕ¿Ö˙¿Ü¿Ü5¿Ü`¿ÜÅ¿Ü£¿ÜÀ¿Üˇ¿á¿á¿áH¿ár¿á¶¿á≥¿á‹¿à)¿à\¿àä¿àó¿à—¿à€¿à˛¿â!¿âB¿âe¿âê¿â†¿ä¿ä+¿ä]¿äh¿än¿äo¿ä∞¿ä¥¿äµ¿ä˙¿ã ¿ã1¿ã7¿ãG¿ãM¿ãù¿ã∞¿ãΩ¿ãˆ¿å!¿åG¿åi¿åo¿åö¿åæ¿å‡¿ç¿ç<¿ç{¿ç†¿çÈ¿é¿é¿éT¿éZ¿é^¿é_¿é†¿é¶¿éÏ¿é˘¿è¿è9¿èG¿èM¿èr¿èë¿è≤¿è˛¿êE¿êO¿êy¿êü¿ê≈¿êœ¿êÚ¿ë¿ë6¿ëY¿ëÅ¿ëÃ¿ë÷¿ë¸¿í¿í¿í¿íL¿íR¿íb¿íh¿í∏¿íÀ¿ì¿ì¿ìM¿ì°¿ìˆ¿îK¿î°¿îÙ¿ï1¿ïî¿ïº¿ï¿¿ï¡¿ñ¿ñ	¿ñT¿ñã¿ñë¿ñ°¿ñß¿ñÙ¿ó¿ó¿óI¿ón¿ó∑¿óﬂ¿ò¿ò¿ò¿ò¿ò¿òg¿ò~¿ò‚¿ôD¿ô•¿ô©¿ô™¿ôˆ¿ö¿öl¿ö∞¿õ¿õ¿õ¿õ_¿õ®¿õ˙¿ú¿úk¿úô¿úØ¿úﬁ¿ù#¿ùE¿ùd¿ùq¿ù|¿ùê¿ù—¿û¿û2¿û6¿û7¿ûÑ¿û§¿û©¿û¯¿ü¿ü¿ü`¿üò¿üæ¿ü‚¿ü¸¿†¿†.¿†5¿†Ö¿†“¿†ˆ¿°B¿°`¿°º¿¢¿¢¿¢3¿¢Z¿¢Æ¿£¿£¿£1¿£x¿£Ö¿£å¿£ê¿£ë¿£”¿£Ÿ¿§¿§R¿§|¿§Ç¿§í¿§ò¿§Â¿§¯¿•¿•:¿•`¿•n¿•t¿•ú¿•’¿•‚¿¶	¿¶.¿¶S¿¶t¿¶ó¿¶º¿ß ¿ßC¿ß¢¿ß™¿ß∞¿ß÷¿ß¯¿ß˛¿®¿®¿®J¿®P¿®ï¿®õ¿®´¿®±¿®˛¿©¿©#¿©^¿©Ñ¿©í¿©ò¿© ¿©Ï¿™I¿™J¿™~¿™¨¿™È¿™Í¿´7¿´^¿´j¿´w¿´∏¿´∆¿´Ã¿´Õ¿¨1¿¨X¿¨y¿¨ú¿¨Ï¿≠¿≠6¿≠Y¿≠~¿≠Œ¿≠÷¿≠„¿Æ
¿Æ+¿ÆM¿Æw¿Æ§¿Æ”¿Ø¿Ø4¿ØE¿Øp¿Ø£¿ØÕ¿Ø˘¿∞¿∞¿∞A¿∞f¿∞à¿∞≤¿∞ﬂ¿±¿±<¿±o¿±Ä¿±´¿±ﬁ¿≤¿≤4¿≤{¿≤Ω¿≤Í¿≥¿≥K¿≥Ä¿≥ì¿≥‡¿≥¿¥¿¥¿¥6¿¥Y¿¥~¿¥©¿¥”¿µ¿µ¿µ¿µ¿µ!¿µ"¿µj¿µp¿µæ¿µ’¿µ€¿µÎ¿µÒ¿∂?¿∂x¿∂Ö¿∂¬¿∂Ë¿∂ˆ¿∂¸¿∂˝¿∑¿∑e¿∑â¿∑∞¿∏¿∏[¿∏û¿∏Œ¿∏Ÿ¿π+¿π{¿πÑ¿π‰¿πÂ¿∫¿∫R¿∫{¿∫ä¿∫ô¿∫ƒ¿ª¿ª7¿ªd¿ªo¿ªp¿ªê¿ªπ¿ªÍ¿º¿º<¿ºå¿º¥¿ºﬂ¿ºÙ¿Ω¿Ω¿Ω¿Ω¿ΩC¿Ωí¿Ωª¿Ω ¿ΩŸ¿æ¿æ)¿æP¿æs¿æó¿æ√¿æÚ¿ø#¿øx¿ø¶¿ø€¿øÓ¿¿¿¿P¿¿|¿¿™¿¿√¿¡¿¡T¿¡k¿¡y¿¡ç¿¡≤¿¡⁄¿¬+¿¬U¿¬Ü¿¬ï¿¬º¿¬·¿√¿√_¿√â¿√∫¿√…¿√”¿√€¿√‹¿ƒ¿ƒ$¿ƒÅ¿ƒ≥¿ƒ¿¿ƒ˘¿≈¿≈E¿≈r¿≈®¿≈˚¿∆'¿∆Z¿∆k¿∆ñ¿∆…¿∆Û¿«¿«6¿«K¿«W¿«i¿«é¿«≥¿»¿»h¿»∞¿»“¿»¸¿…)¿…T¿…á¿…Ω¿ ¿ <¿ o¿ Ä¿ ™¿ ÷¿À¿À4¿Àd¿Àô¿À¨¿Ã ¿Ã¿Ã'¿Ã<¿ÃH¿ÃZ¿Ã}¿Ã†¿Ã≈¿Ã˜¿ÕF¿Õn¿Õù¿Õ™¿Õ≤¿Õ∏¿Õπ¿ÕÂ¿Œ¿Œ[¿ŒÆ¿Œ¥¿Œµ¿œ¿œ¿œ`¿œ¿¿œ¿–=¿–Y¿–Ä¿–¬¿—¿—V¿—Ö¿—µ¿—Ÿ¿“¿“A¿“N¿“Y¿“}¿“Ü¿“§¿“‰¿”'¿”V¿”Ü¿”™¿”„¿‘¿‘¿‘(¿‘L¿‘U¿‘b¿‘Æ¿‘¥¿‘∏¿‘π¿‘˛¿’¿’G¿’a¿’g¿’w¿’}¿’Õ¿’‡¿’Ì¿÷$¿÷K¿÷ò¿÷√¿÷‘¿÷Â¿◊¿◊¿◊¿◊)¿◊K¿◊Q¿◊R¿◊}¿◊Å¿◊Ç¿◊Œ¿◊Ó¿◊Ù¿ÿC¿ÿv¿ÿª¿Ÿ¿ŸB¿ŸR¿Ÿz¿Ÿ¢¿Ÿæ¿⁄¿⁄Z¿⁄Ä¿⁄Æ¿⁄“¿⁄˛¿€¿€L¿€à¿€∂¿€ﬁ¿‹¿‹8¿‹l¿‹ö¿‹Œ¿‹Ë¿‹¸¿›¿›¿›	¿›
¿›\¿›`¿›´¿›˙¿ﬁI¿ﬁ^¿ﬁb¿ﬁp¿ﬁt¿ﬁ¿¿ﬂ¿ﬂ¿ﬂY¿ﬂà¿ﬂé¿ﬂÿ¿ﬂˇ¿‡¿‡(¿‡B¿‡V¿‡r¿‡å¿‡•¿‡¬¿‡⁄¿‡ˆ¿·
¿·)¿·M¿·j¿·Ñ¿·û¿·Ω¿·›¿·˙¿‚"¿‚5¿‚N¿‚T¿‚U¿‚∫¿‚ˇ¿„¿„0¿„W¿„X¿„Ω¿‰¿‰T¿‰ü¿‰ƒ¿‰Ÿ¿Â ¿Â¿ÂK¿Âõ¿Â–¿Âˇ¿Ê ¿ÊM¿Êô¿Ê‘¿Ê’¿Á&¿ÁC¿Áz¿Á{¿Áπ¿ÁÂ¿ÁÊ¿Ë)¿Ë]¿Ë^¿ËØ¿Ë¬¿Ë»¿È¿È]¿È∂¿ÈÁ¿ÈË¿Í7¿ÍÑ¿Í∏¿ÍÍ¿ÍÎ¿Î>¿Îm¿Îs¿Î¿¿Î‚¿Ï	¿Ï
¿ÏN¿Ïï¿Ï”¿Ì¿Ì¿ÌX¿Ìü¿Ì†¿ÌÊ¿Ó¿Ó ¿Ón¿ÓØ¿Ó‰¿ÓÂ¿Ô3¿Ôu¿Ô™¿Ô´¿ÔÂ¿ ¿!¿Z¿ó¿ò¿‹¿Ò¿Ò¿Òf¿Òl¿Ò∫¿Òﬁ¿Òﬂ¿Ú!¿Ú'¿Ú^¿ÚÅ¿ÚÇ¿Ú°¿Ú∑¿Ú∏¿Úƒ¿Û¿Û¿Û¿Ûm¿ÛΩ¿Ù¿Ùa¿Ù¿ÙÑ¿Ù÷¿ÙÍ¿ı(¿ıM¿ıp¿ıì¿ı¥¿ˆ¿ˆS¿ˆ†¿ˆ¿˜<¿˜n¿˜¿¿˜ﬂ¿¯ ¿¯P¿¯ü¿¯¿˘¿˘(¿˘K¿˘ö¿˘È¿˙9¿˙Ö¿˙∑¿˙Ú¿˙¯¿˙¸¿˙˝¿˚¿˚A¿˚E¿˚F¿˚f¿˚ä¿˚é¿˚è¿˚‡¿¸¿¸:¿¸_¿¸¨¿¸ˇ¿˝N¿˝|¿˝ ¿˝˛¿˛¿˛¿˛S¿˛á¿˛ç¿˛ë¿˛í¿˛¬¿ˇ¿ˇ;¿ˇ[¿ˇä¿ˇ™¿ˇ∞¿ˇ¥¿ˇµ¿ˇ—¿ˇ˜¿ˇ˚¿ˇ¸¿ 3¿ c¿ g¿ h¿ °¿ “¿ ÷¿ ◊¿
¿8¿<¿=¿t¿°¿•¿¶¿€¿¿
¿¿I¿x¿•¿´¿Ø¿∞¿¯¿,¿^¿d¿h¿i¿£¿–¿˚¿¿¿¿¿9¿ñ¿ó¿¯¿,¿T¿e¿ò¿‘¿›¿‰¿Â¿¿H¿u¿¢¿Ó¿¿<¿ä¿ô¿Õ¿‰¿¿d¿ú¿´¿∏¿æ¿ø¿Ó¿	¿	K¿	r¿	ó¿	º¿	›¿
¿
t¿
√¿¿!¿{¿û¿ﬂ¿6¿s¿∞¿·¿¿M¿~¿´¿ﬁ¿Ò¿¿%¿H¿m¿û¿Ó¿2¿j¿Ö¿ﬂ¿¿C¿Ä¿Ω¿Ó¿#¿Z¿ã¿∏¿Î¿˛¿¿¿¿¿l¿ö¿Á¿(¿]¿t¿Õ¿!¿0¿=¿C¿D¿c¿}¿ü¿¿¿€¿‚¿Ê¿Ë¿È¿7¿X¿\¿£¿Á¿2¿ï¿¡¿¿¿9¿:¿t¿î¿©¿∑¿Ω¿æ¿Ÿ¿„¿¿5¿U¿r¿í¿™¿œ¿#¿.¿7¿Å¿Ω¿‘¿‰¿Ï¿¿!¿'¿N¿ù¿û¿≥¿¡¿«¿ﬂ¿„¿‰¿¿¿5¿f¿l¿ò¿®¿Æ¿œ¿”¿‘¿‡¿¿3¿Z¿é¿î¿ò¿ô¿•¿‚¿˜¿¿/¿V¿}¿¢¿«¿·¿¿ˆ¿˙¿˚¿¿¿L¿b¿w¿{¿}¿~¿«¿ﬁ¿-¿:¿;¿â¿÷¿ ¿ %¿ &¿ u¿ Ö¿ á¿ à¿ Ë¿ ¸¿! ¿!¿!\¿!¿¿!Û¿!˜¿"5¿"Ç¿"§¿"œ¿#(¿#<¿#=¿#W¿#X¿#ú¿#º¿#—¿#ﬂ¿#Â¿#Ê¿$¿$¿$a¿$Ç¿$¢¿$ø¿$ﬂ¿$˜¿%¿%w¿%Ç¿%ã¿%’¿&¿&P¿&`¿&h¿&ì¿&°¿&ß¿&®¿&”¿'0¿'1¿']¿'k¿'q¿'â¿'ç¿'é¿'ö¿'∆¿'ﬂ¿(¿(¿(F¿(V¿(\¿(}¿(Å¿(Ç¿(é¿(Ω¿(·¿)¿)<¿)B¿)F¿)G¿)S¿)ê¿)•¿)À¿)›¿*¿*+¿*P¿*u¿*ç¿*ì¿*ó¿*ò¿*§¿*∑¿*È¿*ˇ¿+¿+¿+¿+¿+z¿+~¿+å¿+⁄¿+ı¿,+¿,6¿,7¿,ö¿,˙¿-8¿-C¿-D¿-~¿-ä¿-å¿-ç¿-€¿.,¿.b¿.≥¿.Î¿/(¿/4¿/K¿/e¿/Ñ¿/ü¿/Ω¿/Â¿0	¿0@¿0j¿0ä¿0ã¿0ó¿0œ¿0–¿0‹¿1¿1¿1"¿1\¿1]¿1i¿1ß¿1®¿1¥¿2¿2¿2!¿2Ç¿2É¿2è¿2”¿2‘¿2‡¿3¿3   `/// @docImport 'package:flutter/cupertino.dart';
/// @docImport 'package:flutter/material.dart';Å   Å%Å<Å; ÅB   Åo   Åô   Å¡   ÅÍ   Ç   Ç<   ÇQ   Çh   ÇÅ   Ç®   ÇΩ   Ç⁄   ÇÚ   É   É+   ÉJ   Éc   Éz   Éî   ÉÆ   ÉÕ   ÉÈÑÑ(Ñ*ÑQÑk ÖÙÇóááÅ/// ParentData that determines whether or not to paint the corresponding child.
///
/// Used in the layout of the Cupertino and Material text selection menus, which
/// decide whether or not to paint their buttons after laying them out and
/// determining where they overflow.  áTÄﬂà à Äæ/// Whether or not this child is painted.
///
/// Children in the selection toolbar may be laid out for measurement purposes
/// but not painted. This allows these children to be identified.à. à8QàKàK   à8à9 àçûjééÖx/// An interface for building the selection UI, to be provided by the
/// implementer of the toolbar widget.
///
/// Parts of this class, including [buildToolbar], have been deprecated in favor
/// of [EditableText.contextMenuBuilder], which is now the preferred way to
/// customize the context menus.
///
/// ## Use with [EditableText.contextMenuBuilder]
///
/// For backwards compatibility during the deprecation period, when
/// [EditableText.selectionControls] is set to an object that does not mix in
/// [TextSelectionHandleControls], [EditableText.contextMenuBuilder] is ignored
/// in favor of the deprecated [buildToolbar].
///
/// To migrate code from [buildToolbar] to the preferred
/// [EditableText.contextMenuBuilder], while still using [buildHandle], mix in
/// [TextSelectionHandleControls] into the [TextSelectionControls] subclass when
/// moving any toolbar code to a callback passed to
/// [EditableText.contextMenuBuilder].
///
/// In due course, [buildToolbar] will be removed, and the mixin will no longer
/// be necessary as a way to flag to the framework that the code has been
/// migrated and does not expect [buildToolbar] to be called.
///
/// For more information, see <https://docs.flutter.dev/release/breaking-changes/context-menus>.
///
/// See also:
///
///  * [SelectionArea], which selects appropriate text selection controls
///    based on the current platform.    é/ÇRè˝è˝Å¥/// Builds a selection handle of the given `type`.
///
/// The top left corner of this widget is positioned at the bottom of the
/// selection position.
///
/// The supplied [onTap] should be invoked when the handle is tapped, if such
/// interaction is allowed. As a counterexample, the default selection handle
/// on iOS [cupertinoTextSelectionControls] does not call [onTap] at all,
/// since its handles are not meant to be tapped. êêê  ê(êAê@  êJêRêQ  êgêvêu   êÖÅëYëYÄ∆/// Get the anchor point of the handle relative to itself. The anchor point is
/// the point that is aligned with a specific point in the text. A handle
/// often visually "points to" that location. ëiëÇëÅ  ëáëèëé   ë¢É˚îlîlÇ3/// Builds a toolbar near a text selection.
///
/// Typically displays buttons for copying and pasting text.
///
/// The [globalEditableRegion] parameter is the TextField size of the global
/// coordinate system in logical pixels.
///
/// The [textLineHeight] parameter is the [RenderEditable.preferredLineHeight]
/// of the [RenderEditable] we are building a toolbar for.
///
/// The [selectionMidpoint] parameter is a general calculation midpoint
/// parameter of the toolbar. More detailed position information
/// is computable from the [endpoints] parameter. î~îåîã  îòîûîù  î∑îøîæ  î“î⁄îŸ  î"ï
ï	  ïï/ï.  ï<1ï_ï^  ïs$ï|ï{  ììÒì˚îaîî*ï°Zï÷ï÷-/// Returns the size of the selection handle. ï‰ïÏïÎ   ïˇÇcó‚ó‚ÅX/// Whether the current selection of the text field managed by the given
/// `delegate` can be removed from the text field and placed into the
/// [Clipboard].
///
/// By default, false is returned when nothing is selected in the text field.
///
/// Subclasses can use this to decide if they should expose the cut
/// functionality to the user. óÈò óˇ  óhóiósóŸóyó¢òfÇ>ö"ö"Å3/// Whether the current selection of the text field managed by the given
/// `delegate` can be copied to the [Clipboard].
///
/// By default, false is returned when nothing is selected in the text field.
///
/// Subclasses can use this to decide if they should expose the copy
/// functionality to the user. ö*öAö@  ô®ô©ô≥öôπô‚ö®ÇRú™ú™Åu/// Whether the text field managed by the given `delegate` supports pasting
/// from the clipboard.
///
/// Subclasses can use this to decide if they should expose the paste
/// functionality to the user.
///
/// This does not consider the contents of the clipboard. Subclasses may want
/// to, for example, disallow pasting when the clipboard contains an empty
/// string. ú≥ú ú…  ú0ú1ú;ú°úAújú˛ÇYûèûèÅ
/// Whether the current selection of the text field managed by the given
/// `delegate` can be extended to include the entire content of the text
/// field.
///
/// Subclasses can use this to decide if they should expose the select all
/// functionality to the user. ûúû≥û≤  ûûû ûÜû&ûOü[Åê†Ç†ÇÄ§/// Call [TextSelectionDelegate.cutSelection] to cut current selection.
///
/// This is called by subclasses when their cut affordance is activated by
/// the user. †å†£†¢  ††	††y††B†ÔÅï¢¢Äß/// Call [TextSelectionDelegate.copySelection] to copy current selection.
///
/// This is called by subclasses when their copy affordance is activated by
/// the user. ¢$¢;¢:  °ü°†°™¢°∞°Ÿ¢àÇÄ§ö§öÅ>/// Call [TextSelectionDelegate.pasteText] to paste text.
///
/// This is called by subclasses when their paste affordance is activated by
/// the user.
///
/// This function is asynchronous since interacting with the clipboard is
/// asynchronous. Race conditions may exist with this API as currently
/// implemented. §¶§Ω§º  §§§#§â§)§R•ÅÈ¶â¶âÄÙ/// Call [TextSelectionDelegate.selectAll] to set the current selection to
/// contain the entire text value.
///
/// Does not hide the toolbar.
///
/// This is called by subclasses when their select-all affordance is activated
/// by the user. ¶ô¶∞¶Ø  ¶¶¶¶Ä¶ ¶I ¶˘Öb©9©9Ç9/// Text selection controls that do not show any toolbars or handles.
///
/// This is a placeholder, suitable for temporary use during development, but
/// not practical for production. For example, it provides no way for the user
/// to interact with selections: no context menus on desktop, no toolbars or
/// drag handles on mobile, etc. For production, consider using
/// [MaterialTextSelectionControls] or creating a custom subclass of
/// [TextSelectionControls].
///
/// The [emptyTextSelectionControls] global variable has a
/// suitable instance of this class.    ©vC©á©á  ©ï©ù©ú  ©v©w©ΩÅ_©–©–  ©‚©©Ô  ©¸™™  ™™#™"  ™6™>™=  ™T"™n™m  ™|™ì™í  ™†1™√™¬  ™◊$™‡™ﬂ  ©Ω©æ´ Ä¿´3´3  ´D´R´Q  ´^´w´v  ´Ä´à´á  ´ù´¨´´  ´ ´!´‰u´˜´˜  ¨¨ ¨  ¨%¨-¨,  ´‰´Â Æã¿ h ØßØßÅ/// An object that manages a pair of text selection handles for a
/// [RenderEditable].
///
/// This class is a wrapper of [SelectionOverlay] to provide APIs specific for
/// [RenderEditable]s. To manage selection handles for custom widgets, use
/// [SelectionOverlay] instead. Ø¿ã∞M ∞M∞a ÄÜ/// Creates an object that manages overlay entries for selection handles.
///
/// The [context] must have an [Overlay] as an ancestor.∞h∞É∞Ç  ∞ç∞ú∞õ  ∞®∞±∞∞  ∞∆#∞⁄∞Ÿ  ∞Ô'±±  ±%±0±/  ±G±V±U  ±g±m±l  ±É±â±à  ±§±≥±≤  ±…=±‹±€  ≤%≤≤  ≤7(≤Q≤P  ≤e≤k≤j  ≤Ç:≤ß≤¶  
±ô±Ô≤ ≤≤’≤≈≤◊≤ı≤Ó≤˜∫ÿÅ9º
º
Å/// {@template flutter.widgets.SelectionOverlay.context}
/// The context in which the selection UI should appear.
///
/// This context must have an [Overlay] as an ancestor because this object
/// will display the text selection handles in that [Overlay].
/// {@endtemplate} º™hΩΩD/// The editable line in which the selected text is being displayed. ΩpΩvΩv?/// {@macro flutter.widgets.SelectionOverlay.selectionControls} ΩåoΩÍΩÍ?/// {@macro flutter.widgets.SelectionOverlay.selectionDelegate} æ -ææ  æ2Ä¢æ¬æ¬t/// {@macro flutter.widgets.EditableText.contextMenuBuilder}
///
/// If not provided, no context menu will be built. ø5øFøF  øÜVø†ø† ø¬øœø‘ø–ø’ø€ø÷ø‡Tø˙ø˙ ¿ @¿ @'¿ @,¿ @(¿ @-¿ @3¿ @.¿ @8R¿ @R¿ @R ¿ @p¿ @}¿ @Ç¿ @~¿ @É¿ @â¿ @Ñ¿ C5¿ C:¿ C: ¿ CL¿ j<"¿ jH¿ jH  ¿ jﬂ ¿ jÎ¿ jÎ  ¿ kI"¿ kX¿ kX  ¿ Å$¿ Å¿ Å  ¿ Å∫"¿ Å∆¿ Å∆  æŸXø!ø!/// Retrieve current value.  æ˜æ¯øQ1øcøc    ¿ B5Ä˝¿ C¿ CÄ≈/// Whether selection handles are visible.
///
/// Set to false if you want to hide the handles. Use this property to show or
/// hide the handle without rebuilding them.
///
/// Defaults to false.   ¿ CUÄÆ¿ CY¿ CY  ¿ Ch¿ Cn¿ Cm   ¿ UÄÑ¿ UY¿ UY./// Whether the handles are currently visible.   ¿ UßÅ¿ VÉ¿ VÉÄ∆/// {@macro flutter.widgets.SelectionOverlay.toolbarIsVisible}
///
/// See also:
///
///   * [spellCheckToolbarIsVisible], which is only whether the spell check menu
///     specifically is visible.   ¿ Væ~¿ V˘¿ V˘//// Whether the magnifier is currently visible.   ¿ W@Ä˙¿ WÂ¿ WÂÄë/// Whether the spell check menu is currently visible.
///
/// See also:
///
///   * [toolbarIsVisible], which is whether any toolbar is visible.   ¿ @èÅ¢¿ @î¿ @î    ¿ DÄò¿ DH¿ DH9/// {@macro flutter.widgets.SelectionOverlay.showHandles}   ¿ D£r¿ D‰¿ D‰9/// {@macro flutter.widgets.SelectionOverlay.hideHandles}   ¿ EÅÀ¿ EZ¿ EZ9/// {@macro flutter.widgets.SelectionOverlay.showToolbar}   ¿ FËÅ≠¿ Gb¿ Gbp/// Shows toolbar with spell check suggestions of misspelled words that are
/// available for click-and-replace. ¿ GÉ1¿ Gí¿ Gë   ¿ HôÅ®¿ H‹¿ H‹;/// {@macro flutter.widgets.SelectionOverlay.showMagnifier} ¿ HÍ¿ HÚ¿ HÒ   ¿ JEÅÆ¿ Jä¿ Jä=/// {@macro flutter.widgets.SelectionOverlay.updateMagnifier} ¿ Jö¿ J¢¿ J°   ¿ K˜¿ L:¿ L:;/// {@macro flutter.widgets.SelectionOverlay.hideMagnifier}   ¿ LzÉ˝¿ N∆¿ N∆Ç4/// Updates the overlay after the selection has changed.
///
/// If this method is called while the [SchedulerBinding.schedulerPhase] is
/// [SchedulerPhase.persistentCallbacks], i.e. during the build, layout, or
/// paint phases (see [WidgetsBinding.drawFrame]), then the update is delayed
/// until the post-frame callbacks phase. Otherwise the update is done
/// synchronously. This means that it is safe to call during builds, but also
/// that if you do call this during a build, the UI will not update until the
/// next frame (i.e. many milliseconds later). ¿ NÕ¿ Nﬂ¿ Nﬁ   ¿ P{Ç√¿ PÄ¿ PÄ    ¿ SBÅŸ¿ T	¿ T	Äπ/// Causes the overlay to update its rendering.
///
/// This is intended to be called when the [renderObject] may have changed its
/// text metrics (e.g. because the text was scrolled).   ¿ X>]¿ Xx¿ Xx2/// {@macro flutter.widgets.SelectionOverlay.hide}   ¿ Xür¿ X‡¿ X‡9/// {@macro flutter.widgets.SelectionOverlay.hideToolbar}   ¿ YÇ√¿ YR¿ YR5/// {@macro flutter.widgets.SelectionOverlay.dispose}   ¿ [‹ÑÇ¿ [„¿ [„    ¿ `bÇø¿ `i¿ `i    ¿ c%Üã¿ c3¿ c3  ¿ cI&¿ cb¿ ca  ¿ cu%¿ cÜ¿ cÖ  ¿ c†)¿ c∑¿ c∂   ¿ kpÑ˙¿ ku¿ ku  ¿ kò¿ k™¿ k©   ¿ pnÖ8¿ t@¿ t@É®/// Given a handle position and drag position, returns the position of handle
/// after the drag.
///
/// The handle jumps instantly between lines when the drag reaches a full
/// line's height away from the original handle position. In other words, the
/// line jump happens when the contact point would be located at the same
/// place on the handle at the new line as when the gesture started, for both
/// directions.
///
/// This is not the same as just maintaining an offset from the target and the
/// contact point. There is no point at which moving the drag up and down a
/// small sub-line-height distance will cause the cursor to jump up and down
/// between lines. The drag distance must be a full line height for the cursor
/// to change lines, for both directions.
///
/// Both parameters must be in local coordinates because the untransformed
/// line height is used, and the return value is in local coordinates as well. ¿ tM¿ tU¿ tT  ¿ t\¿ td¿ tc   ¿ u™ä€¿ uØ¿ uØ  ¿ u”¿ uÊ¿ uÂ   ¿ Å·Ö¿ ÅÊ¿ ÅÊ  ¿ Ç¿ Ç¿ Ç   ¿ ÜÊã`¿ ÜÎ¿ ÜÎ  ¿ á¿ á$¿ á#   ¿ íJÇ¿ íO¿ íO  ¿ ía¿ íq¿ íp   ¿ îQÄœ¿ îV¿ îV  ¿ ît¿ îÉ¿ îÇ   ¿ ï$Åe¿ ï<¿ ï<  ¿ ïM¿ ï\¿ ï[  ¿ ïn¿ ïá¿ ïÜ  ¿ ïì¿ ï¨¿ ï´    ¿ ñç¿ hZ¿ óO¿ óOÄª/// An object that manages a pair of selection handles and a toolbar.
///
/// The selection handles are displayed in the [Overlay] that most closely
/// encloses the given [BuildContext]. ¿ ódà)¿ óÒ ¿ óÒ¿ ò ÄÜ/// Creates an object that manages overlay entries for selection handles.
///
/// The [context] must have an [Overlay] as an ancestor.¿ ò¿ ò¿ ò  ¿ ò#¿ ò)¿ ò(  ¿ ò>0¿ ò`¿ ò_  ¿ òt!¿ òÖ¿ òÑ  ¿ òõ¿ ò°¿ ò†  ¿ òπ¿ òø¿ òæ  ¿ ò⁄¿ ò‡¿ òﬂ  ¿ ò¸¿ ô¿ ô  ¿ ô.¿ ô=¿ ô<  ¿ ôO¿ ô`¿ ô_  ¿ ôt¿ ôz¿ ôy  ¿ ôê¿ ôñ¿ ôï  ¿ ôØ¿ ôµ¿ ô¥  ¿ ôœ¿ ô’¿ ô‘  ¿ ôÏ¿ ôÚ¿ ôÒ  ¿ ö4¿ ö(¿ ö'  ¿ ö?¿ öN¿ öM  ¿ ödÄ≠¿ õ¿ õ   ¿ õ¿ õ&¿ õ%  ¿ õ:"¿ õI¿ õH  ¿ õb ¿ õq¿ õp  ¿ õà¿ õó¿ õñ  ¿ õ¨0¿ õ≤¿ õ±  ¿ õ‚¿ õË¿ õÁ  ¿ úÄ•¿ úõ¿ úö  ¿ úØA¿ úµ¿ ú¥  +¿ öd¿ öe¿ öo¿ öÏ¿ öw¿ ö≥¿ õ≈¿ õ÷¿ õ◊¿ ú¿ ú¿ ú¿ úå¿ ú¿ úS¿ úÕ¿ úÁ¿ úË¿ ù
¿ ú˘¿ ù¿ ù7¿ ù$¿ ù9¿ ùb¿ ùS¿ ùd¿ ùã¿ ùz¿ ùç¿ ùπ¿ ù•¿ ùª¿ ùÁ¿ ù÷¿ ùÈ¿ û¿ û¿ û%¿ û¿ û¿ û$¿ û$¿ üëR¿ ü‹¿ ü‹5/// {@macro flutter.widgets.SelectionOverlay.context} ¿ üËn¿ †¿ † 	¿ †¿ †)¿ †7¿ †*¿ †8¿ †U¿ †>¿ †K¿ †L¿ °æF¿ °ÿ¿ °ÿ ¿ °Ô¿ ¢¿ ¢¿ ¢	ÄÓ¿ ¢·¿ ¢·Ä¨/// The configuration for the magnifier.
///
/// By default, [SelectionOverlay]'s [TextMagnifierConfiguration] is disabled.
///
/// {@macro flutter.widgets.magnifier.intro} ¿ ¨Ÿ(¿ ¨Ò¿ ¨Ò  ¿ Ææ¿ Æ≈¿ Æ≈  ¿ Øy#¿ Ø~¿ Ø~ ¿ Øó¿ Ø°Å&¿ ∞¥¿ ∞¥ÄÈ/// Whether the start handle is visible.
///
/// If the value changes, the start handle uses [FadeTransition] to transition
/// itself on and off the screen.
///
/// If this is null, the start selection handle will always be visible. ¿ ∞ÃÄÑ¿ ±:¿ ±:E/// Called when the users start dragging the start selection handles. ¿ ¥çÄç¿ µ¿ µL/// Called when the users drag the start selection handles to new locations. ¿ µÄô¿ µ§¿ µ§\/// Called when the users lift their fingers after dragging the start selection
/// handles. ¿ ∑÷&¿ ∑Ó¿ ∑Ó  ¿ π´¿ π≤¿ π≤  ¿ ∫^!¿ ∫c¿ ∫c ¿ ∫z¿ ∫ÑÅ¿ ªë¿ ªëÄ„/// Whether the end handle is visible.
///
/// If the value changes, the end handle uses [FadeTransition] to transition
/// itself on and off the screen.
///
/// If this is null, the end selection handle will always be visible. ¿ ªßÄÄ¿ º¿ ºC/// Called when the users start dragging the end selection handles. ¿ øTÄâ¿ ø»¿ ø»J/// Called when the users drag the end selection handles to new locations. ¿ ø‚Äï¿ ¿e¿ ¿eZ/// Called when the users lift their fingers after dragging the end selection
/// handles. ¿ ¡”Å¿ ¬Ã¿ ¬ÃÄœ/// Whether the toolbar is visible.
///
/// If the value changes, the toolbar uses [FadeTransition] to transition
/// itself on and off the screen.
///
/// If this is null the toolbar will always be visible. ¿ √h,¿ √Å¿ √Å  ¿ ≈„h¿ ∆;¿ ∆;G/// Debugging information for explaining why the [Overlay] is required. ¿ ∆P~¿ ∆æ¿ ∆æY/// The object supplied to the [CompositedTransformTarget] that wraps the text
/// field. ¿ ∆”Äõ¿ «Z¿ «Zr/// The objects supplied to the [CompositedTransformTarget] that wraps the
/// location of start selection handle. ¿ «sÄó¿ «¯¿ «¯p/// The objects supplied to the [CompositedTransformTarget] that wraps the
/// location of end selection handle. ¿ »Äπ¿ »∑¿ »∑ÄÑ/// {@template flutter.widgets.SelectionOverlay.selectionControls}
/// Builds text selection handles and toolbar.
/// {@endtemplate} ¿ »ÕÅW¿  ¿  Ä´/// {@template flutter.widgets.SelectionOverlay.selectionDelegate}
/// The delegate for manipulating the current selection in the owning
/// text field.
/// {@endtemplate}¿ …Å¿ …Ç¿ …å¿ …Ú¿ …í¿ …ª¿  )É	¿ Õ!¿ Õ!Çø/// Determines the way that drag start behavior is handled.
///
/// If set to [DragStartBehavior.start], handle drag behavior will
/// begin at the position where the drag gesture won the arena. If set to
/// [DragStartBehavior.down] it will begin at the position where a down
/// event is first detected.
///
/// In general, setting this to [DragStartBehavior.start] will make drag
/// animation smoother and setting it to [DragStartBehavior.down] will make
/// drag behavior feel slightly more reactive.
///
/// By default, the drag start behavior is [DragStartBehavior.start].
///
/// See also:
///
///  * [DragGestureRecognizer.dragStartBehavior], which gives an example for the different behaviors. ¿ Õ7Éh¿ –à¿ –àÇø/// {@template flutter.widgets.SelectionOverlay.onSelectionHandleTapped}
/// A callback that's optionally invoked when a selection handle is tapped.
///
/// The [TextSelectionControls.buildHandle] implementation the text field
/// uses decides where the handle's tap "hotspot" is, or whether the
/// selection handle supports tap gestures at all. For instance,
/// [MaterialTextSelectionControls] calls [onSelectionHandleTapped] when the
/// selection handle's "knob" is tapped, while
/// [CupertinoTextSelectionControls] builds a handle that's not sufficiently
/// large for tapping (as it's not meant to be tapped) so it does not call
/// [onSelectionHandleTapped] even when tapped.
/// {@endtemplate} ¿ –§Å¿ —¨¿ —¨Äﬁ/// Maintains the status of the clipboard for determining if its contents can
/// be pasted or not.
///
/// Useful because the actual value of the clipboard can only be checked
/// asynchronously (see [Clipboard.getData]). ¿ ”Í¿ ”Ú¿ ”Ú  ¿ ‘üÄê¿ ’¿ ’M/// Controls the fade-in and fade-out animations for the toolbar and handles.¿ ’¿ ’¿ ’.¿ ’)¿ ’¿ ’+¿ ’4Ä∑¿ ’„¿ ’„ÄÄ/// A pair of handles. If this is non-null, there are always 2, though the
/// second is hidden when the selection is collapsed. ¿ ’2¿ ÷¿ ÷/// A copy/paste toolbar. ¿ ÷mL¿ ÷â¿ ÷â ¿ ÷¢¿ ÷∑¿ ÷∏¿ ÷æR¿ ÷⁄¿ ÷⁄ ¿ ÷˘¿ ◊¿ ◊¿ ‚Ç¿ ‚á¿ ‚á ¿ ‚ô¿ ¢¸Å»¿ £›¿ £›ÄÕ/// {@template flutter.widgets.SelectionOverlay.toolbarIsVisible}
/// Whether the toolbar is currently visible.
///
/// Includes both the text selection toolbar and the spell check menu.
/// {@endtemplate}   ¿ ¨Äø¿ ¨≤¿ ¨≤x/// The type of start selection handle.
///
/// Changing the value while the handles are visible causes them to rebuild.   ¿ ≠Ä•¿ ≠	¿ ≠	  ¿ ≠¿ ≠2¿ ≠1   ¿ ≠ÆÅ¿ Æì¿ ÆìÄœ/// The line height at the selection start.
///
/// This value is used for calculating the size of the start selection handle.
///
/// Changing the value while the handles are visible causes them to rebuild.   ¿ Æ€Äö¿ Æﬂ¿ Æﬂ  ¿ ÆÒ¿ Æ˘¿ Æ¯   ¿ ∑Äπ¿ ∑≥¿ ∑≥v/// The type of end selection handle.
///
/// Changing the value while the handles are visible causes them to rebuild.   ¿ ∏ Äü¿ ∏¿ ∏  ¿ ∏¿ ∏+¿ ∏*   ¿ ∏£Å¿ πÑ¿ πÑÄÀ/// The line height at the selection end.
///
/// This value is used for calculating the size of the end selection handle.
///
/// Changing the value while the handles are visible causes them to rebuild.   ¿ π∆Äî¿ π ¿ π   ¿ π⁄¿ π‚¿ π·   ¿ ¬ﬂÄÜ¿ √;¿ √;</// The text selection positions of selection start and end.   ¿ √òÇG¿ √ú¿ √ú  ¿ √Ø¿ √…¿ √»   ¿ —¿Ç'¿ ”√¿ ”√ÅR/// The location of where the toolbar should be drawn in relative to the
/// location of [toolbarLayerLink].
///
/// If this is null, the toolbar is drawn based on [selectionEndpoints] and
/// the rect of render object of [context].
///
/// This is useful for displaying toolbars at the mouse right-click locations
/// in desktop devices.  ¿ ”#¿ ”$¿ ”.¿ ”≥¿ ”4¿ ”|¿ ‘Äï¿ ‘
¿ ‘
  ¿ ‘¿ ‘#¿ ‘"   ¿ §»ÖM¿ ¶Ù¿ ¶ÙÇ/// {@template flutter.widgets.SelectionOverlay.showMagnifier}
/// Shows the magnifier, and hides the toolbar if it was showing when [showMagnifier]
/// was called. This is safe to call on platforms not mobile, since
/// a magnifierBuilder will not be provided, or the magnifierBuilder will return null
/// on platforms not mobile.
///
/// This is NOT the source of truth for if the magnifier is up or not,
/// since magnifiers may hide themselves. If this info is needed, check
/// [MagnifierController.shown].
/// {@endtemplate} ¿ ß"¿ ß¿ ß   ¿ ™Å˙¿ ™Œ¿ ™ŒÄ•/// {@template flutter.widgets.SelectionOverlay.hideMagnifier}
/// Hide the current magnifier.
///
/// This does nothing if there is no magnifier.
/// {@endtemplate}   ¿ ±UÅÃ¿ ±Z¿ ±Z  ¿ ±v¿ ±à¿ ±á   ¿ ≥%Åd¿ ≥*¿ ≥*  ¿ ≥G¿ ≥Z¿ ≥Y   ¿ µΩÅY¿ µ¬¿ µ¬  ¿ µ‹¿ µÏ¿ µÎ   ¿ º,Å¬¿ º1¿ º1  ¿ ºK¿ º]¿ º\   ¿ ΩÚÅ^¿ Ω˜¿ Ω˜  ¿ æ¿ æ%¿ æ$   ¿ ¿|ÅS¿ ¿Å¿ ¿Å  ¿ ¿ô¿ ¿©¿ ¿®   ¿ ◊Éx¿ ◊∑¿ ◊∑Äñ/// {@template flutter.widgets.SelectionOverlay.showHandles}
/// Builds the handles by inserting them into the [context]'s overlay.
/// {@endtemplate}   ¿ ⁄ëÅ]¿ €$¿ €$Äá/// {@template flutter.widgets.SelectionOverlay.hideHandles}
/// Destroys the handles by removing them from overlay.
/// {@endtemplate}   ¿ €ÚÉ¸¿ ‹ë¿ ‹ëÄì/// {@template flutter.widgets.SelectionOverlay.showToolbar}
/// Shows the toolbar by inserting it into the [context]'s overlay.
/// {@endtemplate} ¿ ‹û¿ ‹≠¿ ‹¨  ¿ ‹µ!¿ ‹≈¿ ‹ƒ   ¿ ﬂÚÇå¿ ‡l¿ ‡lp/// Shows toolbar with spell check suggestions of misspelled words that are
/// available for click-and-replace. ¿ ‡é¿ ‡ù¿ ‡ú  ¿ ‡•¿ ‡Ω¿ ‡º   ¿ ‚£ÖQ¿ ‚Ì¿ ‚ÌB/// Rebuilds the selection toolbar or handles if they are present.   ¿ Á¯Åi¿ Ëê¿ ËêÄå/// {@template flutter.widgets.SelectionOverlay.hide}
/// Hides the entire overlay including the toolbar and the handles.
/// {@endtemplate}   ¿ ÈeÅí¿ Í¿ ÍÄ©/// {@template flutter.widgets.SelectionOverlay.hideToolbar}
/// Hides the toolbar part of the overlay.
///
/// To hide the whole overlay, see [hide].
/// {@endtemplate}   ¿ Í˚Å∏¿ ÎÇ¿ ÎÇ{/// {@template flutter.widgets.SelectionOverlay.dispose}
/// Disposes this object and release resources.
/// {@endtemplate}   ¿ Ï∑Ñ0¿ Ïæ¿ Ïæ  ¿ Ï–¿ Ïﬁ¿ Ï›   ¿ ÎÑÔ¿ Ú¿ Ú  ¿ Ò¿ Ò¿ Ò   ¿ ˆÜa¿ ˆ¿ ˆ  ¿ ˆ%¿ ˆ3¿ ˆ2   ¿ ¸uÇp¿ ˛?¿ ˛?Å∞/// {@template flutter.widgets.SelectionOverlay.updateMagnifier}
/// Update the current magnifier with new selection data, so the magnifier
/// can respond accordingly.
///
/// If the magnifier is not shown, this still updates the magnifier position
/// because the magnifier may have hidden itself and is looking for a cue to reshow
/// itself.
///
/// If there is no magnifier in the overlay, this does nothing.
/// {@endtemplate} ¿ ˛O¿ ˛^¿ ˛]    ¿ rÅû¿ x¿ x  ¿ ¨Äã¿ ≤ ¿ ≤¿    ¿ —¿ ◊¿ ÷  ¿ Ê¿ ı¿ Ù  ¿¿¿  ¿¿,¿+   ¿;¿H¿H  ¿Q¿^¿^  ¿h¿x¿x  ¿Ö'¿¢¿¢   ¿±]¿›¿›   ¿±¿≤ ¿Ü7¿¿   ¿ä$¿£¿£  ¿≤3¿»¿»    ¿ÈÄ¯¿˙¿˙   ¿È¿Í¿ÂÅ^¿ˆ¿ˆ  ¿"¿ ¿  ¿Â¿Ê¿GÄí¿X¿X   ¿G¿H¿›Äü¿‚¿‚    ¿ÄÅ«¿ì¿ì  ¿ô¿ß¿¶  ¿Ä¿Å ¿KÑq¿ë¿ë?/// This widget represents a single draggable selection handle. ¿ƒÅß¿Í ¿Í¿	 /// Create selection overlay.
¿	¿	¿	  ¿	 ¿	/¿	.  ¿	C¿	I¿	H  ¿	e¿	k¿	j  ¿	ä ¿	ê¿	è  ¿	∞¿	∂¿	µ  ¿	”¿	‚¿	·  ¿	¯¿	˛¿	˝  ¿
!¿
¿
  ¿
40¿
:¿
9  ¿
M¿
^¿
_
¿
o¿
¿
  ¿
í+¿
¶¿
¶  ¿
¡@¿
Á¿
Á  ¿B¿,¿,  ¿K<¿o¿o  ¿ã-¿ß¿ß  ¿º'¿Ÿ¿Ÿ  ¿Á ¿Ù¿Ù  ¿"¿)¿)  ¿1)¿I¿I   ¿_[¿ä¿ä   ¿_¿` ¿æìÁ¿ƒ¿ƒ   ¿4$¿M¿M  ¿\3¿r¿r    ¿ìÄˆ¿§¿§   ¿ì¿î¿çÄû¿í¿í    ¿/Ç¿\¿\Å/// Returns the bounding [Rect] of the text selection handle in local
/// coordinates.
///
/// When interacting with a text selection handle through a touch event, the
/// interactive area should be at least [kMinInteractiveDimension] square,
/// which this method does not consider. ¿k¿Ñ¿É  ¿â¿ë¿ê   ¿PÅ¿a¿a  ¿q!¿ä¿â  ¿P¿Q¿eÄë¿v¿v   ¿e¿f¿˙ç©¿¿  ¿¿!¿   ¿˙¿˚ ¿ ßÑè¿#è¿#èÇÿ/// Delegate interface for the [TextSelectionGestureDetectorBuilder].
///
/// The interface is usually implemented by the [State] of text field
/// implementations wrapping [EditableText], so that they can use a
/// [TextSelectionGestureDetectorBuilder] to build a
/// [TextSelectionGestureDetector] for their [EditableText]. The delegate
/// provides the builder with information about the current state of the text
/// field. Based on that information, the builder adds the correct gesture
/// handlers to the gesture detector.
///
/// See also:
///
///  * [TextField], which implements this delegate for the Material text field.
///  * [CupertinoTextField], which implements this delegate for the Cupertino
///    text field.   ¿#øÄ¿¿$o¿$oÄä/// [GlobalKey] to the [EditableText] for which the
/// [TextSelectionGestureDetectorBuilder] will build a [TextSelectionGestureDetector].   ¿$ÉY¿$ ¿$ ;/// Whether the text field should respond to force presses.   ¿$‡T¿%#¿%#7/// Whether the user may select text in the text field.     ¿%8¿ ∑–¿)˛¿)˛Ñø/// Builds a [TextSelectionGestureDetector] to wrap an [EditableText].
///
/// The class implements sensible defaults for many user interactions
/// with an [EditableText] (see the documentation of the various gesture handler
/// methods, e.g. [onTapDown], [onForcePressStart], etc.). Subclasses of
/// [TextSelectionGestureDetectorBuilder] can change the behavior performed in
/// responds to these gesture events by overriding the corresponding handler
/// methods of this class.
///
/// The resulting [TextSelectionGestureDetector] to wrap an [EditableText] is
/// obtained by calling [buildGestureDetector].
///
/// A [TextSelectionGestureDetectorBuilder] must be provided a
/// [TextSelectionGestureDetectorBuilderDelegate], from which information about
/// the [EditableText] may be obtained. Typically, the [State] of the widget
/// that builds the [EditableText] implements this interface, and then passes
/// itself as the [delegate].
///
/// See also:
///
///  * [TextField], which uses a subclass to implement the Material-specific
///    gesture logic of an [EditableText].
///  * [CupertinoTextField], which uses a subclass to implement the
///    Cupertino-specific gesture logic of an [EditableText]. ¿*&u¿*] ¿*]¿*Ä 4/// Creates a [TextSelectionGestureDetectorBuilder].¿*Ç¿*ë¿*ê   ¿*üÅÃ¿,c¿,cÅt/// The delegate for this [TextSelectionGestureDetectorBuilder].
///
/// The delegate provides the builder with information about what actions can
/// currently be performed on the text field. Based on this, the builder adds
/// the correct gesture handlers to the gesture detector.
///
/// Typically implemented by a [State] of a widget that builds an
/// [EditableText].¿,$¿,%¿=S'¿=X¿=X ¿=v¿?Ä®¿?≠¿?≠Äá/// Whether the Shift key was pressed when the most recent [PointerDownEvent]
/// was tracked by the [BaseTapAndDragGestureRecognizer].¿?ø¿?…Äñ¿@C¿@Cn/// The viewport offset pixels of any [Scrollable] containing the
/// [RenderEditable] at the last drag start.¿@\¿@dv¿@º¿@ºN/// The viewport offset pixels of the [RenderEditable] at the last drag start.¿@◊¿CÙ"¿D¿D  ¿Eù*¿E¢¿E¢ ¿E¬¿/ÏÇ¿0:¿0:B/// Returns true if lastSecondaryTapDownPosition was on selection.   ¿<*Å&¿=¿=Äÿ/// Whether to show the selection toolbar.
///
/// It is based on the signal source when a [onTapDown] is called. This getter
/// will return true if current [onTapDown] event is triggered by a touch or
/// a stylus.   ¿=ÄÕ¿>¿>n/// The [State] of the [EditableText] for which the builder will provide a
/// [TextSelectionGestureDetector].  ¿=Ú¿=Û¿>PÄ»¿>Í¿>Íu/// The [RenderObject] of the [EditableText] for which the builder will
/// provide a [TextSelectionGestureDetector].  ¿> ¿>À¿@ﬂÅ0¿@Í¿@Í    ¿BÅ¿B&¿B&    ¿]~Ä ¿^)¿^)Äå/// Whether the provided [onUserTap] callback should be dispatched on every
/// tap or only non-consecutive taps.
///
/// Defaults to false.  ¿^¿^¿,⁄Ån¿,ﬂ¿,ﬂ  ¿-¿-¿-
   ¿.ùÅK¿.¢¿.¢    ¿1ÙÅ¿1˘¿1˘  ¿2¿2(¿2'   ¿3Å¿3¿3  ¿34¿3B¿3A   ¿5ıÉ=¿5˙¿5˙  ¿6¿6¿6  ¿6#¿6:¿69  ¿6F¿6V¿6U   ¿:&Ç ¿:+¿:+  ¿:<¿:D¿:C  ¿:K¿:b¿:a   ¿EÃÅΩ¿Fú¿FúÄ±/// Handler for [TextSelectionGestureDetector.onTapTrackStart].
///
/// See also:
///
///  * [TextSelectionGestureDetector.onTapTrackStart], which triggers this
///    callback.  ¿Fä¿Fã¿GçÅ¿H]¿H]Ä±/// Handler for [TextSelectionGestureDetector.onTapTrackReset].
///
/// See also:
///
///  * [TextSelectionGestureDetector.onTapTrackReset], which triggers this
///    callback.  ¿HK¿HL¿Hïè9¿J¿JÅJ/// Handler for [TextSelectionGestureDetector.onTapDown].
///
/// By default, it forwards the tap to [RenderEditable.handleTapDown] and sets
/// [shouldShowSelectionToolbar] to true if the tap was initiated by a finger or stylus.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onTapDown], which triggers this callback. ¿J¿J ¿J  ¿I¿IÒ¿W“ÇÍ¿Y_¿Y_Åd/// Handler for [TextSelectionGestureDetector.onForcePressStart].
///
/// By default, it selects the word at the position of the force press,
/// if selection is enabled.
///
/// This callback is only applicable when force press is enabled.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onForcePressStart], which triggers this
///    callback. ¿Yq¿YÑ¿YÉ  ¿YM¿YN¿Z¿Ç∫¿\S¿\SÅj/// Handler for [TextSelectionGestureDetector.onForcePressEnd].
///
/// By default, it selects words in the range specified in [details] and shows
/// toolbar if it is necessary.
///
/// This callback is only applicable when force press is enabled.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onForcePressEnd], which triggers this
///    callback. ¿\c¿\v¿\u  ¿\A¿\B¿^LÇ
¿`¿`Åñ/// Handler for [TextSelectionGestureDetector.onUserTap].
///
/// By default, it serves as placeholder to enable subclass override.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onUserTap], which triggers this
///    callback.
///  * [TextSelectionGestureDetector.onUserTapAlwaysCalled], which controls
///     whether this callback is called only on the first tap in a series
///     of taps.  ¿_˘¿_˙¿`Zñå¿al¿alÄÔ/// Handler for [TextSelectionGestureDetector.onSingleTapUp].
///
/// By default, it selects word edge if selection is enabled.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSingleTapUp], which triggers
///    this callback. ¿az¿aå¿aã  ¿aZ¿a[¿vÍÅu¿x¿xÄˇ/// Handler for [TextSelectionGestureDetector.onSingleTapCancel].
///
/// By default, it serves as placeholder to enable subclass override.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSingleTapCancel], which triggers
///    this callback.  ¿w˙¿w˚¿xcàñ¿y§¿y§Å/// Handler for [TextSelectionGestureDetector.onSingleLongTapStart].
///
/// By default, it selects text position specified in [details] if selection
/// is enabled.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSingleLongTapStart], which triggers
///    this callback. ¿yπ¿y–¿yœ  ¿yí¿yì¿Ä˝â∂¿ÇQ¿ÇQÅ//// Handler for [TextSelectionGestureDetector.onSingleLongTapMoveUpdate].
///
/// By default, it updates the selection location specified in [details] if
/// selection is enabled.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSingleLongTapMoveUpdate], which
///    triggers this callback. ¿Çk"¿Çá¿ÇÜ  ¿Ç?¿Ç@¿ä∑É¶¿ãƒ¿ãƒÄÍ/// Handler for [TextSelectionGestureDetector.onSingleLongTapEnd].
///
/// By default, it shows toolbar if necessary.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSingleLongTapEnd], which triggers this
///    callback. ¿ã◊¿ãÏ¿ãÎ  ¿ã≤¿ã≥¿éaÉ§¿è ¿è ÄÜ/// Handler for [TextSelectionGestureDetector.onSecondaryTap].
///
/// By default, selects the word if possible and shows the toolbar.  ¿éÓ¿éÔ¿í	É∂¿ì ¿ì Äˆ/// Handler for [TextSelectionGestureDetector.onSecondaryTapDown].
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSecondaryTapDown], which triggers this
///    callback.
///  * [onSecondaryTap], which is typically called after this. ¿ì3¿ìC¿ìB  ¿ì¿ì¿ï√ÇQ¿ó¿óÅ3/// Handler for [TextSelectionGestureDetector.onDoubleTapDown].
///
/// By default, it selects a word through [RenderEditable.selectWord] if
/// selectionEnabled and shows toolbar if necessary.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onDoubleTapDown], which triggers this
///    callback. ¿ó+¿ó?¿ó>  ¿ó	¿ó
¿òÄÅ(¿òÖ¿òÖ  ¿òü¿ò∞¿òØ  ¿òµ
¿òæ¿òΩ  ¿ò¡¿òŸ¿òÿ   ¿öÅ ¿ö¿ö  ¿ö)¿ö:¿ö9  ¿ö?
¿öH¿öG  ¿öK¿öc¿öb   ¿õ™Çã¿õ¥¿õ¥  ¿õ»¿õ÷¿õ’  ¿õ›¿õÎ¿õÍ   ¿üöÉı¿üü¿üü  ¿ü¬¿üŸ¿üÿ  ¿üÊ¿ü˜¿üˆ  ¿† 
¿†	¿†  ¿†¿†(¿†'   ¿£ìÑn¿•¿•ÅR/// Handler for [TextSelectionGestureDetector.onTripleTapDown].
///
/// By default, it selects a paragraph if
/// [TextSelectionGestureDetectorBuilderDelegate.selectionEnabled] is true
/// and shows the toolbar if necessary.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onTripleTapDown], which triggers this
///    callback. ¿•¿•0¿•/  ¿§˙¿§˚¿®ç¿©*¿©*Å/// Handler for [TextSelectionGestureDetector.onDragSelectionStart].
///
/// By default, it selects a text position specified in [details].
///
/// See also:
///
///  * [TextSelectionGestureDetector.onDragSelectionStart], which triggers
///    this callback. ¿©?¿©T¿©S  ¿©¿©¿µ$üì¿∂å¿∂åÅC/// Handler for [TextSelectionGestureDetector.onDragSelectionUpdate].
///
/// By default, it updates the selection location specified in the provided
/// details objects.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onDragSelectionUpdate], which triggers
///    this callback./lib/src/material/text_field.dart ¿∂¢¿∂∏¿∂∑  ¿∂z¿∂{¿‘ªÇ≈¿’Ù¿’ÙÅ/// Handler for [TextSelectionGestureDetector.onDragSelectionEnd].
///
/// By default, it cleans up the state used for handling certain
/// built-in behaviors.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onDragSelectionEnd], which triggers this
///    callback. ¿÷¿÷¿÷  ¿’‚¿’„¿◊ÑÖÇ¿ÿƒ¿ÿƒÅ,/// Returns a [TextSelectionGestureDetector] configured with the handlers
/// provided by this builder.
///
/// The [child] or its subtree should contain an [EditableText] whose key is
/// the [GlobalKey] provided by the [delegate]'s
/// [TextSelectionGestureDetectorBuilderDelegate.editableTextKey]. ¿ÿ⁄¿ÿ‡¿ÿﬂ  ¿ÿ‰¿ÿˆ¿ÿı  ¿ÿˇ¿Ÿ¿Ÿ    ¿›
ñ
¿ﬂ#¿ﬂ#Ç/// A gesture detector to respond to non-exclusive event chains for a text field.
///
/// An ordinary [GestureDetector] configured to handle events like tap and
/// double tap will only recognize one or the other. This widget detects both:
/// the first tap and then any subsequent taps that occurs within a time limit
/// after the first.
///
/// See also:
///
///  * [TextField], a Material text field which uses this gesture detector.
///  * [CupertinoTextField], a Cupertino text field which uses this gesture
///    detector. ¿ﬂ[Ç¯¿ﬂ‡ ¿ﬂ‡¿ﬂ¸ x/// Create a [TextSelectionGestureDetector].
///
/// Multiple callbacks can be called for one sequence of input gesture.¿‡	¿‡
¿‡	  ¿‡¿‡¿‡  ¿‡,¿‡2¿‡1  ¿‡F¿‡L¿‡K  ¿‡Z¿‡`¿‡_  ¿‡v¿‡|¿‡{  ¿‡ê¿‡ñ¿‡ï  ¿‡©¿‡Ø¿‡Æ  ¿‡∆¿‡Ã¿‡À  ¿‡ﬁ¿‡‰¿‡„  ¿‡˙¿· ¿‡ˇ  ¿·¿·¿·  ¿·-¿·3¿·2  ¿·Q¿·W¿·V  ¿·n¿·t¿·s  ¿·à¿·é¿·ç  ¿·¢¿·®¿·ß  ¿·¡¿·«¿·∆  ¿··¿·Á¿·Ê  ¿·˛"¿‚¿‚  ¿‚&¿‚,¿‚+  ¿‚9¿‚H¿‚G  ¿‚¿‚WÄ˛¿„F¿„FÄ“/// {@template flutter.gestures.selectionrecognizers.TextSelectionGestureDetector.onTapTrackStart}
/// Callback used to indicate that a tap tracking has started upon
/// a [PointerDownEvent].
/// {@endtemplate} ¿„ZÅ§¿‰Ô¿‰ÔÅt/// {@template flutter.gestures.selectionrecognizers.TextSelectionGestureDetector.onTapTrackReset}
/// Callback used to indicate that a tap tracking has been reset which
/// happens on the next [PointerDownEvent] after the timer between two taps
/// elapses, the recognizer loses the arena, the gesture is cancelled or
/// the recognizer is disposed of.
/// {@endtemplate} ¿ÂÄ˙¿ÂÙ¿ÂÙÄ»/// Called for every tap down including every tap down that's part of a
/// double click or a long press, except touches that include enough movement
/// to not qualify as taps (e.g. pans and flings). ¿ÊÄ–¿Ê¡¿Ê¡Äî/// Called when a pointer has tapped down and the force of the pointer has
/// just become greater than [ForcePressGestureRecognizer.startPressure]. ¿Ê◊Ä°¿Ái¿Áii/// Called when a pointer that had previously triggered [onForcePressStart] is
/// lifted off the screen. ¿Á}f¿Á’¿Á’;/// Called for a tap event with the secondary mouse button. ¿ÁËs¿ËI¿ËI@/// Called for a tap down event with the secondary mouse button. ¿Ë`ÅÖ¿Èÿ¿ÈÿÅK/// Called for the first tap in a series of taps, consecutive taps do not call
/// this method.
///
/// For example, if the detector was configured with [onTapDown] and
/// [onDoubleTapDown], three quick taps would be recognized as a single tap
/// down, followed by a tap up, then a double tap down, followed by a single tap down. ¿ÈÍÄ˛¿Í◊¿Í◊Ä…/// Called for each touch that becomes recognized as a gesture that is not a
/// short tap, such as a long tap or drag. It is called at the moment when
/// another gesture from the touch is recognized. ¿ÍÌÅ¿Î˛¿Î˛ÄÏ/// Called for the first tap in a series of taps when [onUserTapAlwaysCalled] is
/// disabled, which is the default behavior.
///
/// When [onUserTapAlwaysCalled] is enabled, this is called for every tap,
/// including consecutive taps. ¿ÏÅ¿Ï˙¿Ï˙Ä¬/// Called for a single long tap that's sustained for longer than
/// [kLongPressTimeout] but not necessarily lifted. Not called for a
/// double-tap-hold, which calls [onDoubleTapDown] instead. ¿ÌÄä¿ÌÑ¿ÌÑD/// Called after [onSingleLongTapStart] when the pointer is dragged. ¿Ì¢{¿Ó¿ÓC/// Called after [onSingleLongTapStart] when the pointer is lifted. ¿Ó"Ä¿¿Ó”¿Ó”Ää/// Called after a momentary hold or a short tap that is close in space and
/// time (within [kDoubleTapTimeout]) to a previous short tap. ¿ÓÁÄ¡¿Ôô¿ÔôÄã/// Called after a momentary hold or a short tap that is close in space and
/// time (within [kDoubleTapTimeout]) to a previous double-tap. ¿Ô≠q¿
¿
7/// Called when a mouse starts dragging to select text. ¿#r¿Ä¿Ä6/// Called repeatedly as a mouse moves while dragging. ¿öw¿ˇ¿ˇA/// Called when a mouse that was previously dragging is released. ¿ÒÄ∆¿Ò«¿Ò«Äü/// Whether [onUserTap] will be called for all taps including consecutive taps.
///
/// Defaults to false, so [onUserTap] is only called for each distinct tap. ¿Ò·Äû¿Úw¿Úwx/// How this gesture detector should behave during hit testing.
///
/// This defaults to [HitTestBehavior.deferToChild]. ¿ÚÑ1¿Ú∞¿Ú∞/// Child below this widget.  ¿Ú∫X¿Ú‹¿Ú‹   ¿Ú∫¿Úª ¿Û°—¿Û¿Û     ¿ÙÏÜ¿Ù˜¿Ù˜  ¿ı¿ı¿ı   ¿˙ˇE¿˚¿˚    ¿˚HE¿˚M¿˚M    ¿¸Çà¿¸¿¸  ¿¸¿¸0¿¸/   ¿˛îÅ¿˛ô¿˛ô  ¿˛¶¿˛∏¿˛∑   ¿ˇ∑C¿ˇº¿ˇº    ¿ˇ˛h¿ ¿   ¿ ¿ )¿ (   ¿ jk¿ o¿ o  ¿ Å¿ ó¿ ñ   ¿ Ÿb¿ ﬁ¿ ﬁ  ¿ Ì¿ ¿ ˇ   ¿?e¿D¿D  ¿W¿j¿i   ¿®a¿≠¿≠  ¿æ¿—¿–   ¿Ä°¿¿  ¿(¿?¿>   ¿≤Äµ¿∑¿∑  ¿“"¿Ó¿Ì   ¿kÄô¿p¿p  ¿Ñ¿ô¿ò   ¿ê›¿¿  ¿!¿/¿.  ¿¿	 ¿Èâì¿8¿8ÅH/// A [ValueNotifier] whose [value] indicates whether the current contents of
/// the clipboard can be pasted.
///
/// The contents of the clipboard can only be read asynchronously, via
/// [Clipboard.getData], so this maintains a value that can be used
/// synchronously. Call [update] to asynchronously update value if needed. ¿óÄÜ¿√ ¿√¿⁄ )/// Create a new ClipboardStatusNotifier.¿‹/¿Ì¿Ï  ¿Ù¿¿¿¿¿¿¿!¿&¿& ¿2 ¿<É¶¿É¿É7/// Check the [Clipboard] and update [value] if needed.   ¿ÊÄÏ¿˜¿˜  ¿¿¿  ¿Ê¿Á¿÷Ä¡¿Á¿Á  ¿ˆ¿¿  ¿÷¿◊¿õÅ^¿¨¿¨  ¿«¿⁄¿Ÿ  ¿õ¿ú¿˝}¿¿   ¿˝¿˛ ¿ àäë¿";¿";Å¨/// A [ValueNotifier] whose [value] indicates whether the current device supports the Live Text
/// (OCR) function.
///
/// See also:
///  * [LiveText], where the availability of Live Text input can be obtained.
///  * [LiveTextInputStatus], an enumeration that indicates whether the current device is available
///                           for Live Text input.
///
/// Call [update] to asynchronously update [value] if needed. ¿"¶Äï¿"— ¿"—¿"Ï (/// Create a new LiveTextStatusNotifier.¿"Ó7¿#¿#  ¿#
¿#¿#¿#.¿#3¿#9¿#4¿#?¿#D¿#D ¿#P ¿#ZÑ2¿#´¿#´A/// Check the [LiveTextInputStatus] and update [value] if needed.   ¿'êÄ¿'°¿'°  ¿'≠¿'ª¿'∫  ¿'ê¿'ë¿(ÑÄ¡¿(ï¿(ï  ¿(§¿(≤¿(±  ¿(Ñ¿(Ö¿)IÅM¿)Z¿)Z  ¿)u¿)à¿)á  ¿)I¿)J¿*ö}¿*´¿*´   ¿*ö¿*õ  ¿~Ç¿Ã¿ÃH/// An enumeration of the status of the content on the user's clipboard.  ¿‡X¿/¿/L/// The clipboard content can be pasted, such as a String of nonzero length. ¿=ÄÊ¿ ¿ Äÿ/// The status of the clipboard is unknown. Since getting clipboard data is
/// asynchronous (see [Clipboard.getData]), this status often exists while
/// waiting to receive the clipboard contents for the first time. ¿ ([¿ w¿ wL/// The content on the clipboard is not pasteable, such as when it is empty.    ¿+Çp¿+ﬂ¿+ﬂÄæ/// An enumeration that indicates whether the current device is available for Live Text input.
///
/// See also:
///  * [LiveText], where the availability of Live Text input can be obtained.  ¿+˜=¿,-¿,-3/// This device supports Live Text input currently. ¿,9Å¿-:¿-:Ä˙/// The status of the Live Text input is unknown. Since getting the Live Text input availability
/// is asynchronous (see [LiveText.isLiveTextInputAvailable]), this status often exists while
/// waiting to receive the status value for the first time. ¿-FB¿-Ä¿-Ä7/// The current device doesn't support Live Text input.         ÑnÅÑÖ≠Ö≠Å6/// The type for a Function that builds a toolbar's container with the given
/// child.
///
/// See also:
///
///   * [TextSelectionToolbar.toolbarBuilder], which is of this type.
///     type.
///   * [CupertinoTextSelectionToolbar.toolbarBuilder], which is similar, but
///     for a Cupertino-style toolbar.  ÖŒÖ‹Ö€  Ö‰ÖÏÖÎ   ¿.bÑπ¿.Ò¿.ÒÄà/// [TextSelectionControls] that specifically do not manage the toolbar in order
/// to leave that to [EditableText.contextMenuBuilder].    	¿/*Å_¿/=¿/=  ¿/O¿/]¿/\  ¿/i¿/o¿/n  ¿/à¿/ê¿/è  ¿/£¿/´¿/™  ¿/¡"¿/€¿/⁄  ¿/È¿0 ¿/ˇ  ¿01¿00¿0/  ¿0D$¿0M¿0L  ¿/*¿/+¿0çA¿0û¿0û  ¿0•¿0º¿0ª  ¿0ç¿0é¿0“B¿0„¿0„  ¿0Î¿1¿1  ¿0“¿0”¿1C¿1)¿1)  ¿12¿1I¿1H  ¿1¿1¿1_G¿1p¿1p  ¿1}¿1î¿1ì  ¿1_¿1`¿1™i¿1ª¿1ª  ¿1≈¿1‹¿1€  ¿1Ê(¿2 ¿1ˇ  ¿1™¿1´¿2j¿2(¿2(  ¿23¿2J¿2I  ¿2T(¿2n¿2m  ¿2¿2¿2ÖM¿2û¿2û  ¿2™¿2¡¿2¿  ¿2Ö¿2Ü¿2÷C¿2Á¿2Á  ¿2˜¿3¿3  ¿2÷¿2◊ ¨]Ç+ÆOÆOÅ’/// Text selection controls that do not show any toolbars or handles.
///
/// This is a placeholder, suitable for temporary use during development, but
/// not practical for production. For example, it provides no way for the user
/// to interact with selections: no context menus on desktop, no toolbars or
/// drag handles on mobile, etc. For production, consider using
/// [materialTextSelectionControls] or creating a custom subclass of
/// [TextSelectionControls].ÆlÆÜÆá   ÄÆ  package:flutter/cupertino.dart  Äﬂ  package:flutter/material.dart é˙ <ÄÜÄ§Ä•Ä÷ÅÅÅÅ%ÅAÅBÅoÅôÅ¡ÅÍÇÇ;Ç<ÇQÇhÇÅÇ®ÇΩÇ⁄ÇÚÉÉ+ÉJÉcÉzÉîÉÆÉÕÉËÉÈÑ*ÑmÑnÑªÑ∆Ñ ÑÿÑ‹Ö"Ö0Ö~Ö•ÖÛÖÙÜDÜHÜôÜ‰á	áRá~áÑá’àà5à6àBàäàåàçà”à˙à˛âOâõâºâ¿âÚâˆä:äàäÿãããDãìã‰åå?åCåìå›çççÄçÑçíçñç‡éé-ébéhé¥éŒé‘è$ètè¿èÙê
ê$êFêcê|êÇêÉê‘ë ëPëüë†ëŒë‘íííhíìíôíÍì'ì-ìwì∫ìÓì˝î&î_îcîzîîî≥îŒîÏïï8ïoïôïûïüïœï¸ï˝ñHñêñ£ñ©ñ˘ñˇóEófóuóûó◊ó€òò_òcòdòØò‚òËô8ô>ôÖô¶ôµôﬁöööLö°ö•ö¶öÙõõõ\õ}õÉõ”ú ú.ú=úfúüú£ú’ú˜ú˚ú¸ùGùíùüù•ùÚûû"ûKûÑûàûæûÊüüTüXüYü£ü©üˆ†††>†w†{†Æ†Ë†Ï†Ì°9°?°ç°ù°¨°’¢¢¢F¢Å¢Ö¢Ü¢¬¢»££'£-£y£¬£’§§%§N§á§ã§Œ••	•
•W•|•Ç•£•©•˙¶¶¶E¶~¶Ç¶ª¶Ú¶ˆ¶¯¶˘ß?ßCßëß‡®-®m®≤®œ®”©©3©t©Ä©∫©ª©«©ﬁ©¯™™2™P™x™ú™”™˝´´´*´@´Z´|´ô´≤´π´›´·´‚´Ó¨>¨V¨Z¨\¨]¨£¨ß¨ı≠D≠ë≠—ÆÆ3ÆäÆãÆÕÆ„ÆÁØ6ØÅØ°Øæ∞
∞∞K∞d∞â∞§∞¬∞Î±±C±c±±†±≈≤≤3≤a≤~≤æ≤Á≤ˇ≥?≥w≥£≥‚¥¥?¥U¥^¥d¥ƒµ"µQµ{µ±µ…µÛ∂'∂a∂ù∂ª∂ˇ∑E∑r∑™∑‚∑˛∏>∏Ä∏Ø∏‚ππFπrπöπÃπ˙∫$∫\∫à∫ ∫—∫’∫÷ªªLªRªüª‡ªıººº_º®ºÔΩΩΩWΩâΩäΩÃΩ˝Ω˛æ/æ0æoæuæ´æ÷æ◊æıø
ø2ø3øNøOøÉøÑøﬁ¿ @6¿ @å¿ @ç¿ @¿¿ @Ï¿ A4¿ A^¿ A§¿ AÃ¿ B.¿ B2¿ B3¿ B`¿ Bf¿ B∑¿ BÊ¿ BÏ¿ C¿ C3¿ CS¿ Cx¿ Cû¿ C¨¿ C≤¿ C—¿ D ¿ D¿ D¿ DA¿ DX¿ Dw¿ Dú¿ D†¿ D°¿ D›¿ E¿ E¿ ES¿ Ej¿ Eâ¿ Eä¿ E‰¿ F¿ F¿ F¿ F ¿ FF¿ FT¿ FZ¿ F[¿ Fx¿ F’¿ F·¿ FÂ¿ FÊ¿ G4¿ G[¿ G∏¿ G◊¿ GÙ¿ H,¿ HD¿ Hx¿ H¿ Hí¿ Hñ¿ Hó¿ H’¿ I¿ IW¿ Iv¿ Iõ¿ I≤¿ IŸ¿ J¿ J.¿ J7¿ J>¿ JB¿ JC¿ JÉ¿ J≥¿ K¿ K&¿ KM¿ Kd¿ Kã¿ K∫¿ K‡¿ KÈ¿ K¿ KÙ¿ Kı¿ L3¿ LL¿ Ls¿ Lw¿ Lx¿ L≥¿ Lπ¿ M¿ MU¿ M•¿ MÓ¿ N>¿ Né¿ Nø¿ NÍ¿ O¿ O¿ O¿ O3¿ OR¿ Oû¿ OÌ¿ P>¿ PL¿ Pt¿ Px¿ Py¿ Pú¿ P≤¿ P‹¿ Q¿ Q'¿ QM¿ Qt¿ Q|¿ QØ¿ Q‘¿ Q¯¿ R¿ RE¿ RM¿ R|¿ Rß¿ Rˆ¿ S;¿ S?¿ S@¿ Sr¿ Sx¿ S…¿ T¿ T¿ T<¿ Tã¿ T€¿ T¿ U¿ U¿ U¿ UN¿ U§¿ U•¿ UÊ¿ UÏ¿ U¸¿ V¿ VU¿ Vx¿ Vª¿ Vº¿ VÓ¿ W=¿ W>¿ Ww¿ W}¿ Wç¿ Wì¿ W⁄¿ X;¿ X<¿ Xq¿ Xú¿ Xù¿ XŸ¿ Y¿ Y¿ YK¿ Y^¿ Yû¿ Y÷¿ Z¿ ZP¿ ZV¿ Zw¿ Z⁄¿ [;¿ [f¿ [ï¿ [¬¿ [’¿ [Ÿ¿ [⁄¿ [¸¿ \A¿ \l¿ \á¿ \Ã¿ ]¿ ]f¿ ]Æ¿ ]˝¿ ^E¿ ^n¿ ^Õ¿ _¿ _d¿ _£¿ `¿ `¿ `¿ `[¿ `_¿ ``¿ `Ä¿ `≈¿ `Ô¿ a¿ a<¿ aõ¿ a„¿ b0¿ bm¿ b…¿ b“¿ bÿ¿ c¿ c"¿ c#¿ cE¿ cq¿ cú¿ cÀ¿ c“¿ d.¿ di¿ dí¿ dπ¿ d¿¿ d¡¿ dË¿ eJ¿ eK¿ eÅ¿ e—¿ f¿ f%¿ fD¿ fù¿ fÏ¿ g.¿ gH¿ gc¿ gj¿ gk¿ g≈¿ h&¿ h'¿ hQ¿ h°¿ h¢¿ hº¿ i¿ iO¿ ir¿ i¶¿ i≠¿ i±¿ i≤¿ j¿ j:¿ j`¿ ja¿ j±¿ j›¿ k¿ k¿ kG¿ km¿ kn¿ k¥¿ k÷¿ k‰¿ kÍ¿ kÎ¿ l#¿ l$¿ lu¿ l∑¿ l‹¿ m?¿ m§¿ mÔ¿ n=¿ nã¿ n€¿ nÊ¿ o*¿ og¿ on¿ oñ¿ oó¿ oº¿ o”¿ o˙¿ p1¿ pW¿ p`¿ pg¿ pk¿ pl¿ pº¿ p“¿ pÿ¿ q$¿ qt¿ q¿¿ r¿ r"¿ r(¿ ry¿ r«¿ s¿ sg¿ sì¿ sô¿ sÊ¿ t7¿ to¿ t•¿ t„¿ u ¿ u\¿ u£¿ uß¿ u®¿ u¿ v¿ v ¿ v&¿ vO¿ vP¿ vû¿ vÁ¿ w<¿ w=¿ w}¿ wï¿ wﬂ¿ wÊ¿ x¿ xW¿ xX¿ xÜ¿ xß¿ x‹¿ x„¿ x‰¿ y<¿ y=¿ yi¿ yí¿ y´¿ y‘¿ z¿ z5¿ z@¿ zI¿ zJ¿ zù¿ z‘¿ z‚¿ zË¿ zÈ¿ {¿ {4¿ {¿ {û¿ {ø¿ |¿ |R¿ |Ñ¿ |÷¿ |¸¿ }¿ }=¿ }q¿ }®¿ }—¿ }‹¿ }ˇ¿ ~"¿ ~C¿ ~f¿ ~å¿ ~π¿ ~‚¿ ~Ì¿ 1¿ b¿ l¿ r¿ s¿ §¿ •¿ Ã¿ „¿ Ä¿ ÄL¿ Är¿ Ä{¿ ÄÇ¿ ÄÜ¿ Äá¿ Ä÷¿ Å¿ Å9¿ Å:¿ Åâ¿ Å∏¿ Åﬁ¿ Åﬂ¿ Ç'¿ ÇI¿ ÇW¿ Ç]¿ Ç^¿ Çò¿ Çô¿ ÇÍ¿ É,¿ ÉQ¿ Éµ¿ Ñ¿ Ñg¿ Ñµ¿ Ö¿ ÖS¿ Ö^¿ Ö¢¿ Öﬂ¿ ÖÊ¿ Ü¿ Ü¿ Ü4¿ ÜK¿ Ür¿ Ü©¿ Üœ¿ Üÿ¿ Üﬂ¿ Ü„¿ Ü‰¿ á.¿ áP¿ á^¿ ád¿ áç¿ áé¿ á‹¿ à%¿ àz¿ àº¿ à‘¿ â ¿ â'¿ âF¿ âú¿ â ¿ âÎ¿ ä$¿ ä+¿ äÉ¿ äÑ¿ ä∞¿ äŸ¿ äÚ¿ ã¿ ãT¿ ã|¿ ãá¿ ãê¿ ãë¿ ã‰¿ å¿ å)¿ å/¿ å0¿ åV¿ å{¿ å∆¿ åÂ¿ ç¿ çe¿ çô¿ çÀ¿ é¿ éC¿ éY¿ éÑ¿ é∫¿ éÔ¿ è¿ è#¿ èF¿ èi¿ èä¿ è≠¿ è”¿ è˙¿ ê+¿ ê6¿ êz¿ ê´¿ êµ¿ êª¿ êº¿ ê„¿ ê˙¿ ë¿ ëY¿ ë¿ ë§¿ ë€¿ í¿ í
¿ í¿ í¿ íC¿ íG¿ íH¿ í{¿ íó¿ í•¿ í´¿ íÀ¿ ì¿ ì1¿ ìV¿ ì¿ ìá¿ ìï¿ ìõ¿ ì¬¿ ìÂ¿ îD¿ îJ¿ îN¿ îO¿ îí¿ îƒ¿ îÙ¿ ï¿ ï¿ ï!¿ ï"¿ ïI¿ ïj¿ ïè¿ ï¥¿ ï∫¿ ï‹¿ ñ¿ ñ¿ ñ¿ ñ7¿ ñ[¿ ñ¿ ñÜ¿ ñä¿ ñå¿ ñç¿ ñ”¿ ñ◊¿ ó"¿ óI¿ ób¿ óÆ¿ ó¥¿ óÔ¿ ò¿ ò¿ ò:¿ òp¿ òó¿ òµ¿ ò÷¿ ò¯¿ ô¿ ôK¿ ôp¿ ôå¿ ô´¿ ôÀ¿ ôË¿ ö¿ ö;¿ ö`¿ öq¿ ö≠¿ öË¿ öÓ¿ õ¿ õ6¿ õ^¿ õÑ¿ õ®¿ õﬁ¿ ú ¿ ú¿ úM¿ úà¿ úé¿ ú´¿ úÚ¿ ù¿ ùL¿ ùs¿ ùû¿ ùœ¿ ù˙¿ û)¿ ûi¿ û°¿ ûÕ¿ ü¿ ü=¿ üe¿ ü{¿ üÑ¿ üä¿ üé¿ üè¿ ü«¿ üÂ¿ üÊ¿ †:¿ †S¿ †X¿ †Y¿ †¶¿ †˜¿ °A¿ °è¿ °º¿ ¢¿ ¢¿ ¢2¿ ¢8¿ ¢â¿ ¢è¿ ¢æ¿ ¢˘¿ ¢˙¿ £>¿ £n¿ £t¿ £Ω¿ £“¿ £¿ §,¿ §}¿ §¡¿ §≈¿ §∆¿ •¿ •_¿ ••¿ •˝¿ ¶¿ ¶"¿ ¶k¿ ¶µ¿ ¶ÿ¿ ¶Ì¿ ß(¿ ßD¿ ßY¿ ß_¿ ß`¿ ß°¿ ß“¿ ß”¿ ®¿ ®]¿ ®Ñ¿ ®–¿ ®ﬂ¿ ®˚¿ ©¿ ©¿ ©¿ ©;¿ ©I¿ ©O¿ ©P¿ ©o¿ ©á¿ ©Â¿ ™¿ ™¿ ™¿ ™¿ ™X¿ ™z¿ ™Ä¿ ™≤¿ ™«¿ ™‡¿ ´$¿ ´i¿ ´•¿ ´⁄¿ ´Ë¿ ´Ó¿ ´Ô¿ ¨¿ ¨¿ ¨¿ ¨?¿ ¨E¿ ¨î¿ ¨◊¿ ≠¿ ≠:¿ ≠_¿ ≠m¿ ≠s¿ ≠ë¿ ≠ß¿ ≠´¿ ≠¨¿ ≠⁄¿ ≠‡¿ Æ1¿ Æ7¿ ÆÜ¿ Æº¿ ÆŸ¿ Ø¿ Ø(¿ Ø6¿ Ø<¿ Ø\¿ Ør¿ Øv¿ Øw¿ Øû¿ Øü¿ Ø ¿ Ø–¿ ∞!¿ ∞E¿ ∞K¿ ∞ï¿ ∞…¿ ∞ ¿ ±¿ ±R¿ ±S¿ ±í¿ ±∑¿ ≤¿ ≤W¿ ≤s¿ ≤ô¿ ≤ß¿ ≤≠¿ ≤Û¿ ≥¿ ≥"¿ ≥#¿ ≥d¿ ≥¥¿ ¥¿ ¥ ¿ ¥F¿ ¥T¿ ¥Z¿ ¥Ü¿ ¥ä¿ ¥ã¿ ¥⁄¿ µ¿ µ¿ µo¿ µ~¿ µ∫¿ µª¿ µˆ¿ ∂¿ ∂j¿ ∂∫¿ ∂÷¿ ∂‰¿ ∂Í¿ ∑¿ ∑¿ ∑¿ ∑@¿ ∑F¿ ∑ï¿ ∑‘¿ ∑˛¿ ∏3¿ ∏V¿ ∏d¿ ∏j¿ ∏Ü¿ ∏ú¿ ∏†¿ ∏°¿ ∏Õ¿ ∏”¿ π"¿ π(¿ πw¿ π©¿ πƒ¿ πÍ¿ ∫¿ ∫¿ ∫#¿ ∫A¿ ∫W¿ ∫[¿ ∫\¿ ∫Å¿ ∫Ç¿ ∫´¿ ∫±¿ ª ¿ ª$¿ ª*¿ ªr¿ ª§¿ ª•¿ ªÎ¿ º)¿ º*¿ ºg¿ ºä¿ º⁄¿ Ω*¿ ΩF¿ Ωj¿ Ωx¿ Ω~¿ Ω¬¿ ΩÎ¿ ΩÔ¿ Ω¿ æ/¿ æ¿ æœ¿ æÎ¿ ø¿ ø¿ ø#¿ øM¿ øQ¿ øR¿ øü¿ øﬂ¿ ø‡¿ ¿0¿ ¿?¿ ¿y¿ ¿z¿ ¿≥¿ ¿’¿ ¡%¿ ¡u¿ ¡ë¿ ¡ü¿ ¡•¿ ¡Ã¿ ¡–¿ ¡—¿ ¡˜¿ ¡˝¿ ¬I¿ ¬m¿ ¬s¿ ¬≠¿ ¬‹¿ ¬›¿ √¿ √f¿ √ñ¿ √—¿ ƒ¿ ƒ¿ ƒX¿ ƒÅ¿ ƒ®¿ ƒ’¿ ƒ¸¿ ≈¿ ≈D¿ ≈i¿ ≈ê¿ ≈£¿ ≈≠¿ ≈µ¿ ≈ª¿ ≈‹¿ ≈‡¿ ≈·¿ ∆+¿ ∆M¿ ∆N¿ ∆ü¿ ∆¨¿ ∆–¿ ∆—¿ «¿ «H¿ «p¿ «q¿ «æ¿ «Ê¿ »¿ »¿ »R¿ »É¿ »ò¿ » ¿ »À¿ …¿ …X¿ …j¿ …¿ …é¿ …∑¿ …¿ …Ù¿  &¿  '¿  e¿  k¿  ∞¿  ¸¿ ÀF¿ Àe¿ Àk¿ À∂¿ Ã¿ Ã5¿ Ã;¿ ÃÉ¿ Ãâ¿ Ãô¿ Ãü¿ Õ¿ Õ4¿ Õ5¿ ÕÄ¿ ÕŒ¿ Õ‘¿ Œ ¿ Œg¿ Œ™¿ Œ˘¿ œ*¿ œy¿ œ∆¿ œ¯¿ –¿ –]¿ –r¿ –°¿ –¢¿ –Ú¿ —
¿ —¿ —[¿ —ã¿ —Ω¿ —æ¿ “	¿ “/¿ “5¿ “É¿ “±¿ “∑¿ ”¿ ”!¿ ”0¿ ”x¿ ”±¿ ”µ¿ ”Ë¿ ‘¿ ‘+¿ ‘P¿ ‘^¿ ‘d¿ ‘Ç¿ ‘ò¿ ‘ú¿ ‘ù¿ ‘Ì¿ ’1¿ ’2¿ ’¿ ’∑¿ ’Ì¿ ’Ó¿ ÷
¿ ÷$¿ ÷%¿ ÷k¿ ÷ª¿ ÷º¿ ◊¿ ◊¿ ◊R¿ ◊õ¿ ◊∞¿ ◊«¿ ◊„¿ ◊Ò¿ ◊˜¿ ◊¯¿ ÿ%¿ ÿ4¿ ÿM¿ ÿw¿ ÿ~¿ ÿ¿ ÿ¡¿ ÿ÷¿ ÿÒ¿ ÿ¯¿ ÿ˘¿ Ÿ
¿ Ÿ%¿ ŸO¿ Ÿë¿ Ÿú¿ Ÿ•¿ Ÿæ¿ ŸË¿ ⁄(¿ ⁄3¿ ⁄<¿ ⁄C¿ ⁄ä¿ ⁄é¿ ⁄è¿ ⁄Œ¿ €¿ €¿ €4¿ €P¿ €p¿ €ë¿ €Ø¿ €Œ¿ €Â¿ €Î¿ €Ô¿ €¿ ‹/¿ ‹u¿ ‹ä¿ ‹€¿ ›¿ ›¿ ›/¿ ›7¿ ›n¿ ›Ä¿ ›ñ¿ ›±¿ ››¿ ›¯¿ ﬁ¿ ﬁ¿ ﬁ¿ ﬁ(¿ ﬁ6¿ ﬁ<¿ ﬁ=¿ ﬁá¿ ﬁ®¿ ﬁ¿¿ ﬁÛ¿ ﬂ¿ ﬂB¿ ﬂi¿ ﬂ¢¿ ﬂ–¿ ﬂ€¿ ﬂ‰¿ ﬂÎ¿ ﬂÔ¿ ﬂ¿ ‡>¿ ‡e¿ ‡»¿ ‡„¿ ‡Ò¿ ‡˜¿ ‡¯¿ ·B¿ ·i¿ ·Å¿ ·¥¿ ·›¿ ‚¿ ‚=¿ ‚`¿ ‚k¿ ‚t¿ ‚{¿ ‚¿ ‚Ä¿ ‚†¿ ‚°¿ ‚Ê¿ „ ¿ „0¿ „>¿ „D¿ „è¿ „»¿ ‰"¿ ‰?¿ ‰O¿ ‰W¿ ‰u¿ ‰¿¿ ‰·¿ Â¿ Â3¿ ÂW¿ ÂÖ¿ Â∏¿ ÂÛ¿ Ê,¿ Ê6¿ Êo¿ Ê|¿ Êö¿ Êƒ¿ ÊÏ¿ ÊÙ¿ Á¿ ÁB¿ Ás¿ Á¨¿ Á„¿ ÁÎ¿ ÁÒ¿ Áı¿ Áˆ¿ Ë.¿ Ët¿ Ëâ¿ Ëô¿ Ë∫¿ ËÕ¿ ËÈ¿ È¿ ÈC¿ ÈX¿ È^¿ Èb¿ Èc¿ È¢¿ Èœ¿ È’¿ Í¿ Í¿ Í.¿ ÍS¿ Í~¿ Íö¿ Í®¿ ÍÆ¿ Í∆¿ Íﬂ¿ ÍÙ¿ Í¯¿ Í˘¿ Î4¿ Îf¿ Î{¿ Îé¿ ÎŒ¿ Ï¿ Ï2¿ ÏÄ¿ ÏÜ¿ Ïí¿ Ï∞¿ Ï¥¿ Ïµ¿ ÏË¿ Ì¿ ÌN¿ Ìs¿ ÌŒ¿ Ó¿ Ó1¿ ÓY¿ Óf¿ Óé¿ ÓÆ¿ Ó›¿ Ô¿ ÔX¿ Ôõ¿ Ôÿ¿ ¿ /¿ `¿ é¿ ó¿ ù¿ ‰¿ Ë¿ È¿ Ò¿ Ò3¿ ÒÄ¿ Ò•¿ Ú ¿ Ú@¿ Úg¿ Úç¿ ÚÊ¿ Û2¿ ÛZ¿ Ûg¿ Ûè¿ Û≠¿ Û⁄¿ Ù¿ ÙS¿ Ùî¿ Ùœ¿ Ù˝¿ ı$¿ ıS¿ ıÅ¿ ıä¿ ıê¿ ı◊¿ ı€¿ ı‹¿ ˆ¿ ˆ=¿ ˆb¿ ˆà¿ ˆé¿ ˆö¿ ˆª¿ ˜¿ ˜	¿ ˜
¿ ˜Y¿ ˜Z¿ ˜ä¿ ˜∂¿ ˜˛¿ ¯¿ ¯¿ ¯#¿ ¯á¿ ¯à¿ ¯›¿ ˘¿ ˘¿ ˘3¿ ˘Y¿ ˘≥¿ ˘¥¿ ˘ÿ¿ ˘‰¿ ˙ ¿ ˙]¿ ˙d¿ ˙e¿ ˙ä¿ ˙¨¿ ˙œ¿ ˙ı¿ ˚¿ ˚5¿ ˚g¿ ˚|¿ ˚ó¿ ˚∂¿ ˚Ã¿ ˚Ï¿ ¸¿ ¸)¿ ¸F¿ ¸S¿ ¸^¿ ¸g¿ ¸n¿ ¸r¿ ¸s¿ ¸∂¿ ˝¿ ˝"¿ ˝(¿ ˝w¿ ˝Õ¿ ˝€¿ ˝·¿ ˛#¿ ˛8¿ ˛n¿ ˛£¿ ˛±¿ ˛∑¿ ˛∏¿ ˛‚¿ ˛Ê¿ ˛Ë¿ ˛È¿ ˇ5¿ ˇÑ¿ ˇ ¿ ˇ˛¿ K¿ r¿ ™¿ Õ¿ ‚¿ ˇ¿¿2¿8¿9¿O¿f¿É¿Æ¿Ø¿ª¿¿¿¿^¿à¿∞¿Ê¿Á¿Û¿¿¿ ¿}¿~¿ü¿ﬁ¿‚¿„¿Ô¿,¿R¿á¿ï¿õ¿‡¿¿@¿D¿E¿Q¿d¿¶¿¡¿÷¿⁄¿€¿ ¿,¿I¿V¿s¿y¿}¿~¿ä¿±¿–¿Ì¿%¿D¿a¿è¿≥¿ÿ¿˚¿¿)¿4¿=¿D¿H¿J¿K¿ã¿¬¿‚¿	¿	¿	?¿	a¿	Ü¿	¨¿	œ¿	Ù¿
	¿
0¿
f¿
l¿
m¿
ê¿
ø¿¿I¿â¿∫¿Â¿	¿/¿\¿]¿i¿ª¿Ω¿æ¿¿2¿Z¿ê¿ë¿ù¿≤¿…¿ ¿'¿(¿H¿Ü¿ä¿ã¿Ø¿€¿¯¿¿"¿(¿,¿-¿u¿à¿é¿›¿*¿U¿ß¿ ¿I¿M¿N¿Z¿ñ¿º¿ ¿ ¿^¿b¿c¿o¿Ç¿√¿ﬁ¿Û¿˜¿¯¿¿+¿Ä¿Å¿Œ¿¿c¿j¿¢¿Â¿*¿m¿≤¿π¿∫¿¿¿9¿@¿A¿è¿‚¿˛¿.¿j¿ü¿†¿»¿Ï¿1¿r¿ë¿Æ¿…¿‚¿
¿4¿L¿v¿ù¿“¿¿n¿ú¿¬¿¿M¿|¿¨¿›¿Ù¿	¿=¿Z¿ü¿…¿¿N¿s¿∑¿˝¿>¿S¿f¿w¿ï¿ø¿Â¿	¿1¿[¿n¿´¿∆¿Â¿ ¿ E¿ X¿ i¿ x¿ Ö¿ ê¿ ô¿ †¿ §¿ ¶¿ ß¿ Ì¿ Ò¿!7¿!{¿!∞¿!˙¿"H¿"ì¿"π¿"Ω¿"À¿"œ¿#¿#m¿#Ä¿#Ω¿#Û¿$L¿$Ä¿$Å¿$ø¿$›¿$ﬁ¿%¿%5¿%7¿%8¿%¿%É¿%…¿&¿&c¿&≤¿&ˇ¿'¿'¿'l¿'ú¿'†¿'ﬂ¿(/¿(|¿( ¿(Ë¿(Ï¿(˙¿(˛¿)K¿)v¿)∫¿)¯¿*$¿*[¿*ú¿*ù¿*‡¿*Ê¿+6¿+Ü¿+¬¿+»¿,¿,"¿,/¿,m¿,n¿,Ω¿,ÿ¿-¿-A¿-d¿-É¿-∑¿-⁄¿-˚¿.¿.?¿.E¿.I¿.J¿.õ¿. ¿.Ô¿/¿/1¿/W¿/z¿/õ¿/º¿/ﬂ¿/Â¿/È¿/Í¿0/¿0\¿0ù¿0…¿0›¿0„¿0‰¿1.¿1b¿1i¿1j¿1Ø¿1Ì¿1Ò¿1Ú¿27¿2v¿2ì¿2ß¿2≠¿2Æ¿3¿3¿3¿3Q¿3ê¿3≠¿3¡¿3«¿3»¿4#¿4'¿4(¿4`¿4e¿4µ¿4˚¿5 ¿5O¿5y¿5~¿5ç¿5í¿5‡¿5Û¿6¿6¿6B¿6d¿6k¿6•¿6¶¿6˙¿7J¿7h¿7ß¿7Á¿8#¿8s¿8û¿8•¿8¶¿8”¿9¿9(¿9/¿93¿94¿9l¿9q¿9§¿9©¿9∏¿9Ω¿:¿:$¿:j¿:§¿:•¿:˘¿;8¿;ô¿;ö¿;«¿<¿<¿<#¿<'¿<(¿<U¿<[¿<¨¿<˚¿=¿=Q¿=|¿=}¿= ¿=¿=˝¿>M¿>N¿>ò¿>»¿>’¿?¿?¿?j¿?¶¿?∆¿?«¿@¿@:¿@a¿@b¿@≥¿@‹¿@›¿@¸¿A)¿Aa¿At¿A¿¿B¿B¿B¿B9¿Bf¿Bû¿B±¿B˝¿C(¿C,¿C-¿Cz¿C√¿CÚ¿D¿D¿Dm¿D∂¿Dª¿E¿E`¿Eõ¿E…¿E ¿F¿F¿F"¿F(¿Fu¿Fà¿Fï¿F∞¿F∆¿G¿GF¿Go¿GÜ¿Gä¿Gã¿GÕ¿G”¿G„¿GÈ¿H6¿HI¿HV¿Hq¿Hé¿Hí¿Hì¿Hœ¿H’¿I&¿IÅ¿Iá¿Ió¿Iù¿IÓ¿I˚¿J*¿JP¿J^¿Jd¿Je¿Jπ¿K¿Kc¿Kπ¿L¿LI¿L£¿LÚ¿ME¿Mk¿M∑¿MÈ¿N:¿NÇ¿N∫¿N‹¿O9¿O:¿Oê¿Oº¿O·¿P*¿PO¿Pr¿PÆ¿P„¿Q¿Qi¿QÅ¿Qé¿Q≠¿QÔ¿R¿Rf¿Ró¿Rß¿R∑¿R√¿RÕ¿R¿S¿SN¿S]¿S~¿S¢¿SÛ¿T¿T5¿Td¿TΩ¿U¿U-¿U7¿UÑ¿U’¿V ¿V=¿VÜ¿Vß¿V ¿VÓ¿W¿W`¿Wr¿W|¿W≈¿WÀ¿Wœ¿W–¿X¿X¿Xd¿XÉ¿Xâ¿XÕ¿X”¿X„¿XÈ¿Y8¿YK¿YX¿Yé¿Y∂¿Yﬁ¿Z¿Z¿Z¿Z?¿Zc¿Zí¿Zô¿Zπ¿ZΩ¿Zæ¿[ ¿[¿[W¿[y¿[¿[√¿[…¿[Ÿ¿[ﬂ¿\,¿\?¿\L¿\Ä¿\®¿\œ¿\Û¿]"¿])¿]O¿]q¿]w¿]{¿]|¿] ¿]Ú¿]¯¿^¿^¿^I¿^J¿^Ü¿^å¿^‘¿^⁄¿^Í¿^¿_7¿_J¿_ò¿_‰¿_˜¿`¿`¿`S¿`W¿`X¿`ò¿`û¿`ﬁ¿`‰¿`Ù¿`˙¿a@¿aX¿ae¿añ¿aº¿a‚¿a¿aˆ¿bL¿bx¿bù¿bÊ¿c¿c,¿cM¿cp¿c¿cø¿c‚¿d¿d.¿d}¿dè¿dô¿d‚¿e¿e>¿eg¿eä¿eŸ¿eÎ¿eı¿f>¿f]¿fÄ¿fÕ¿fÚ¿g!¿gz¿gÿ¿gÍ¿gÙ¿h¿h<¿hg¿hê¿h¡¿i¿iX¿i¨¿iË¿j5¿j]¿já¿jˆ¿ke¿k™¿kπ¿l1¿l]¿ll¿lÿ¿mH¿m∏¿n,¿nH¿nW¿n◊¿oV¿o‘¿p¿p]¿pØ¿p’¿p‰¿qD¿q{¿q÷¿q◊¿r¿rS¿r•¿rÊ¿r˝¿s0¿s@¿sã¿s∆¿t¿tF¿ts¿t©¿t‘¿u¿u¿ui¿uª¿uË¿v¿vI¿v`¿vë¿v°¿vØ¿vπ¿vø¿v„¿vÁ¿vË¿w,¿w2¿wz¿wÄ¿wê¿wñ¿w‡¿w¯¿x¿x"¿x\¿x`¿xa¿x®¿xÆ¿x˝¿y¿y¿y%¿y+¿yx¿yê¿yù¿y⁄¿z ¿z¿z¿z9¿zX¿zy¿z°¿z—¿{¿{L¿{ô¿{«¿| ¿|¿|¿|H¿|r¿|¶¿|≥¿|⁄¿}'¿}Y¿}v¿}∫¿}÷¿~"¿~n¿~¿~é¿~Ø¿~º¿~ˆ¿ ¿#¿F¿g¿ä¿’¿Ä¿Ä8¿ÄB¿ÄH¿ÄI¿Ää¿Äã¿Ä»¿Äˆ¿Ä˙¿Ä˚¿ÅG¿ÅM¿Åõ¿Å∑¿ÅΩ¿ÅÕ¿Å”¿Ç¿Ç=¿ÇJ¿Çë¿Ç∑¿Ç≈¿ÇÀ¿É¿É7¿É\¿ÉØ¿Ñ¿ÑD¿Ñr¿Ñ{¿ÑÀ¿Ö¿Ö ¿ÖE¿Öd¿ÖÖ¿ÖÕ¿Ö˙¿Ü¿Ü5¿Ü`¿ÜÅ¿Ü£¿ÜÀ¿Üˇ¿á¿á¿áH¿ár¿á¶¿á≥¿á‹¿à)¿à\¿àä¿àó¿à—¿à€¿à˛¿â!¿âB¿âe¿âê¿â†¿ä¿ä+¿ä]¿äh¿än¿äo¿ä∞¿ä¥¿äµ¿ä˙¿ã ¿ã1¿ã7¿ãG¿ãM¿ãù¿ã∞¿ãΩ¿ãˆ¿å!¿åG¿åi¿åo¿åö¿åæ¿å‡¿ç¿ç<¿ç{¿ç†¿çÈ¿é¿é¿éT¿éZ¿é^¿é_¿é†¿é¶¿éÏ¿é˘¿è¿è9¿èG¿èM¿èr¿èë¿è≤¿è˛¿êE¿êO¿êy¿êü¿ê≈¿êœ¿êÚ¿ë¿ë6¿ëY¿ëÅ¿ëÃ¿ë÷¿ë¸¿í¿í¿í¿íL¿íR¿íb¿íh¿í∏¿íÀ¿ì¿ì¿ìM¿ì°¿ìˆ¿îK¿î°¿îÙ¿ï1¿ïî¿ïº¿ï¿¿ï¡¿ñ¿ñ	¿ñT¿ñã¿ñë¿ñ°¿ñß¿ñÙ¿ó¿ó¿óI¿ón¿ó∑¿óﬂ¿ò¿ò¿ò¿ò¿ò¿òg¿ò~¿ò‚¿ôD¿ô•¿ô©¿ô™¿ôˆ¿ö¿öl¿ö∞¿õ¿õ¿õ¿õ_¿õ®¿õ˙¿ú¿úk¿úô¿úØ¿úﬁ¿ù#¿ùE¿ùd¿ùq¿ù|¿ùê¿ù—¿û¿û2¿û6¿û7¿ûÑ¿û§¿û©¿û¯¿ü¿ü¿ü`¿üò¿üæ¿ü‚¿ü¸¿†¿†.¿†5¿†Ö¿†“¿†ˆ¿°B¿°`¿°º¿¢¿¢¿¢3¿¢Z¿¢Æ¿£¿£¿£1¿£x¿£Ö¿£å¿£ê¿£ë¿£”¿£Ÿ¿§¿§R¿§|¿§Ç¿§í¿§ò¿§Â¿§¯¿•¿•:¿•`¿•n¿•t¿•ú¿•’¿•‚¿¶	¿¶.¿¶S¿¶t¿¶ó¿¶º¿ß ¿ßC¿ß¢¿ß™¿ß∞¿ß÷¿ß¯¿ß˛¿®¿®¿®J¿®P¿®ï¿®õ¿®´¿®±¿®˛¿©¿©#¿©^¿©Ñ¿©í¿©ò¿© ¿©Ï¿™I¿™J¿™~¿™¨¿™È¿™Í¿´7¿´^¿´j¿´w¿´∏¿´∆¿´Ã¿´Õ¿¨1¿¨X¿¨y¿¨ú¿¨Ï¿≠¿≠6¿≠Y¿≠~¿≠Œ¿≠÷¿≠„¿Æ
¿Æ+¿ÆM¿Æw¿Æ§¿Æ”¿Ø¿Ø4¿ØE¿Øp¿Ø£¿ØÕ¿Ø˘¿∞¿∞¿∞A¿∞f¿∞à¿∞≤¿∞ﬂ¿±¿±<¿±o¿±Ä¿±´¿±ﬁ¿≤¿≤4¿≤{¿≤Ω¿≤Í¿≥¿≥K¿≥Ä¿≥ì¿≥‡¿≥¿¥¿¥¿¥6¿¥Y¿¥~¿¥©¿¥”¿µ¿µ¿µ¿µ¿µ!¿µ"¿µj¿µp¿µæ¿µ’¿µ€¿µÎ¿µÒ¿∂?¿∂x¿∂Ö¿∂¬¿∂Ë¿∂ˆ¿∂¸¿∂˝¿∑¿∑e¿∑â¿∑∞¿∏¿∏[¿∏û¿∏Œ¿∏Ÿ¿π+¿π{¿πÑ¿π‰¿πÂ¿∫¿∫R¿∫{¿∫ä¿∫ô¿∫ƒ¿ª¿ª7¿ªd¿ªo¿ªp¿ªê¿ªπ¿ªÍ¿º¿º<¿ºå¿º¥¿ºﬂ¿ºÙ¿Ω¿Ω¿Ω¿Ω¿ΩC¿Ωí¿Ωª¿Ω ¿ΩŸ¿æ¿æ)¿æP¿æs¿æó¿æ√¿æÚ¿ø#¿øx¿ø¶¿ø€¿øÓ¿¿¿¿P¿¿|¿¿™¿¿√¿¡¿¡T¿¡k¿¡y¿¡ç¿¡≤¿¡⁄¿¬+¿¬U¿¬Ü¿¬ï¿¬º¿¬·¿√¿√_¿√â¿√∫¿√…¿√”¿√€¿√‹¿ƒ¿ƒ$¿ƒÅ¿ƒ≥¿ƒ¿¿ƒ˘¿≈¿≈E¿≈r¿≈®¿≈˚¿∆'¿∆Z¿∆k¿∆ñ¿∆…¿∆Û¿«¿«6¿«K¿«W¿«i¿«é¿«≥¿»¿»h¿»∞¿»“¿»¸¿…)¿…T¿…á¿…Ω¿ ¿ <¿ o¿ Ä¿ ™¿ ÷¿À¿À4¿Àd¿Àô¿À¨¿Ã ¿Ã¿Ã'¿Ã<¿ÃH¿ÃZ¿Ã}¿Ã†¿Ã≈¿Ã˜¿ÕF¿Õn¿Õù¿Õ™¿Õ≤¿Õ∏¿Õπ¿ÕÂ¿Œ¿Œ[¿ŒÆ¿Œ¥¿Œµ¿œ¿œ¿œ`¿œ¿¿œ¿–=¿–Y¿–Ä¿–¬¿—¿—V¿—Ö¿—µ¿—Ÿ¿“¿“A¿“N¿“Y¿“}¿“Ü¿“§¿“‰¿”'¿”V¿”Ü¿”™¿”„¿‘¿‘¿‘(¿‘L¿‘U¿‘b¿‘Æ¿‘¥¿‘∏¿‘π¿‘˛¿’¿’G¿’a¿’g¿’w¿’}¿’Õ¿’‡¿’Ì¿÷$¿÷K¿÷ò¿÷√¿÷‘¿÷Â¿◊¿◊¿◊¿◊)¿◊K¿◊Q¿◊R¿◊}¿◊Å¿◊Ç¿◊Œ¿◊Ó¿◊Ù¿ÿC¿ÿv¿ÿª¿Ÿ¿ŸB¿ŸR¿Ÿz¿Ÿ¢¿Ÿæ¿⁄¿⁄Z¿⁄Ä¿⁄Æ¿⁄“¿⁄˛¿€¿€L¿€à¿€∂¿€ﬁ¿‹¿‹8¿‹l¿‹ö¿‹Œ¿‹Ë¿‹¸¿›¿›¿›	¿›
¿›\¿›`¿›´¿›˙¿ﬁI¿ﬁ^¿ﬁb¿ﬁp¿ﬁt¿ﬁ¿¿ﬂ¿ﬂ¿ﬂY¿ﬂà¿ﬂé¿ﬂÿ¿ﬂˇ¿‡¿‡(¿‡B¿‡V¿‡r¿‡å¿‡•¿‡¬¿‡⁄¿‡ˆ¿·
¿·)¿·M¿·j¿·Ñ¿·û¿·Ω¿·›¿·˙¿‚"¿‚5¿‚N¿‚T¿‚U¿‚∫¿‚ˇ¿„¿„0¿„W¿„X¿„Ω¿‰¿‰T¿‰ü¿‰ƒ¿‰Ÿ¿Â ¿Â¿ÂK¿Âõ¿Â–¿Âˇ¿Ê ¿ÊM¿Êô¿Ê‘¿Ê’¿Á&¿ÁC¿Áz¿Á{¿Áπ¿ÁÂ¿ÁÊ¿Ë)¿Ë]¿Ë^¿ËØ¿Ë¬¿Ë»¿È¿È]¿È∂¿ÈÁ¿ÈË¿Í7¿ÍÑ¿Í∏¿ÍÍ¿ÍÎ¿Î>¿Îm¿Îs¿Î¿¿Î‚¿Ï	¿Ï
¿ÏN¿Ïï¿Ï”¿Ì¿Ì¿ÌX¿Ìü¿Ì†¿ÌÊ¿Ó¿Ó ¿Ón¿ÓØ¿Ó‰¿ÓÂ¿Ô3¿Ôu¿Ô™¿Ô´¿ÔÂ¿ ¿!¿Z¿ó¿ò¿‹¿Ò¿Ò¿Òf¿Òl¿Ò∫¿Òﬁ¿Òﬂ¿Ú!¿Ú'¿Ú^¿ÚÅ¿ÚÇ¿Ú°¿Ú∑¿Ú∏¿Úƒ¿Û¿Û¿Û¿Ûm¿ÛΩ¿Ù¿Ùa¿Ù¿ÙÑ¿Ù÷¿ÙÍ¿ı(¿ıM¿ıp¿ıì¿ı¥¿ˆ¿ˆS¿ˆ†¿ˆ¿˜<¿˜n¿˜¿¿˜ﬂ¿¯ ¿¯P¿¯ü¿¯¿˘¿˘(¿˘K¿˘ö¿˘È¿˙9¿˙Ö¿˙∑¿˙Ú¿˙¯¿˙¸¿˙˝¿˚¿˚A¿˚E¿˚F¿˚f¿˚ä¿˚é¿˚è¿˚‡¿¸¿¸:¿¸_¿¸¨¿¸ˇ¿˝N¿˝|¿˝ ¿˝˛¿˛¿˛¿˛S¿˛á¿˛ç¿˛ë¿˛í¿˛¬¿ˇ¿ˇ;¿ˇ[¿ˇä¿ˇ™¿ˇ∞¿ˇ¥¿ˇµ¿ˇ—¿ˇ˜¿ˇ˚¿ˇ¸¿ 3¿ c¿ g¿ h¿ °¿ “¿ ÷¿ ◊¿
¿8¿<¿=¿t¿°¿•¿¶¿€¿¿
¿¿I¿x¿•¿´¿Ø¿∞¿¯¿,¿^¿d¿h¿i¿£¿–¿˚¿¿¿¿¿9¿ñ¿ó¿¯¿,¿T¿e¿ò¿‘¿›¿‰¿Â¿¿H¿u¿¢¿Ó¿¿<¿ä¿ô¿Õ¿‰¿¿d¿ú¿´¿∏¿æ¿ø¿Ó¿	¿	K¿	r¿	ó¿	º¿	›¿
¿
t¿
√¿¿!¿{¿û¿ﬂ¿6¿s¿∞¿·¿¿M¿~¿´¿ﬁ¿Ò¿¿%¿H¿m¿û¿Ó¿2¿j¿Ö¿ﬂ¿¿C¿Ä¿Ω¿Ó¿#¿Z¿ã¿∏¿Î¿˛¿¿¿¿¿l¿ö¿Á¿(¿]¿t¿Õ¿!¿0¿=¿C¿D¿c¿}¿ü¿¿¿€¿‚¿Ê¿Ë¿È¿7¿X¿\¿£¿Á¿2¿ï¿¡¿¿¿9¿:¿t¿î¿©¿∑¿Ω¿æ¿Ÿ¿„¿¿5¿U¿r¿í¿™¿œ¿#¿.¿7¿Å¿Ω¿‘¿‰¿Ï¿¿!¿'¿N¿ù¿û¿≥¿¡¿«¿ﬂ¿„¿‰¿¿¿5¿f¿l¿ò¿®¿Æ¿œ¿”¿‘¿‡¿¿3¿Z¿é¿î¿ò¿ô¿•¿‚¿˜¿¿/¿V¿}¿¢¿«¿·¿¿ˆ¿˙¿˚¿¿¿L¿b¿w¿{¿}¿~¿«¿ﬁ¿-¿:¿;¿â¿÷¿ ¿ %¿ &¿ u¿ Ö¿ á¿ à¿ Ë¿ ¸¿! ¿!¿!\¿!¿¿!Û¿!˜¿"5¿"Ç¿"§¿"œ¿#(¿#<¿#=¿#W¿#X¿#ú¿#º¿#—¿#ﬂ¿#Â¿#Ê¿$¿$¿$a¿$Ç¿$¢¿$ø¿$ﬂ¿$˜¿%¿%w¿%Ç¿%ã¿%’¿&¿&P¿&`¿&h¿&ì¿&°¿&ß¿&®¿&”¿'0¿'1¿']¿'k¿'q¿'â¿'ç¿'é¿'ö¿'∆¿'ﬂ¿(¿(¿(F¿(V¿(\¿(}¿(Å¿(Ç¿(é¿(Ω¿(·¿)¿)<¿)B¿)F¿)G¿)S¿)ê¿)•¿)À¿)›¿*¿*+¿*P¿*u¿*ç¿*ì¿*ó¿*ò¿*§¿*∑¿*È¿*ˇ¿+¿+¿+¿+¿+z¿+~¿+å¿+⁄¿+ı¿,+¿,6¿,7¿,ö¿,˙¿-8¿-C¿-D¿-~¿-ä¿-å¿-ç¿-€¿.,¿.b¿.≥¿.Î¿/(¿/4¿/K¿/e¿/Ñ¿/ü¿/Ω¿/Â¿0	¿0@¿0j¿0ä¿0ã¿0ó¿0œ¿0–¿0‹¿1¿1¿1"¿1\¿1]¿1i¿1ß¿1®¿1¥¿2¿2¿2!¿2Ç¿2É¿2è¿2”¿2‘¿2‡¿3¿3    ToolbarItemsParentDataTextSelectionControlsEmptyTextSelectionControlsemptyTextSelectionControlsTextSelectionOverlaySelectionOverlay_SelectionToolbarWrapper_SelectionToolbarWrapperState_SelectionHandleOverlay_SelectionHandleOverlayState+TextSelectionGestureDetectorBuilderDelegate#TextSelectionGestureDetectorBuilderTextSelectionGestureDetector"_TextSelectionGestureDetectorStateClipboardStatusNotifierClipboardStatusLiveTextInputStatusNotifierLiveTextInputStatusTextSelectionHandleControls(flutter.widgets.SelectionOverlay.contextÄ∑The context in which the selection UI should appear.

This context must have an [Overlay] as an ancestor because this object
will display the text selection handles in that [Overlay].1flutter.widgets.SelectionOverlay.toolbarIsVisiblemWhether the toolbar is currently visible.

Includes both the text selection toolbar and the spell check menu..flutter.widgets.SelectionOverlay.showMagnifierÅ°Shows the magnifier, and hides the toolbar if it was showing when [showMagnifier]
was called. This is safe to call on platforms not mobile, since
a magnifierBuilder will not be provided, or the magnifierBuilder will return null
on platforms not mobile.

This is NOT the source of truth for if the magnifier is up or not,
since magnifiers may hide themselves. If this info is needed, check
[MagnifierController.shown]..flutter.widgets.SelectionOverlay.hideMagnifierHHide the current magnifier.

This does nothing if there is no magnifier.2flutter.widgets.SelectionOverlay.selectionControls*Builds text selection handles and toolbar.2flutter.widgets.SelectionOverlay.selectionDelegateMThe delegate for manipulating the current selection in the owning
text field.8flutter.widgets.SelectionOverlay.onSelectionHandleTappedÇ<A callback that's optionally invoked when a selection handle is tapped.

The [TextSelectionControls.buildHandle] implementation the text field
uses decides where the handle's tap "hotspot" is, or whether the
selection handle supports tap gestures at all. For instance,
[MaterialTextSelectionControls] calls [onSelectionHandleTapped] when the
selection handle's "knob" is tapped, while
[CupertinoTextSelectionControls] builds a handle that's not sufficiently
large for tapping (as it's not meant to be tapped) so it does not call
[onSelectionHandleTapped] even when tapped.,flutter.widgets.SelectionOverlay.showHandlesBBuilds the handles by inserting them into the [context]'s overlay.,flutter.widgets.SelectionOverlay.hideHandles3Destroys the handles by removing them from overlay.,flutter.widgets.SelectionOverlay.showToolbar?Shows the toolbar by inserting it into the [context]'s overlay.%flutter.widgets.SelectionOverlay.hide?Hides the entire overlay including the toolbar and the handles.,flutter.widgets.SelectionOverlay.hideToolbarNHides the toolbar part of the overlay.

To hide the whole overlay, see [hide].(flutter.widgets.SelectionOverlay.dispose+Disposes this object and release resources.0flutter.widgets.SelectionOverlay.updateMagnifierÅ>Update the current magnifier with new selection data, so the magnifier
can respond accordingly.

If the magnifier is not shown, this still updates the magnifier position
because the magnifier may have hidden itself and is looking for a cue to reshow
itself.

If there is no magnifier in the overlay, this does nothing.Rflutter.gestures.selectionrecognizers.TextSelectionGestureDetector.onTapTrackStartTCallback used to indicate that a tap tracking has started upon
a [PointerDownEvent].Rflutter.gestures.selectionrecognizers.TextSelectionGestureDetector.onTapTrackResetÄÓCallback used to indicate that a tap tracking has been reset which
happens on the next [PointerDownEvent] after the timer between two taps
elapses, the recognizer loses the arena, the gesture is cancelled or
the recognizer is disposed of. 3í
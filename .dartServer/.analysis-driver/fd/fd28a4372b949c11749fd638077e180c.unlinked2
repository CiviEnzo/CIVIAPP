Ä˝ELEMENT_TYPE_ENDELEMENT_TYPE_VOIDELEMENT_TYPE_BOOLEANELEMENT_TYPE_CHARELEMENT_TYPE_I1ELEMENT_TYPE_U1ELEMENT_TYPE_I2ELEMENT_TYPE_U2ELEMENT_TYPE_I4ELEMENT_TYPE_U4ELEMENT_TYPE_I8ELEMENT_TYPE_U8ELEMENT_TYPE_R4ELEMENT_TYPE_R8ELEMENT_TYPE_STRINGELEMENT_TYPE_PTRELEMENT_TYPE_BYREFELEMENT_TYPE_VALUETYPEELEMENT_TYPE_CLASSELEMENT_TYPE_VARELEMENT_TYPE_ARRAYELEMENT_TYPE_GENERICINSTELEMENT_TYPE_TYPEDBYREFELEMENT_TYPE_IELEMENT_TYPE_UELEMENT_TYPE_FNPTRELEMENT_TYPE_OBJECTELEMENT_TYPE_SZARRAYELEMENT_TYPE_MVARELEMENT_TYPE_CMOD_REQDELEMENT_TYPE_CMOD_OPTELEMENT_TYPE_INTERNALELEMENT_TYPE_MAXELEMENT_TYPE_MODIFIERELEMENT_TYPE_SENTINELELEMENT_TYPE_PINNEDevSpecialNameevReservedMaskevRTSpecialNamefdFieldAccessMaskfdPrivateScope	fdPrivatefdFamANDAssem
fdAssemblyfdFamilyfdFamORAssemfdPublicfdStatic
fdInitOnly	fdLiteralfdNotSerializedfdSpecialNamefdPinvokeImplfdReservedMaskfdRTSpecialNamefdHasFieldMarshalfdHasDefaultfdHasFieldRVAgpVarianceMaskgpNonVariantgpCovariantgpContravariantgpSpecialConstraintMaskgpNoSpecialConstraintgpReferenceTypeConstraint gpNotNullableValueTypeConstraintgpDefaultConstructorConstraintmdMemberAccessMaskmdPrivateScope	mdPrivatemdFamANDAssemmdAssemmdFamilymdFamORAssemmdPublicmdStaticmdFinal	mdVirtualmdHideBySigmdVtableLayoutMaskmdReuseSlot	mdNewSlotmdCheckAccessOnOverride
mdAbstractmdSpecialNamemdPinvokeImplmdUnmanagedExportmdReservedMaskmdRTSpecialNamemdHasSecuritymdRequireSecObjectmiCodeTypeMaskmiILmiNativemiOPTIL	miRuntimemiManagedMaskmiUnmanaged	miManagedmiForwardRefmiPreserveSigmiInternalCallmiSynchronizedmiNoInliningmiAggressiveInliningmiNoOptimizationmiMaxMethodImplValNATIVE_TYPE_ENDNATIVE_TYPE_VOIDNATIVE_TYPE_BOOLEANNATIVE_TYPE_I1NATIVE_TYPE_U1NATIVE_TYPE_I2NATIVE_TYPE_U2NATIVE_TYPE_I4NATIVE_TYPE_U4NATIVE_TYPE_I8NATIVE_TYPE_U8NATIVE_TYPE_R4NATIVE_TYPE_R8NATIVE_TYPE_SYSCHARNATIVE_TYPE_VARIANTNATIVE_TYPE_CURRENCYNATIVE_TYPE_PTRNATIVE_TYPE_DECIMALNATIVE_TYPE_DATENATIVE_TYPE_BSTRNATIVE_TYPE_LPSTRNATIVE_TYPE_LPWSTRNATIVE_TYPE_LPTSTRNATIVE_TYPE_FIXEDSYSSTRINGNATIVE_TYPE_OBJECTREFNATIVE_TYPE_IUNKNOWNNATIVE_TYPE_IDISPATCHNATIVE_TYPE_STRUCTNATIVE_TYPE_INTFNATIVE_TYPE_SAFEARRAYNATIVE_TYPE_FIXEDARRAYNATIVE_TYPE_INTNATIVE_TYPE_UINTNATIVE_TYPE_NESTEDSTRUCTNATIVE_TYPE_BYVALSTRNATIVE_TYPE_ANSIBSTRNATIVE_TYPE_TBSTRNATIVE_TYPE_VARIANTBOOLNATIVE_TYPE_FUNCNATIVE_TYPE_ASANYNATIVE_TYPE_ARRAYNATIVE_TYPE_LPSTRUCTNATIVE_TYPE_CUSTOMMARSHALERNATIVE_TYPE_IINSPECTABLENATIVE_TYPE_HSTRINGNATIVE_TYPE_ERRORNATIVE_TYPE_MAXpdInpdOut
pdOptionalpdReservedMaskpdHasDefaultpdHasFieldMarshalpdUnusedpeNotpeILonlype32BitRequiredpe32Pluspe32Unmanagedpe32BitPreferred
pmNoManglepmCharSetMaskpmCharSetNotSpecpmCharSetAnsipmCharSetUnicodepmCharSetAutopmBestFitUseAssempmBestFitEnabledpmBestFitDisabledpmBestFitMaskpmThrowOnUnmappableCharUseAssempmThrowOnUnmappableCharEnabledpmThrowOnUnmappableCharDisabledpmThrowOnUnmappableCharMaskpmSupportsLastErrorpmCallConvMaskpmCallConvWinapipmCallConvCdeclpmCallConvStdcallpmCallConvThiscallpmCallConvFastcall
pmMaxValueprSpecialNameprReservedMaskprRTSpecialNameprHasDefaultprUnused	mdtModule
mdtTypeRef
mdtTypeDefmdtFieldDefmdtMethodDefmdtParamDefmdtInterfaceImplmdtMemberRefmdtCustomAttributemdtPermissionmdtSignaturemdtEventmdtPropertymdtModuleRefmdtTypeSpecmdtAssemblymdtAssemblyRefmdtFilemdtExportedTypemdtManifestResourcemdtGenericParammdtMethodSpecmdtGenericParamConstraint	mdtStringmdtNamemdtBaseTypetdVisibilityMasktdNotPublictdPublictdNestedPublictdNestedPrivatetdNestedFamilytdNestedAssemblytdNestedFamANDAssemtdNestedFamORAssemtdLayoutMasktdAutoLayouttdSequentialLayouttdExplicitLayouttdClassSemanticsMasktdClasstdInterface
tdAbstracttdSealedtdSpecialNametdImporttdSerializabletdWindowsRuntimetdStringFormatMasktdAnsiClasstdUnicodeClasstdAutoClasstdCustomFormatClasstdCustomFormatMasktdBeforeFieldInittdForwardertdReservedMasktdRTSpecialNametdHasSecurityÅ
CorElementTypeCorEventAttrCorFieldAttrCorGenericParamAttrCorMethodAttrCorMethodImplCorNativeTypeCorParamAttr	CorPEKindCorPinvokeMapCorPropertyAttrCorTokenTypeCorTypeAttrELEMENT_TYPE_ENDELEMENT_TYPE_VOIDELEMENT_TYPE_BOOLEANELEMENT_TYPE_CHARELEMENT_TYPE_I1ELEMENT_TYPE_U1ELEMENT_TYPE_I2ELEMENT_TYPE_U2ELEMENT_TYPE_I4ELEMENT_TYPE_U4ELEMENT_TYPE_I8ELEMENT_TYPE_U8ELEMENT_TYPE_R4ELEMENT_TYPE_R8ELEMENT_TYPE_STRINGELEMENT_TYPE_PTRELEMENT_TYPE_BYREFELEMENT_TYPE_VALUETYPEELEMENT_TYPE_CLASSELEMENT_TYPE_VARELEMENT_TYPE_ARRAYELEMENT_TYPE_GENERICINSTELEMENT_TYPE_TYPEDBYREFELEMENT_TYPE_IELEMENT_TYPE_UELEMENT_TYPE_FNPTRELEMENT_TYPE_OBJECTELEMENT_TYPE_SZARRAYELEMENT_TYPE_MVARELEMENT_TYPE_CMOD_REQDELEMENT_TYPE_CMOD_OPTELEMENT_TYPE_INTERNALELEMENT_TYPE_MAXELEMENT_TYPE_MODIFIERELEMENT_TYPE_SENTINELELEMENT_TYPE_PINNEDevSpecialNameevReservedMaskevRTSpecialNamefdFieldAccessMaskfdPrivateScope	fdPrivatefdFamANDAssem
fdAssemblyfdFamilyfdFamORAssemfdPublicfdStatic
fdInitOnly	fdLiteralfdNotSerializedfdSpecialNamefdPinvokeImplfdReservedMaskfdRTSpecialNamefdHasFieldMarshalfdHasDefaultfdHasFieldRVAgpVarianceMaskgpNonVariantgpCovariantgpContravariantgpSpecialConstraintMaskgpNoSpecialConstraintgpReferenceTypeConstraint gpNotNullableValueTypeConstraintgpDefaultConstructorConstraintmdMemberAccessMaskmdPrivateScope	mdPrivatemdFamANDAssemmdAssemmdFamilymdFamORAssemmdPublicmdStaticmdFinal	mdVirtualmdHideBySigmdVtableLayoutMaskmdReuseSlot	mdNewSlotmdCheckAccessOnOverride
mdAbstractmdSpecialNamemdPinvokeImplmdUnmanagedExportmdReservedMaskmdRTSpecialNamemdHasSecuritymdRequireSecObjectmiCodeTypeMaskmiILmiNativemiOPTIL	miRuntimemiManagedMaskmiUnmanaged	miManagedmiForwardRefmiPreserveSigmiInternalCallmiSynchronizedmiNoInliningmiAggressiveInliningmiNoOptimizationmiMaxMethodImplValNATIVE_TYPE_ENDNATIVE_TYPE_VOIDNATIVE_TYPE_BOOLEANNATIVE_TYPE_I1NATIVE_TYPE_U1NATIVE_TYPE_I2NATIVE_TYPE_U2NATIVE_TYPE_I4NATIVE_TYPE_U4NATIVE_TYPE_I8NATIVE_TYPE_U8NATIVE_TYPE_R4NATIVE_TYPE_R8NATIVE_TYPE_SYSCHARNATIVE_TYPE_VARIANTNATIVE_TYPE_CURRENCYNATIVE_TYPE_PTRNATIVE_TYPE_DECIMALNATIVE_TYPE_DATENATIVE_TYPE_BSTRNATIVE_TYPE_LPSTRNATIVE_TYPE_LPWSTRNATIVE_TYPE_LPTSTRNATIVE_TYPE_FIXEDSYSSTRINGNATIVE_TYPE_OBJECTREFNATIVE_TYPE_IUNKNOWNNATIVE_TYPE_IDISPATCHNATIVE_TYPE_STRUCTNATIVE_TYPE_INTFNATIVE_TYPE_SAFEARRAYNATIVE_TYPE_FIXEDARRAYNATIVE_TYPE_INTNATIVE_TYPE_UINTNATIVE_TYPE_NESTEDSTRUCTNATIVE_TYPE_BYVALSTRNATIVE_TYPE_ANSIBSTRNATIVE_TYPE_TBSTRNATIVE_TYPE_VARIANTBOOLNATIVE_TYPE_FUNCNATIVE_TYPE_ASANYNATIVE_TYPE_ARRAYNATIVE_TYPE_LPSTRUCTNATIVE_TYPE_CUSTOMMARSHALERNATIVE_TYPE_IINSPECTABLENATIVE_TYPE_HSTRINGNATIVE_TYPE_ERRORNATIVE_TYPE_MAXpdInpdOut
pdOptionalpdReservedMaskpdHasDefaultpdHasFieldMarshalpdUnusedpeNotpeILonlype32BitRequiredpe32Pluspe32Unmanagedpe32BitPreferred
pmNoManglepmCharSetMaskpmCharSetNotSpecpmCharSetAnsipmCharSetUnicodepmCharSetAutopmBestFitUseAssempmBestFitEnabledpmBestFitDisabledpmBestFitMaskpmThrowOnUnmappableCharUseAssempmThrowOnUnmappableCharEnabledpmThrowOnUnmappableCharDisabledpmThrowOnUnmappableCharMaskpmSupportsLastErrorpmCallConvMaskpmCallConvWinapipmCallConvCdeclpmCallConvStdcallpmCallConvThiscallpmCallConvFastcall
pmMaxValueprSpecialNameprReservedMaskprRTSpecialNameprHasDefaultprUnused	mdtModule
mdtTypeRef
mdtTypeDefmdtFieldDefmdtMethodDefmdtParamDefmdtInterfaceImplmdtMemberRefmdtCustomAttributemdtPermissionmdtSignaturemdtEventmdtPropertymdtModuleRefmdtTypeSpecmdtAssemblymdtAssemblyRefmdtFilemdtExportedTypemdtManifestResourcemdtGenericParammdtMethodSpecmdtGenericParamConstraint	mdtStringmdtNamemdtBaseTypetdVisibilityMasktdNotPublictdPublictdNestedPublictdNestedPrivatetdNestedFamilytdNestedAssemblytdNestedFamANDAssemtdNestedFamORAssemtdLayoutMasktdAutoLayouttdSequentialLayouttdExplicitLayouttdClassSemanticsMasktdClasstdInterface
tdAbstracttdSealedtdSpecialNametdImporttdSerializabletdWindowsRuntimetdStringFormatMasktdAnsiClasstdUnicodeClasstdAutoClasstdCustomFormatClasstdCustomFormatMasktdBeforeFieldInittdForwardertdReservedMasktdRTSpecialNametdHasSecurity
Deprecated §VAMüÄéµì‰qÇ[   ¿ £ö ¿ ‘gÜN /0UÄ¢Ä£ÄÒÅ Å7ÅNÅ|Å£Å§Å∑ÅÊÇÇÇ%ÇWÇÇÇÉÇõÇ ÇÚÇÛÉÉ?ÉeÉfÉàÉµÉ€É‹É˚Ñ(ÑNÑOÑqÑûÑƒÑ≈Ñ‰ÖÖ7Ö8ÖZÖáÖ≠ÖÆÖÕÖ˙Ü Ü!ÜCÜpÜñÜóÜ∂Ü„á	á
á*áWá}á~áöáÀáıáˆààCàjàkàåàºàÊàÁââ8âfâgâÑâ¥âﬁâﬂää3ä[ä\äãäªäÂäÊããEãuãvãèãƒãÛãÙåå@åfågåëåΩå„å‰çç3ç]ç^çzç´ç÷ç◊ééKéwéxéüéŒé˜é¯èèRèÄèÅèßè⁄êêêêRêêÄêóê≈êÌêÓëë8ëeëfë≤ëƒë˜í<í=íTíÖí»í íÀìììhììì∫ìªì˚î'îOîPîûî¥î·ï
ïïïGï\ïáï∂ï·ï‚ññCñkñlñ≤ñŸñ¸ñ˝óNóyó†ó°óÏòò8ò9òÉòíò∏ò⁄ò€ô,ôCômôìôîô·ôÛöö;ö<öãöôöøö·ö‚õ,õTõxõyõ∫õ·úúúPú}ú¶úßúÛùùEùFùíùΩù‰ùÂû%ûQûyûzû…ûÔüüEüFüÜüµü‡ü·††?†e†f†•†–†˜†˘†˙°C°_°Æ°ø°Î¢¢¢=¢g¢ç¢é¢™¢”¢¯¢˘££F£o£p£´£‡§§§T§á§∂§∑§˘•0•c•d•≤•ƒ¶¶<¶=¶å¶¨¶Ëß ß"ß#ß_ßußîßƒßßÒ®'®S®{®|®√®Í©©©_©ä©±©≤©˚™ ™A™B™ã™±™”™‘´"´?´i´è´ê´ﬁ´Î¨¨3¨4¨Ñ¨°¨«¨È¨Í≠ ≠E≠f≠g≠ö≠¡≠‰≠ÂÆ6ÆBÆkÆêÆëÆ∑ÆÁØØØ_ØÇØ´Ø–Ø—∞∞E∞h∞i∞π∞À± ±1±2±f±é±≤±≥≤ ≤+≤R≤S≤û≤…≤≤Ò≥A≥p≥õ≥ú≥‹¥¥0¥1¥¥ñ¥√¥Ï¥Ìµ.µYµÄµÅµ–∂ ∂,∂.∂/∂q∂á∂¨∂ÿ∑ ∑∑J∑a∑É∑°∑¢∑‹∏∏$∏%∏^∏É∏§∏•∏Óππ-πPπQπïπ¿πÁπË∫%∫N∫s∫t∫Ø∫÷∫˘∫˙ªKª\ªÜª¨ª≠ª¯º
º5º\º]ºùº…ºÒºÚΩ7ΩcΩãΩåΩøΩÈæææOæÅæØæ∞æÈøøAøBøwøßø”ø’ø÷¿ @¿ @&¿ @S¿ @y¿ @ß¿ @Œ¿ @ˇ¿ A)¿ AU¿ Az¿ A¶¿ AÀ¿ A˜¿ B¿ BH¿ Bm¿ Bô¿ Bæ¿ BÍ¿ C¿ C;¿ C`¿ Cå¿ C±¿ C›¿ D¿ D.¿ DS¿ DÑ¿ DÆ¿ Dﬂ¿ E	¿ E;¿ Ef¿ Eì¿ E∫¿ EÎ¿ F¿ FD¿ Fl¿ Fö¿ F¬¿ FÒ¿ G¿ GJ¿ Gt¿ G§¿ GŒ¿ H¿ H8¿ Hk¿ Hò¿ H ¿ Hˆ¿ I)¿ IV¿ IÜ¿ I∞¿ Iﬁ¿ J¿ J9¿ Jf¿ Jö¿ J»¿ Jı¿ K¿ KJ¿ Kr¿ K®¿ Kÿ¿ L
¿ L6¿ Lh¿ Lî¿ L√¿ LÏ¿ M!¿ MP¿ M~¿ M¶¿ M’¿ M˛¿ N-¿ NV¿ Nà¿ N¥¿ NÌ¿ O ¿ OV¿ OÜ¿ O∑¿ O‚¿ P¿ P:¿ Pg¿ Pé¿ Pê¿ Pë¿ P◊¿ PÏ¿ Q/¿ QQ¿ Qo¿ Qp¿ Qµ¿ Qÿ¿ Q˜¿ Q¯¿ R(¿ RP¿ Rt¿ Ru¿ Rµ¿ R·¿ S	¿ S
¿ SB¿ Sl¿ Sí¿ Sì¿ S“¿ T¿ T,¿ T-¿ T;¿ Ta¿ TÉ¿ TÖ¿ TÜ¿ T…¿ T€¿ U¿ U*¿ UM¿ UN¿ Uå¿ U≤¿ Uÿ¿ UŸ¿ V¿ V;¿ Vh¿ Vi¿ V¶¿ VÃ¿ VÚ¿ VÛ¿ W%¿ WP¿ W{¿ W|¿ WÀ¿ WÍ¿ X¿ XF¿ XH¿ XI¿ Xs¿ Xâ¿ X≤¿ X⁄¿ X˛¿ Xˇ¿ Y¿ Y:¿ Ya¿ Yb¿ Yr¿ Y†¿ Y ¿ YÀ¿ Z¿ Z0¿ ZW¿ ZX¿ Zå¿ Z∫¿ Z‰¿ ZÂ¿ [0¿ [~¿ [Œ¿ [‡¿ \¿ \2¿ \3¿ \C¿ \r¿ \ù¿ \û¿ \Ô¿ ]¿ ];¿ ]e¿ ]f¿ ]µ¿ ]Ï¿ ^¿ ^F¿ ^G¿ ^W¿ ^Ç¿ ^©¿ ^™¿ ^∫¿ ^˜¿ _0¿ _1¿ _~¿ _è¿ _À¿ `¿ `¿ `M¿ `i¿ `¶¿ `ﬂ¿ `‡¿ `¿ a)¿ a^¿ a_¿ aØ¿ a—¿ b¿ b/¿ b0¿ b@¿ bl¿ bî¿ bï¿ b‰¿ c!¿ cO¿ cy¿ cz¿ c∆¿ d¿ dG¿ dt¿ dù¿ dû¿ dÏ¿ e=¿ eT¿ eÉ¿ eÆ¿ eØ¿ eˇ¿ fJ¿ fï¿ fŒ¿ f˛¿ g*¿ g+¿ g;¿ gk¿ gó¿ gò¿ g®¿ g–¿ gÙ¿ gˆ¿ g˜¿ h5¿ hM¿ hú¿ h«¿ hÓ¿ hÔ¿ i/¿ i[¿ iÉ¿ iÑ¿ i”¿ j¿ j/¿ jX¿ jY¿ jê¿ j∫¿ j‡¿ j·¿ jÔ¿ k¿ k7¿ k9¿ k:¿ kf¿ k{¿ k¢¿ k…¿ kÒ¿ l¿ lA¿ li¿ lí¿ lª¿ lÂ¿ m¿ m8¿ ma¿ mè¿ mΩ¿ mÁ¿ n¿ nA¿ nq¿ nú¿ n«¿ nÒ¿ o¿ oA¿ og¿ oê¿ oπ¿ o„¿ p¿ p6¿ p_¿ pà¿ p±¿ p›¿ q	¿ q.¿ qS¿ qÄ¿ q≠¿ qﬁ¿ r¿ r<¿ ri¿ rî¿ rø¿ rˆ¿ s-¿ sT¿ s{¿ s†¿ s≈¿ sÓ¿ t¿ t¿ t¿ tK¿ t_¿ tã¿ tπ¿ tÁ¿ tË¿ u¿ uG¿ up¿ uq¿ u£¿ u…¿ uÔ¿ u¿ v0¿ v\¿ và¿ vâ¿ v ¿ v˜¿ w$¿ w%¿ we¿ wë¿ wΩ¿ wæ¿ x ¿ x.¿ x\¿ x]¿ x™¿ x€¿ y¿ y¿ yY¿ yâ¿ yπ¿ y∫¿ yÊ¿ z¿ z:¿ z;¿ zÑ¿ zÆ¿ zÿ¿ zŸ¿ {!¿ {Q¿ {Å¿ {Ç¿ {º¿ {Í¿ |¿ |¿ |I¿ |{¿ |≠¿ |Æ¿ |ÿ¿ |˝¿ }"¿ }#¿ }R¿ }{¿ }§¿ }•¿ }–¿ }¯¿ ~ ¿ ~!¿ ~S¿ ~y¿ ~ü¿ ~†¿ ~Ë¿ ¿ >¿ ?¿ j¿ ê¿ ∂¿ ∑¿ Ê¿ Ä¿ Ä>¿ Ä?¿ Äy¿ Äß¿ Ä’¿ Ä÷¿ Å¿ ÅJ¿ Åz¿ Å{¿ Å∏¿ Å·¿ Ç
¿ Ç¿ ÇK¿ Çw¿ Ç£¿ Ç§¿ ÇÁ¿ É¿ É9¿ É:¿ ÉÖ¿ Éù¿ ÉŒ¿ Éˇ¿ Ñ ¿ ÑQ¿ Ñì¿ Ñ√¿ ÑÛ¿ ÑÙ¿ ÖB¿ Ö_¿ Öé¿ ÖΩ¿ Öæ¿ Öˇ¿ Ü(¿ ÜQ¿ ÜR¿ Ü°¿ Ü∞¿ Ü‹¿ á¿ á	¿ áZ¿ áá¿ á¥¿ áµ¿ áÙ¿ à¿ àJ¿ àL¿ àM¿ àb¿ àÄ¿ àÅ¿ àí¿ à±¿ à≤¿ à∆¿ àË¿ àÈ¿ àˇ¿ â¿ â¿ â<¿ âY¿ âZ¿ âz¿ âó¿ âò¿ âµ¿ â“¿ â”¿ âÛ¿ ä¿ ä¿ ä.¿ äK¿ äL¿ äl¿ äâ¿ ää¿ äß¿ äƒ¿ ä≈¿ äÂ¿ ã¿ ã¿ ã ¿ ã=¿ ã>¿ ã\¿ ãy¿ ãz¿ ãî¿ ãµ¿ ã∂¿ ã”¿ ãÒ¿ ãÚ¿ å¿ å2¿ å3¿ åN¿ ås¿ åt¿ åè¿ å∞¿ å±¿ å’¿ åÙ¿ åı¿ ç"¿ çC¿ çD¿ çk¿ çí¿ çì¿ ç™¿ ç–¿ ç—¿ çÔ¿ é¿ é¿ é5¿ éR¿ éS¿ ép¿ éë¿ éí¿ é¨¿ éŒ¿ éœ¿ è¿ è2¿ è3¿ èX¿ èx¿ èy¿ èù¿ è¬¿ è√¿ èÁ¿ ê¿ ê¿ ê!¿ êE¿ êF¿ ê[¿ êz¿ ê{¿ êê¿ ê¥¿ êµ¿ êˇ¿ ë¿ ëK¿ ëL¿ ëa¿ ëõ¿ ëú¿ ëÊ¿ í¿ í¿ íC¿ íb¿ íc¿ íØ¿ í√¿ í„¿ í‰¿ ì¿ ì/¿ ì0¿ ìc¿ ìÇ¿ ìÉ¿ ì«¿ ì·¿ ì‚¿ î1¿ îO¿ îP¿ îô¿ î¥¿ îµ¿ î˝¿ ï
¿ ï#¿ ï$¿ ïs¿ ïà¿ ï•¿ ï¶¿ ïÒ¿ ñ¿ ñ¿ ñ¿ ñh¿ ñt¿ ñç¿ ñé¿ ñ÷¿ ñÒ¿ ñÚ¿ ó1¿ óK¿ óL¿ óï¿ óµ¿ ó∂¿ ò ¿ ò¿ ò¿ òi¿ òá¿ òà¿ ò∆¿ òÂ¿ òÊ¿ ô3¿ ôW¿ ôw¿ ôx¿ ô∂¿ ôÿ¿ ôŸ¿ ö¿ ö(¿ ö)¿ öf¿ öÑ¿ öÖ¿ ö“¿ ö·¿ õ ¿ õ¿ õ(¿ õE¿ õF¿ õ`¿ õ|¿ õ}¿ õõ¿ õª¿ õº¿ õı¿ ú¿ ú¿ ú^¿ úÑ¿ úÖ¿ ú≈¿ úÔ¿ ú¿ ù<¿ ùL¿ ù}¿ ù~¿ ùÀ¿ ùÈ¿ û¿ û¿ û6¿ ûY¿ ûZ¿ ûé¿ û≠¿ ûÆ¿ ûÛ¿ ü¿ ü¿ ü]¿ ü{¿ ü|¿ ü√¿ ü€¿ ü‹¿ †#¿ †<¿ †=¿ †â¿ †§¿ †¡¿ †¬¿ °¿ °¿ °2¿ °3¿ °Å¿ °ú¿ °µ¿ °∂¿ °Í¿ ¢¿ ¢¿ ¢4¿ ¢N¿ ¢O¿ ¢û¿ ¢®¿ ¢ƒ¿ ¢≈¿ ¢È¿ £¿ £¿ £V¿ £w¿ £ì¿ £î¿ £ﬂ¿ £˘¿ £˙¿ §H¿ §X¿ §Ä¿ §Å¿ §≥¿ §Œ¿ §œ¿ •¿ •8¿ •9¿ •Ç¿ •†¿ •°¿ •Ô¿ ¶¿ ¶¿ ¶P¿ ¶o¿ ¶p¿ ¶º¿ ¶—¿ ¶Ò¿ ¶Ú¿ ß1¿ ßO¿ ßP¿ ßù¿ ß¿¿ ß¡¿ ß‰¿ ®¿ ®¿ ®K¿ ®`¿ ®u¿ ®v¿ ®Æ¿ ®«¿ ®»¿ ®ˇ¿ ©¿ ©¿ ©_¿ ©u¿ ©è¿ ©ê¿ ©“¿ ©¿ ©Ò¿ ™,¿ ™H¿ ™I¿ ™Ç¿ ™ú¿ ™ù¿ ™Ï¿ ™˚¿ ´¿ ´¿ ´b¿ ´r¿ ´ê¿ ´ë¿ ´œ¿ ´Ó¿ ´Ô¿ ¨2¿ ¨Q¿ ¨R¿ ¨É¿ ¨†¿ ¨°¿ ¨ﬁ¿ ≠¿ ≠¿ ≠;¿ ≠\¿ ≠]¿ ≠ê¿ ≠≥¿ ≠¥¿ ≠—¿ ≠Ô¿ Æ¿ Æ,¿ ÆH¿ Æd¿ ÆÄ¿ Æú¿ Æ∏¿ Æ‘¿ Æ¿ Ø¿ Ø(¿ ØI¿ Øj¿ Øå¿ Ø™¿ ØÃ¿ ØÎ¿ ∞
¿ ∞*¿ ∞K¿ ∞l¿ ∞ï¿ ∞π¿ ∞‹¿ ± ¿ ±!¿ ±@¿ ±d¿ ±â¿ ±ß¿ ±∆¿ ±Ì¿ ≤¿ ≤3¿ ≤S¿ ≤y¿ ≤ò¿ ≤∏¿ ≤ÿ¿ ≤˚¿ ≥%¿ ≥L¿ ≥n¿ ≥é¿ ≥¨¿ ≥≠¿ ≥Ó¿ ¥¿ ¥¿ ¥G¿ ¥]¿ ¥^¿ ¥å¿ ¥ß¿ ¥®¿ ¥Ê¿ µ¿ µ¿ µ<¿ µY¿ µZ¿ µó¿ µπ¿ µ∫¿ µ∆¿ µﬂ¿ µ‡¿ ∂
¿ ∂$¿ ∂%¿ ∂a¿ ∂~¿ ∂¿ ∂≤¿ ∂÷¿ ∂◊¿ ∑¿ ∑/¿ ∑0¿ ∑`¿ ∑Ç¿ ∑É¿ ∑–¿ ∑Ì¿ ∏¿ ∏¿ ∏:¿ ∏U¿ ∏V¿ ∏d¿ ∏Ç¿ ∏É¿ ∏ë¿ ∏≤¿ ∏≥¿ ∏Î¿ π	¿ π
¿ π<¿ π]¿ π^¿ πß¿ πÛ¿ ∫A¿ ∫Q¿ ∫o¿ ∫p¿ ∫~¿ ∫†¿ ∫°¿ ∫¿ ª¿ ª-¿ ª.¿ ª{¿ ª∞¿ ª“¿ ª”¿ ª·¿ ªˇ¿ º ¿ º¿ º>¿ º?¿ ºä¿ ºô¿ º»¿ º…¿ Ω¿ Ω*¿ ΩZ¿ Ω[¿ Ωi¿ Ωï¿ Ωñ¿ Ω‰¿ æ¿ æ(¿ æ)¿ æ7¿ æV¿ æW¿ æ§¿ æﬂ¿ ø ¿ ø¿ øK¿ øñ¿ ø»¿ øË¿ øÈ¿ ¿5¿ ¿Ñ¿ ¿ô¿ ¿ª¿ ¿º¿ ¡
¿ ¡S¿ ¡ú¿ ¡”¿ ¡ˆ¿ ¡˜¿ ¬¿ ¬(¿ ¬)¿ ¬7¿ ¬R¿ ¬S¿ ¬†¿ ¬æ¿ ¬ø¿ ¬˝¿ √¿ √¿ √j¿ √ó¿ √∑¿ √∏¿ √Ì¿ ƒ
¿ ƒ¿ ƒ¿ ƒ0¿ ƒ1¿ ƒO¿ ƒn¿ ƒç¿ ƒ≠¿ ƒŒ¿ ƒÓ¿ ≈¿ ≈4¿ ≈[¿ ≈}¿ ≈û¿ ≈ª¿ ≈€¿ ≈¸¿ ∆¿ ∆<¿ ∆_¿ ∆{¿ ∆ü¿ ∆«¿ ∆Î¿ «¿ «;¿ «Y¿ «u¿ «ï¿ «ñ¿ «¿¿ «Â¿ «Ê¿ »¿ »:¿ »;¿ »k¿ »à¿ »â¿ »«¿ »Í¿ »Î¿ …*¿ …N¿ …O¿ …ç¿ …∞¿ …±¿ …Ò¿  ¿  ¿  b¿  ä¿  ã¿  ’¿  ¸¿  ˝¿ À'¿ ÀH¿ ÀI¿ Àê¿ À±¿ À≤¿ À¯¿ Ã¿ Ã ¿ ÃX¿ Ã}¿ Ã~¿ Ã¨¿ Ã’¿ Ã÷¿ Ã˛¿ Õ¿ Õ¿ ÕH¿ Õh¿ Õi¿ Õí¿ Õ±¿ Õ≤¿ Õ‚¿ Õˇ¿ Œ ¿ ŒF¿ Œh¿ Œi¿ Œí¿ ŒØ¿ Œ∞¿ Œ›¿ œ ¿ œ¿ œ9¿ œ^¿ œ_¿ œ°¿ œ»¿ œ…¿ –¿ –$¿ –%¿ –c¿ –Ü¿ –á¿ –»¿ –Ë¿ –È¿ —2¿ —H¿ —p¿ —q¿ —¿¿ “ ¿ “'¿ “(¿ “t¿ “è¿ “µ¿ “∂¿ “ı¿ ”¿ ”¿ ”c¿ ”p¿ ”ì¿ ”î¿ ”„¿ ‘¿ ‘¿ ‘E¿ ‘g       Ä£í&Å&Å&|/// Specifies a common language runtime Type, a type modifier, or information
/// about a type in a metadata type signature.  $Å9hÅãÅã/// Used internally.ÅPÅQÅ[ÅzÅ\ÅûÅ¶fÅıÅı/// A void type.ÅπÅ∫ÅƒÅ‰Å≈Ç	ÇoÇfÇf/// A Boolean type.Ç'Ç(Ç2ÇUÇ3Ç}ÇÖkÇŸÇŸ/// A character type.ÇùÇûÇ®Ç»Ç©ÇÌÇınÉNÉN/// A signed 1-byte integer.ÉÉÉÉ=É É`ÉhqÉƒÉƒ/// An unsigned 1-byte integer.ÉäÉãÉïÉ≥ÉñÉ÷ÉﬁnÑ7Ñ7/// A signed 2-byte integer.É˝É˛ÑÑ&Ñ	ÑIÑQqÑ≠Ñ≠/// An unsigned 2-byte integer.ÑsÑtÑ~ÑúÑÑøÑ«nÖ Ö /// A signed 4-byte integer.ÑÊÑÁÑÒÖÑÚÖ2Ö:qÖñÖñ/// An unsigned 4-byte integer.Ö\Ö]ÖgÖÖÖhÖ®Ö∞nÜ	Ü	/// A signed 8-byte integer.ÖœÖ–Ö⁄Ö¯Ö€ÜÜ#qÜÜ/// An unsigned 8-byte integer.ÜEÜFÜPÜnÜQÜëÜônÜÚÜÚ/// A 4-byte floating point.Ü∏ÜπÜ√Ü·Üƒááoáfáf/// An 8-byte floating point.á,á-á7áUá8áxáÄsá⁄á⁄/// A System.String type.áúáùáßá…á®áá¯pàRàR/// A pointer type modifier.ààà"àAà#àeàmwàÀàÀ/// A reference type modifier.àéàèàôà∫àöà‡àÈ{âGâG/// A value type modifier.ââââ6ââ`âisâ√â√/// A class type modifier.âÜâáâëâ≤âíâÿâ·xäBäB#/// A class variable type modifier.ääää1ääUä^ÄÖä ä ,/// A multi-dimensional array type modifier.äçäéäòäπäôäﬂäËÄããTãT&/// A type modifier for generic types.ããããCããoãxyã”ã”/// A typed reference.ãëãíãúã¬ãùãÌãˆnåOåO/// Size of a native integer.ååå!å>å"å`åixåÃåÃ'/// Size of an unsigned native integer.åìåîåûåªåüå›åÊuçBçB/// A pointer to a function.çççç1ççWç`tç∫ç∫/// A System.Object type.ç|ç}çáç©çàç–çŸÄúéZéZ?/// A single-dimensional, zero lower-bound array type modifier.ééé&éIé'éqéz{é›é›$/// A method variable type modifier.é°é¢é¨éÃé≠éÒé˙ÄÑèaèa#/// A C language required modifier.è è!è+èPè,èzèÉÄÇèÈèÈ#/// A C language optional modifier.è©è™è¥èÿèµêê
sêaêa/// Used internally.ê!ê"ê,êPê-êyêÇiê‘ê‘/// An invalid type.êôêöê§ê√ê•êÁêsëGëG/// Used internally.ëëëë6ëë_ëhÄ“ííY/// A type modifier that is a sentinel for a list of a variable number of
/// parameters.ë∆ë«ë—ëıë“í#íí%í?Äáíîíî/// Used internally.íVíWíaíÉíbíØí™í±   íÀÇ@ìì;/// Contains values that describe the metadata of an event.  ìÄöì¢ì¢I/// Specifies that the event is special, and that its name describes how.ìjìkìuìëìvì≤ìΩÄêî6î6=/// Reserved for internal use by the common language runtime.ì˝ì˛îî%î	îGîRÄ∂îî_/// Specifies that the common language runtime should check the encoding of
/// the event name.î∂î∑î¡îﬂî¬ï   ïãÎïMïM9/// Contains values that describe metadata about a field.  ï^ÄÅï≈ï≈(/// Specifies accessibility information.ïâïäïîï¥ïïïŸï‰ÄÖñRñR2/// Specifies that the field cannot be referenced.ñññ$ñAñ%ñcñnÄåñËñËC/// Specifies that the field is accessible only by its parent type.ñ¥ñµñøñ◊ñ¿ñÙñˇÄüóàóàN/// Specifies that the field is accessible by derived classes in its assembly.óPóQó[ówó\óòó£Äìò#ò#H/// Specifies that the field is accessible by all types in its assembly.óÓóÔó˘òó˙ò0ò;Äùò«ò«T/// Specifies that the field is accessible only by its type and derived
/// classes.òîòïòüò∂ò†ò“ò›Ä¥ô|ô|c/// Specifies that the field is accessible by derived classes and by all types
/// in its assembly.ôEôFôPôkôQôãôñÄ£ö(ö(Z/// Specifies that the field is accessible by all types with visibility of
/// this scope.ôıôˆö ööö3ö>Ä°öŒöŒX/// Specifies that the field is a member of its type rather than an instance
/// member.öõöúö¶öΩößöŸö‰ÄíõcõcG/// Specifies that the field cannot be changed after it is initialized.õ.õ/õ9õRõ:õpõ{Äáõõ>/// Specifies that the field value is a compile-time constant.õºõΩõ«õﬂõ»õ¸úÄùúåúåH/// Specifies that the field is not serialized when its type is remoted.úRúSú]ú{ú^úûú©Äöù-ù-I/// Specifies that the field is special, and that its name describes how.úıúˆù ùùù=ùHÄöùÃùÃI/// Specifies that the field implementation is forwarded through PInvoke.ùîùïùüùªù†ù‹ùÁÄêû`û`=/// Reserved for internal use by the common language runtime.û'û(û2ûOû3ûqû|Ä«ü+ü+p/// Specifies that the common language runtime metadata internal APIs should
/// check the encoding of the name.ûÒûÚû¸üû˝ü=üHÄñüƒüƒ=/// Specifies that the field contains marshaling information.üàüâüìü≥üîüÿü„ÄÄ†N†N1/// Specifies that the field has a default value.†††"†=†#†]†hÄç†ﬂ†ﬂ</// Specifies that the field has a relative virtual address.†ß†®†≤†Œ†≥†Ô   †˙Ü'°I°IH/// Contains values that describe the Type parameters for generic types.  	°aÄ∞°˙°˙[/// Parameter variance applies only to generic parameters for interfaces and
/// delegates.°¡°¬°Ã°È°Õ¢¢u¢v¢v&/// Indicates the absence of variance.¢?¢@¢J¢e¢K¢Ö¢êf¢‚¢‚/// Indicates covariance.¢¨¢≠¢∑¢—¢∏¢¢˚r£U£U/// Indicates contravariance.£££&£D£'£g£rÄù£Ô£Ô8/// Special constraints can apply to any Type parameter.£≠£Æ£∏£ﬁ£π§	§Ä†§ñ§ñ?/// Indicates that no constraint applies to the Type parameter.§V§W§a§Ö§b§Æ§πÄ®•?•??/// Indicates that the Type parameter must be a reference type.§˚§¸••.••[•fÄ‘¶¶[/// Indicates that the Type parameter must be a value type that cannot be a
/// null value.•∆•«•—¶ •“¶4¶?Äﬂ¶˜¶˜j/// Indicates that the Type parameter must have a default public constructor
/// that takes no parameters.¶Æ¶Ø¶π¶Ê¶∫ß   ß#è
ßeße;/// Contains values that describe the features of a method.  ßwwß”ß”/// Specifies member access.ßñßóß°ß¬ß¢ßËßÛÄÜ®b®b3/// Specifies that the member cannot be referenced.®)®*®4®Q®5®s®~Äç®˘®˘D/// Specifies that the member is accessible only by the parent type.®≈®∆®–®Ë®—©©Äü©ô©ôN/// Specifies that the member is accessible by subtypes only in this assembly.©a©b©l©à©m©©©¥Äã™/™/F/// Specifies that the member is accessibly by anyone in the assembly.©˝©˛™™™	™9™DÄç™¿™¿F/// Specifies that the member is accessible only by type and subtypes.™ç™é™ò™Ø™ô™À™÷Ä∑´x´xf/// Specifies that the member is accessible by derived classes and by other
/// types in its assembly.´A´B´L´g´M´á´íÄü¨ ¨ V/// Specifies that the member is accessible by all types with access to the
/// scope.´Ì´Ó´¯¨´˘¨+¨6Ä±¨÷¨÷h/// Specifies that the member is defined as part of the type rather than as a
/// member of an instance.¨£¨§¨Æ¨≈¨Ø¨·¨Ïx≠T≠T3/// Specifies that the method cannot be overridden.≠"≠#≠-≠C≠.≠^≠iy≠–≠–0/// Specifies that the method can be overridden.≠ú≠ù≠ß≠ø≠®≠‹≠ÁÄßÆzÆzX/// Specifies that the method hides by name and signature, rather than just by
/// name.ÆDÆEÆOÆiÆPÆàÆì~ÆˆÆˆ#/// Specifies virtual table layout.ÆπÆ∫ÆƒÆÂÆ≈ØØÄ∏Ø∫Ø∫i/// Specifies that the slot used for this method in the virtual table be
/// reused. This is the default.ØÑØÖØèØ©ØêØ»Ø”Äì∞T∞TJ/// Specifies that the method always gets a new slot in the virtual table.∞ ∞!∞+∞C∞,∞`∞kÄƒ±±]/// Specifies that the method can be overridden by the same types to which it
/// is visible.∞Õ∞Œ∞ÿ∞˛∞Ÿ±)±4|±ù±ù1/// Specifies that the method is not implemented.±h±i±s±å±t±™±µÄõ≤:≤:J/// Specifies that the method is special, and that its name describes how.≤≤≤≤)≤≤J≤UÄô≤ÿ≤ÿH/// Specifies that the method implementation is forwarded using PInvoke.≤†≤°≤´≤«≤¨≤Ë≤ÛÄ¶≥≥M/// Specifies that the method is a managed method exported to unmanaged code.≥C≥D≥N≥n≥O≥ì≥ûÄê¥¥=/// Reserved for internal use by the common language runtime.≥ﬁ≥ﬂ≥È¥≥Í¥(¥3Ä∑¥“¥“`/// Specifies that the common language runtime should check the encoding of
/// the method name.¥ò¥ô¥£¥¡¥§¥‰¥ÔÄèµhµh>/// Specifies that the method has security associated with it.µ0µ1µ;µWµ<µxµÉÄß∂∂L/// Specifies that the method calls another method containing security code.µ“µ”µ›µ˛µﬁ∂$   ∂/â•∂w∂wA/// Contains values that describe method implementation features.  ∂âu∂Á∂Á"/// Flags that describe code type.∂Æ∂Ø∂π∂÷∂∫∂¯∑Äú∑í∑í[/// Specifies that the method implementation is Microsoft intermediate
/// language (MSIL).∑c∑d∑n∑Å∑o∑ô∑§~∏∏7/// Specifies that the method implementation is native.∑ﬁ∑ﬂ∑È∏ ∑Í∏∏'{∏í∏í6/// Specifies that the method implementation is OPTIL.∏`∏a∏k∏Å∏l∏ú∏ßÄßπ<π<\/// Specifies that the method implementation is provided by the common
/// language runtime.ππ	ππ+ππHπSÄíπœπœA/// Flags that indicate whether the code is managed or unmanaged.πóπòπ¢πæπ£πﬂπÍÄá∫]∫]:/// Specifies that the method implementation is unmanaged.∫'∫(∫2∫L∫3∫k∫vÄÅ∫Â∫Â8/// Specifies that the method implementation is managed.∫±∫≤∫º∫‘∫Ω∫Ò∫¸ÄÆªïªï]/// Specifies that the method is defined. This flag is used primarily in merge
/// scenarios.ª^ª_ªiªÑªjª§ªØÄ´ºDºDX/// Specifies that the method signature cannot be mangled for an HRESULT
/// conversion.ºººº3ººTº_Äêºÿºÿ=/// Reserved for internal use by the common language runtime.ºüº†º™º«º´ºÈºÙÄïΩrΩrB/// Specifies that the method is single-threaded through its body.Ω9Ω:ΩDΩaΩEΩÉΩéΩ¯Ω¯0/// Specifies that the method cannot be inlined.Ω¡Ω¬ΩÃΩÁΩÕææÄõæêæê</// Specifies that the method should be inlined if possible.æQæRæ\ææ]æßæ≤Äçø&ø&6/// Specifies that the method should not be optimized.æÎæÏæˆøæ˜ø9øDÄçø∂ø∂2/// The maximum valid value for a [CorMethodImpl].øyøzøÑø•øÖøÀ   ø÷êπ¿ @¿ @9/// Contains values that describe native unmanaged types.  /¿ @(O¿ @b¿ @b ¿ @(¿ @)¿ @3¿ @Q¿ @4¿ @t¿ @{Q¿ @∂¿ @∂ ¿ @{¿ @|¿ @Ü¿ @•¿ @á¿ @…¿ @–W¿ A¿ A ¿ @–¿ @—¿ @€¿ @˝¿ @‹¿ A$¿ A+M¿ Ad¿ Ad ¿ A+¿ A,¿ A6¿ AS¿ A7¿ Au¿ A|M¿ Aµ¿ Aµ ¿ A|¿ A}¿ Aá¿ A§¿ Aà¿ A∆¿ AÕM¿ B¿ B ¿ AÕ¿ AŒ¿ Aÿ¿ Aı¿ AŸ¿ B¿ BM¿ BW¿ BW ¿ B¿ B¿ B)¿ BF¿ B*¿ Bh¿ BoM¿ B®¿ B® ¿ Bo¿ Bp¿ Bz¿ Bó¿ B{¿ Bπ¿ B¿M¿ B˘¿ B˘ ¿ B¿¿ B¡¿ BÀ¿ BË¿ BÃ¿ C
¿ CM¿ CJ¿ CJ ¿ C¿ C¿ C¿ C9¿ C¿ C[¿ CbM¿ Cõ¿ Cõ ¿ Cb¿ Cc¿ Cm¿ Cä¿ Cn¿ C¨¿ C≥M¿ CÏ¿ CÏ ¿ C≥¿ C¥¿ Cæ¿ C€¿ Cø¿ C˝¿ DM¿ D=¿ D= ¿ D¿ D¿ D¿ D,¿ D¿ DN¿ DUW¿ Dì¿ Dì ¿ DU¿ DV¿ D`¿ DÇ¿ Da¿ D©¿ D∞W¿ DÓ¿ DÓ ¿ D∞¿ D±¿ Dª¿ D›¿ Dº¿ E¿ EY¿ EJ¿ EJ ¿ E¿ E¿ E¿ E9¿ E¿ Ea¿ EhP¿ E¢¿ E¢ ¿ Eh¿ Ei¿ Es¿ Eë¿ Et¿ E¥¿ EºX¿ E˙¿ E˙ ¿ Eº¿ EΩ¿ E«¿ EÈ¿ E»¿ F¿ FR¿ FS¿ FS ¿ F¿ F¿ F#¿ FB¿ F$¿ Ff¿ FnR¿ F©¿ F© ¿ Fn¿ Fo¿ Fy¿ Fò¿ Fz¿ Fº¿ FƒT¿ G ¿ G  ¿ Fƒ¿ F≈¿ Fœ¿ FÔ¿ F–¿ G¿ GV¿ GY¿ GY ¿ G¿ G¿ G'¿ GH¿ G(¿ Gn¿ GvV¿ G≥¿ G≥ ¿ Gv¿ Gw¿ GÅ¿ G¢¿ GÇ¿ G»¿ G–f¿ H¿ H ¿ G–¿ G—¿ G€¿ H¿ G‹¿ H2¿ H:\¿ Hz¿ Hz ¿ H:¿ H;¿ HE¿ Hi¿ HF¿ Hí¿ HöZ¿ HŸ¿ HŸ ¿ Hö¿ Hõ¿ H•¿ H»¿ H¶¿ H¿ H¯\¿ I8¿ I8 ¿ H¯¿ H˘¿ I¿ I'¿ I¿ IP¿ IXV¿ Iï¿ Iï ¿ IX¿ IY¿ Ic¿ IÑ¿ Id¿ I™¿ I≤R¿ IÌ¿ IÌ ¿ I≤¿ I≥¿ IΩ¿ I‹¿ Iæ¿ J ¿ J\¿ JH¿ JH ¿ J¿ J	¿ J¿ J7¿ J¿ J`¿ Jh^¿ J©¿ J© ¿ Jh¿ Ji¿ Js¿ Jò¿ Jt¿ J¬¿ J P¿ K¿ K ¿ J ¿ JÀ¿ J’¿ JÛ¿ J÷¿ K¿ KR¿ KY¿ KY ¿ K¿ K¿ K)¿ KH¿ K*¿ Kl¿ Ktb¿ K∑¿ K∑ ¿ Kt¿ Ku¿ K¿ K¶¿ KÄ¿ K“¿ K⁄Z¿ L¿ L ¿ K⁄¿ K€¿ KÂ¿ L¿ KÊ¿ L0¿ L8Z¿ Lw¿ Lw ¿ L8¿ L9¿ LC¿ Lf¿ LD¿ Lé¿ LñT¿ L“¿ L“ ¿ Lñ¿ Ló¿ L°¿ L¡¿ L¢¿ LÊ¿ LÓ`¿ M0¿ M0 ¿ LÓ¿ LÔ¿ L˘¿ M¿ L˙¿ MJ¿ MRR¿ Mç¿ Mç ¿ MR¿ MS¿ M]¿ M|¿ M^¿ M†¿ M®T¿ M‰¿ M‰ ¿ M®¿ M©¿ M≥¿ M”¿ M¥¿ M¯¿ N T¿ N<¿ N< ¿ N ¿ N¿ N¿ N+¿ N¿ NP¿ NXZ¿ Nó¿ Nó ¿ NX¿ NY¿ Nc¿ NÜ¿ Nd¿ NÆ¿ N∂h¿ N¸¿ N¸ ¿ N∂¿ N∑¿ N¡¿ NÎ¿ N¬¿ O¿ O"b¿ Oe¿ Oe ¿ O"¿ O#¿ O-¿ OT¿ O.¿ OÄ¿ OàX¿ O∆¿ O∆ ¿ Oà¿ Oâ¿ Oì¿ Oµ¿ Oî¿ O‹¿ O‰T¿ P ¿ P  ¿ O‰¿ OÂ¿ OÔ¿ P¿ O¿ P4¿ P<P¿ Pv¿ Pv ¿ P<¿ P=¿ PG¿ Pe¿ PH¿ Pà   ¿ PëÉÛ¿ P›¿ P›E/// Contains values that describe the metadata of a method parameter.  ¿ PÓ¿ Q`¿ Q`@/// Specifies that the parameter is passed into the method call.¿ Q1¿ Q2¿ Q<¿ QO¿ Q=¿ Qg¿ QrÄÉ¿ QÁ¿ QÁB/// Specifies that the parameter is passed from the method return.¿ Q∑¿ Q∏¿ Q¬¿ Q÷¿ Q√¿ QÔ¿ Q˙x¿ R_¿ R_-/// Specifies that the parameter is optional.¿ R*¿ R+¿ R5¿ RN¿ R6¿ Rl¿ RwÄê¿ R¿ R=/// Reserved for internal use by the common language runtime.¿ R∑¿ R∏¿ R¬¿ Rﬂ¿ R√¿ S¿ SÄÑ¿ S{¿ S{5/// Specifies that the parameter has a default value.¿ SD¿ SE¿ SO¿ Sj¿ SP¿ Sä¿ SïÄï¿ T¿ T</// Specifies that the parameter has marshaling information.¿ S‘¿ S’¿ Sﬂ¿ Sˇ¿ S‡¿ T$¿ T/R¿ Tp¿ Tp/// Unused.¿ T=¿ T>¿ TH¿ T_¿ TI¿ T{   ¿ TÜÉ¡¿ Tœ¿ TœB/// Contains values that describe a portable executable (PE) file.  ¿ T›n¿ U9¿ U9)/// Indicates that this is not a PE file.¿ U	¿ U
¿ U¿ U(¿ U¿ UA¿ UPÄÜ¿ U¡¿ U¡;/// Indicates that this PE file contains only managed code.¿ Ué¿ Uè¿ Uô¿ U∞¿ Uö¿ UÃ¿ U€Äã¿ VJ¿ VJ2/// Indicates that this PE file makes Win32 calls.¿ V¿ V¿ V¿ V9¿ V¿ V\¿ VkÄÖ¿ V€¿ V€:/// Indicates that this PE file runs on a 64-bit platform.¿ V®¿ V©¿ V≥¿ V ¿ V¥¿ VÊ¿ VıÄÑ¿ W_¿ W_//// Indicates that this PE file is native code.¿ W'¿ W(¿ W2¿ WN¿ W3¿ Wo¿ W~Ä∆¿ X'¿ X'i/// Indicates that this PE file is platform-neutral and prefers to be loaded
/// in a 32-bit environment.¿ WÏ¿ WÌ¿ W˜¿ X¿ W¯¿ X:   ¿ XIè¨¿ Xy¿ Xy)/// Specifies options for a PInvoke call.  ¿ Xãq¿ XÈ¿ XÈ&/// Use each member name as specified.¿ X¥¿ Xµ¿ Xø¿ Xÿ¿ X¿¿ Xˆ¿ Y^¿ YI¿ YI/// Reserved.¿ Y¿ Y¿ Y¿ Y8¿ Y¿ YY¿ Ydd¿ YØ¿ YØ/// Reserved.¿ Yt¿ Yu¿ Y¿ Yû¿ YÄ¿ Y¬¿ YÕÄà¿ Z?¿ Z?7/// Marshal strings as multiple-byte character strings.¿ Z¿ Z¿ Z¿ Z.¿ Z¿ ZO¿ ZZÄà¿ Z…¿ Z…1/// Marshal strings as Unicode 2-byte characters.¿ Zé¿ Zè¿ Zô¿ Z∏¿ Zö¿ Z‹¿ ZÁÅI¿ \¿ \ÄÚ/// Automatically marshal strings appropriately for the target operating
/// system. The default is Unicode on Windows NT, Windows 2000, Windows XP,
/// and the Windows Server 2003 family; the default is ANSI on Windows 98 and
/// Windows Me.¿ [‚¿ [„¿ [Ì¿ \	¿ [Ó¿ \*¿ \5f¿ \Å¿ \Å/// Reserved.¿ \E¿ \F¿ \P¿ \p¿ \Q¿ \ï¿ \†Ä√¿ ]J¿ ]Jj/// Perform best-fit mapping of Unicode characters that lack an exact match in
/// the ANSI character set.¿ ]¿ ]¿ ]¿ ]9¿ ]¿ ]]¿ ]hÄ‹¿ ^*¿ ^*ÄÖ/// Do not perform best-fit mapping of Unicode characters. In this case, all
/// unmappable characters will be replaced by a ‚Äò?‚Äô.¿ ]Ó¿ ]Ô¿ ]˘¿ ^¿ ]˙¿ ^>¿ ^I^¿ ^ë¿ ^ë/// Reserved.¿ ^Y¿ ^Z¿ ^d¿ ^Ä¿ ^e¿ ^°¿ ^¨ÄÇ¿ _¿ _/// Reserved.¿ ^º¿ ^Ω¿ ^«¿ ^ı¿ ^»¿ _(¿ _3ÄŒ¿ _⁄¿ _⁄Y/// Throw an exception when the interop marshaler encounters an unmappable
/// character.¿ _ë¿ _í¿ _ú¿ _…¿ _ù¿ _˚¿ `Ä◊¿ `µ¿ `µ`/// Do not throw an exception when the interop marshaler encounters an
/// unmappable character.¿ `k¿ `l¿ `v¿ `§¿ `w¿ `◊¿ `‚z¿ a8¿ a8/// Reserved.¿ `Ú¿ `Û¿ `˝¿ a'¿ `˛¿ aV¿ aaÄÃ¿ b¿ bm/// Allow the callee to call the Win32 SetLastError function before returning
/// from the attributed method.¿ a”¿ a‘¿ aﬁ¿ b ¿ aﬂ¿ b'¿ b2`¿ b{¿ b{/// Reserved.¿ bB¿ bC¿ bM¿ bj¿ bN¿ bå¿ bóÄ‡¿ c^¿ c^Äá/// Use the default platform calling convention. For example, on Windows the
/// default is StdCall and on Windows CE .NET it is Cdecl.¿ c#¿ c$¿ c.¿ cM¿ c/¿ cq¿ c|Å¿ dÉ¿ dÉÄ∆/// Use the Cdecl calling convention. In this case, the caller cleans the
/// stack. This enables calling functions with varargs (that is, functions
/// that accept a variable number of parameters).¿ dI¿ dJ¿ dT¿ dr¿ dU¿ dï¿ d†Å¿ eí¿ eíÄØ/// Use the StdCall calling convention. In this case, the callee cleans the
/// stack. This is the default convention for calling unmanaged functions with
/// platform invoke.¿ eV¿ eW¿ ea¿ eÅ¿ eb¿ e¶¿ e±Åw¿ g¿ gÅ/// Use the ThisCall calling convention. In this case, the first parameter is
/// the this pointer and is stored in register ECX. Other parameters are
/// pushed on the stack. The ThisCall calling convention is used to call
/// methods on classes exported from an unmanaged DLL.¿ f–¿ f—¿ f€¿ f¸¿ f‹¿ g"¿ g-h¿ gz¿ gz/// Reserved.¿ g=¿ g>¿ gH¿ gi¿ gI¿ gè¿ göX¿ gﬂ¿ gﬂ/// Reserved.¿ g™¿ g´¿ gµ¿ gŒ¿ g∂¿ gÏ   ¿ g˜ÉA¿ h;¿ h;=/// Contains values that describe the metadata of a property.  ¿ hOÄù¿ h÷¿ h÷L/// Specifies that the property is special, and that its name describes how.¿ hû¿ hü¿ h©¿ h≈¿ h™¿ hÊ¿ hÒÄê¿ ij¿ ij=/// Reserved for internal use by the common language runtime.¿ i1¿ i2¿ i<¿ iY¿ i=¿ i{¿ iÜÄ–¿ j>¿ j>y/// Specifies that the common language runtime metadata internal APIs should
/// check the encoding of the property name.¿ j¿ j¿ j¿ j-¿ j¿ jP¿ j[ÄÉ¿ j…¿ j…4/// Specifies that the property has a default value.¿ jí¿ jì¿ jù¿ j∏¿ jû¿ jÿ¿ j„R¿ k$¿ k$/// Unused.¿ jÒ¿ jÚ¿ j¸¿ k¿ j˝¿ k/   ¿ k:àﬁ¿ kl¿ kl+/// Indicates the type of a metadata token.  ¿ k}J¿ k±¿ k± ¿ k}¿ k~¿ kà¿ k†¿ kâ¿ kΩ¿ kÀL¿ l ¿ l  ¿ kÀ¿ kÃ¿ k÷¿ kÔ¿ k◊¿ l¿ lL¿ lP¿ lP ¿ l¿ l¿ l&¿ l?¿ l'¿ l]¿ lkN¿ l°¿ l° ¿ lk¿ ll¿ lv¿ lê¿ lw¿ lØ¿ lΩP¿ lÙ¿ lÙ ¿ lΩ¿ læ¿ l»¿ l„¿ l…¿ m¿ mN¿ mG¿ mG ¿ m¿ m¿ m¿ m6¿ m¿ mU¿ mcX¿ mû¿ mû ¿ mc¿ md¿ mn¿ mç¿ mo¿ m±¿ møP¿ mˆ¿ mˆ ¿ mø¿ m¿¿ m ¿ mÂ¿ mÀ¿ n¿ n\¿ nP¿ nP ¿ n¿ n¿ n¿ n?¿ n¿ ne¿ nsR¿ n´¿ n´ ¿ ns¿ nt¿ n~¿ nö¿ n¿ nª¿ n…P¿ o ¿ o  ¿ n…¿ n ¿ n‘¿ nÔ¿ n’¿ o¿ oH¿ oP¿ oP ¿ o¿ o¿ o(¿ o?¿ o)¿ o[¿ oiN¿ oü¿ oü ¿ oi¿ oj¿ ot¿ oé¿ ou¿ o≠¿ oªP¿ oÚ¿ oÚ ¿ oª¿ oº¿ o∆¿ o·¿ o«¿ p¿ pN¿ pE¿ pE ¿ p¿ p¿ p¿ p4¿ p¿ pS¿ paN¿ pó¿ pó ¿ pa¿ pb¿ pl¿ pÜ¿ pm¿ p•¿ p≥T¿ pÏ¿ pÏ ¿ p≥¿ p¥¿ pæ¿ p€¿ pø¿ p˝¿ qF¿ q=¿ q= ¿ q¿ q¿ q¿ q,¿ q¿ qG¿ qUV¿ qè¿ qè ¿ qU¿ qV¿ q`¿ q~¿ qa¿ q°¿ qØ^¿ qÌ¿ qÌ ¿ qØ¿ q∞¿ q∫¿ q‹¿ qª¿ r¿ rV¿ rK¿ rK ¿ r¿ r¿ r¿ r:¿ r¿ r]¿ rkR¿ r£¿ r£ ¿ rk¿ rl¿ rv¿ rí¿ rw¿ r≥¿ r¡j¿ s¿ s ¿ r¡¿ r¬¿ rÃ¿ rÙ¿ rÕ¿ s!¿ s/J¿ sc¿ sc ¿ s/¿ s0¿ s:¿ sR¿ s;¿ so¿ s}F¿ sØ¿ sØ ¿ s}¿ s~¿ sà¿ sû¿ sâ¿ sπ¿ s«N¿ s˝¿ s˝ ¿ s«¿ s»¿ s“¿ sÏ¿ s”¿ t   ¿ tî1¿ tQ¿ tQ0/// Contains values that indicate type metadata.  !¿ taÄÑ¿ t»¿ t»)/// Used for type visibility information.¿ tç¿ té¿ tò¿ t∑¿ tô¿ t€¿ tÍÄÑ¿ uV¿ uV3/// Specifies that the type is not in public scope.¿ u ¿ u!¿ u+¿ uE¿ u,¿ ud¿ usz¿ uÿ¿ uÿ//// Specifies that the type is in public scope.¿ u•¿ u¶¿ u∞¿ u«¿ u±¿ u„¿ uÚÄî¿ vk¿ vk=/// Specifies that the type is nested with public visibility.¿ v2¿ v3¿ v=¿ vZ¿ v>¿ v|¿ vãÄó¿ w¿ w>/// Specifies that the type is nested with private visibility.¿ vÃ¿ vÕ¿ v◊¿ vı¿ vÿ¿ w¿ w'Äî¿ w†¿ w†=/// Specifies that the type is nested with family visibility.¿ wg¿ wh¿ wr¿ wè¿ ws¿ w±¿ w¿Äö¿ x=¿ x=?/// Specifies that the type is nested with assembly visibility.¿ x¿ x¿ x¿ x,¿ x¿ xP¿ x_Ä´¿ xÍ¿ xÍJ/// Specifies that the type is nested with family and assembly visibility.¿ x¨¿ x≠¿ x∑¿ xŸ¿ x∏¿ y ¿ yÄ®¿ yò¿ yòI/// Specifies that the type is nested with family or assembly visibility.¿ y[¿ y\¿ yf¿ yá¿ yg¿ y≠¿ yº|¿ z¿ z)/// Gets layout information for the type.¿ yË¿ yÈ¿ yÛ¿ z¿ yÙ¿ z.¿ z=Äô¿ zΩ¿ zΩF/// Specifies that the fields of this type are laid out automatically.¿ zÜ¿ zá¿ zë¿ z¨¿ zí¿ zÃ¿ z€Ä§¿ {`¿ {`E/// Specifies that the fields of this type are laid out sequentially.¿ {#¿ {$¿ {.¿ {O¿ {/¿ {u¿ {ÑÄí¿ {˘¿ {˘7/// Specifies that field layout is supplied explicitly.¿ {æ¿ {ø¿ {…¿ {Ë¿ { ¿ |¿ |Äê¿ |ä¿ |ä-/// Gets semantic information about the type.¿ |K¿ |L¿ |V¿ |y¿ |W¿ |°¿ |∞p¿ }¿ }'/// Specifies that the type is a class.¿ |⁄¿ |€¿ |Â¿ |˚¿ |Ê¿ }¿ }%}¿ }ä¿ }ä,/// Specifies that the type is an interface.¿ }T¿ }U¿ }_¿ }y¿ }`¿ }ò¿ }ßw¿ ~¿ ~(/// Specifies that the type is abstract.¿ }“¿ }”¿ }›¿ }ˆ¿ }ﬁ¿ ~¿ ~#z¿ ~à¿ ~à//// Specifies that the type cannot be extended.¿ ~U¿ ~V¿ ~`¿ ~w¿ ~a¿ ~ì¿ ~¢Äö¿ "¿ "E/// Specifies that the class name is special. Its name describes how.¿ ~Í¿ ~Î¿ ~ı¿ ¿ ~ˆ¿ 2¿ As¿ ü¿ ü(/// Specifies that the type is imported.¿ l¿ m¿ w¿ é¿ x¿ ™¿ πÄÉ¿ Ä!¿ Ä!,/// Specifies that the type is serializable.¿ Ë¿ È¿ Û¿ Ä¿ Ù¿ Ä2¿ ÄAÄí¿ Ä∂¿ Ä∂7/// Specifies that this type is a Windows Runtime type.¿ Ä{¿ Ä|¿ ÄÜ¿ Ä•¿ Äá¿ Ä…¿ ÄÿÄ†¿ ÅY¿ ÅYA/// Gets information about how strings are encoded and formatted.¿ Å¿ Å¿ Å'¿ ÅH¿ Å(¿ Ån¿ Å}Äã¿ Å¿ Å:/// Specifies that this type interprets an LPTSTR as ANSI.¿ Å∫¿ Åª¿ Å≈¿ Åﬂ¿ Å∆¿ Å˛¿ ÇÄî¿ ÇÜ¿ ÇÜ=/// Specifies that this type interprets an LPTSTR as Unicode.¿ ÇM¿ ÇN¿ ÇX¿ Çu¿ ÇY¿ Çó¿ Ç¶Äë¿ É¿ É@/// Specifies that this type interprets an LPTSTR automatically.¿ ÇÈ¿ ÇÍ¿ ÇÙ¿ É¿ Çı¿ É-¿ É<Ä¡¿ É›¿ É›^/// Specifies that the type has a non-standard encoding, as specified by
/// CustomFormatMask.¿ Éü¿ É†¿ É™¿ ÉÃ¿ É´¿ ÉÛ¿ ÑÄÔ¿ Ñ“¿ Ñ“Äé/// Use this mask to get non-standard encoding information for native interop.
/// The meaning of the values of these two bits is unspecified.¿ Ñï¿ Ññ¿ Ñ†¿ Ñ¡¿ Ñ°¿ ÑÁ¿ ÑˆÄ≈¿ Öù¿ Öùf/// Specifies that the type must be initialized before the first attempt to
/// access a static field.¿ Öa¿ Öb¿ Öl¿ Öå¿ Öm¿ Ö±¿ Ö¿Äè¿ Ü7¿ Ü7>/// Specifies that the type is exported, and a type forwarder.¿ Ü¿ Ü¿ Ü¿ Ü&¿ Ü¿ ÜE¿ ÜTÄ≤¿ ÜÎ¿ ÜÎY/// This flag and the flags below are used internally by the common language
/// runtime.¿ Ü≤¿ Ü≥¿ ÜΩ¿ Ü⁄¿ Üæ¿ Ü¸¿ áÄß¿ áñ¿ áñN/// Specifies that the common language runtime should check the name encoding.¿ á\¿ á]¿ ág¿ áÖ¿ áh¿ á®¿ á∑Äë¿ à.¿ à.</// Specifies that the type has security associated with it.¿ áˆ¿ á˜¿ à¿ à¿ à¿ à>            Ä˝¿ àM1¿ àh¿ àh/// Used internally.¿ à{¿ àÅ.¿ àò¿ àò/// A void type.¿ à¨¿ à≤4¿ àÃ¿ àÃ/// A Boolean type.¿ à„¿ àÈ3¿ â¿ â/// A character type.¿ â¿ â8¿ âB¿ âB/// A signed 1-byte integer.¿ âT¿ âZ;¿ âÄ¿ âÄ/// An unsigned 1-byte integer.¿ âí¿ âò8¿ âª¿ âª/// A signed 2-byte integer.¿ âÕ¿ â”;¿ â˘¿ â˘/// An unsigned 2-byte integer.¿ ä¿ ä8¿ ä4¿ ä4/// A signed 4-byte integer.¿ äF¿ äL;¿ är¿ är/// An unsigned 4-byte integer.¿ äÑ¿ ää8¿ ä≠¿ ä≠/// A signed 8-byte integer.¿ äø¿ ä≈;¿ äÎ¿ äÎ/// An unsigned 8-byte integer.¿ ä˝¿ ã8¿ ã&¿ ã&/// A 4-byte floating point.¿ ã8¿ ã>9¿ ãb¿ ãb/// An 8-byte floating point.¿ ãt¿ ãz9¿ ãö¿ ãö/// A System.String type.¿ ã∞¿ ã∂9¿ ãŸ¿ ãŸ/// A pointer type modifier.¿ ãÏ¿ ãÚ>¿ å¿ å/// A reference type modifier.¿ å,¿ å3>¿ åT¿ åT/// A value type modifier.¿ åm¿ åt:¿ åï¿ åï/// A class type modifier.¿ å™¿ å±A¿ å€¿ å€#/// A class variable type modifier.¿ åÓ¿ åıL¿ ç(¿ ç(,/// A multi-dimensional array type modifier.¿ ç=¿ çDL¿ çq¿ çq&/// A type modifier for generic types.¿ çå¿ çì;¿ ç∞¿ ç∞/// A typed reference.¿ ç ¿ ç—9¿ çı¿ çı/// Size of a native integer.¿ é¿ éC¿ é;¿ é;'/// Size of an unsigned native integer.¿ éL¿ éS<¿ év¿ év/// A pointer to a function.¿ éã¿ éí:¿ é≤¿ é≤/// A System.Object type.¿ é»¿ éœa¿ è¿ è?/// A single-dimensional, zero lower-bound array type modifier.¿ è,¿ è3C¿ è^¿ è^$/// A method variable type modifier.¿ èr¿ èyG¿ è£¿ è£#/// A C language required modifier.¿ èº¿ è√F¿ èÌ¿ èÌ#/// A C language optional modifier.¿ ê¿ ê7¿ ê'¿ ê'/// Used internally.¿ ê?¿ êF2¿ êa¿ êa/// An invalid type.¿ êt¿ ê{7¿ êñ¿ êñ/// Used internally.¿ êÆ¿ êµÄî¿ ë¿ ëY/// A type modifier that is a sentinel for a list of a variable number of
/// parameters.¿ ë2¿ ë-¿ ë4¿ ëLM¿ ëg¿ ëg/// Used internally.¿ ëÇ¿ ë}¿ ëÑ¿ ëúf¿ ëÏ¿ ëÏI/// Specifies that the event is special, and that its name describes how.¿ ë¸¿ í[¿ íI¿ íI=/// Reserved for internal use by the common language runtime.¿ íZ¿ íc~¿ í…¿ í…_/// Specifies that the common language runtime should check the encoding of
/// the event name.¿ í€¿ í‰I¿ ì¿ ì(/// Specifies accessibility information.¿ ì'¿ ì0P¿ ìi¿ ìi2/// Specifies that the field cannot be referenced.¿ ìz¿ ìÉ\¿ ìÕ¿ ìÕC/// Specifies that the field is accessible only by its parent type.¿ ìŸ¿ ì‚k¿ î7¿ î7N/// Specifies that the field is accessible by derived classes in its assembly.¿ îG¿ îPb¿ îü¿ îüH/// Specifies that the field is accessible by all types in its assembly.¿ î¨¿ îµl¿ ï¿ ïT/// Specifies that the field is accessible only by its type and derived
/// classes.¿ ï¿ ï$¿ ïé¿ ïéc/// Specifies that the field is accessible by derived classes and by all types
/// in its assembly.¿ ïù¿ ï¶r¿ ñ¿ ñZ/// Specifies that the field is accessible by all types with visibility of
/// this scope.¿ ñ¿ ñp¿ ñz¿ ñzX/// Specifies that the field is a member of its type rather than an instance
/// member.¿ ñÖ¿ ñéa¿ ñ‹¿ ñ‹G/// Specifies that the field cannot be changed after it is initialized.¿ ñÈ¿ ñÚW¿ ó7¿ ó7>/// Specifies that the field value is a compile-time constant.¿ óC¿ óLg¿ óõ¿ óõH/// Specifies that the field is not serialized when its type is remoted.¿ ó≠¿ ó∂f¿ ò¿ òI/// Specifies that the field is special, and that its name describes how.¿ ò¿ òf¿ òo¿ òoI/// Specifies that the field implementation is forwarded through PInvoke.¿ ò¿ òà[¿ òÃ¿ òÃ=/// Reserved for internal use by the common language runtime.¿ ò›¿ òÊÄè¿ ô]¿ ô]p/// Specifies that the common language runtime metadata internal APIs should
/// check the encoding of the name.¿ ôo¿ ôx^¿ ôº¿ ôº=/// Specifies that the field contains marshaling information.¿ ô–¿ ôŸM¿ ö¿ ö1/// Specifies that the field has a default value.¿ ö ¿ ö)Y¿ öl¿ öl</// Specifies that the field has a relative virtual address.¿ ö|¿ öÖy¿ öÁ¿ öÁ[/// Parameter variance applies only to generic parameters for interfaces and
/// delegates.¿ ö¯¿ õB¿ õ.¿ õ.&/// Indicates the absence of variance.¿ õ=¿ õF4¿ õf¿ õf/// Indicates covariance.¿ õt¿ õ}<¿ õ°¿ õ°/// Indicates contravariance.¿ õ≥¿ õº_¿ õ˚¿ õ˚8/// Special constraints can apply to any Type parameter.¿ ú¿ úd¿ úd¿ úd?/// Indicates that no constraint applies to the Type parameter.¿ ú|¿ úÖh¿ úÀ¿ úÀ?/// Indicates that the Type parameter must be a reference type.¿ úÁ¿ úÄã¿ ùR¿ ùR[/// Indicates that the Type parameter must be a value type that cannot be a
/// null value.¿ ùu¿ ù~Äò¿ ùÔ¿ ùÔj/// Indicates that the Type parameter must have a default public constructor
/// that takes no parameters.¿ û¿ û>¿ û<¿ û</// Specifies member access.¿ ûQ¿ ûZQ¿ ûî¿ ûî3/// Specifies that the member cannot be referenced.¿ û•¿ ûÆ]¿ û˘¿ û˘D/// Specifies that the member is accessible only by the parent type.¿ ü¿ ük¿ üc¿ ücN/// Specifies that the member is accessible by subtypes only in this assembly.¿ üs¿ ü|]¿ ü…¿ ü…F/// Specifies that the member is accessibly by anyone in the assembly.¿ ü”¿ ü‹^¿ †)¿ †)F/// Specifies that the member is accessible only by type and subtypes.¿ †4¿ †=ÄÇ¿ †™¿ †™f/// Specifies that the member is accessible by derived classes and by other
/// types in its assembly.¿ †π¿ †¬n¿ °¿ °V/// Specifies that the member is accessible by all types with access to the
/// scope.¿ °*¿ °3ÄÄ¿ °¢¿ °¢h/// Specifies that the member is defined as part of the type rather than as a
/// member of an instance.¿ °≠¿ °∂J¿ °¿ °3/// Specifies that the method cannot be overridden.¿ °˙¿ ¢I¿ ¢:¿ ¢:0/// Specifies that the method can be overridden.¿ ¢F¿ ¢Os¿ ¢Æ¿ ¢ÆX/// Specifies that the method hides by name and signature, rather than just by
/// name.¿ ¢º¿ ¢≈E¿ ¢Ô¿ ¢Ô#/// Specifies virtual table layout.¿ £¿ £ÄÑ¿ £}¿ £}i/// Specifies that the slot used for this method in the virtual table be
/// reused. This is the default.¿ £ã¿ £îc¿ £Â¿ £ÂJ/// Specifies that the method always gets a new slot in the virtual table.¿ £Ò¿ £˙ÄÑ¿ §^¿ §^]/// Specifies that the method can be overridden by the same types to which it
/// is visible.¿ §x¿ §ÅK¿ §π¿ §π1/// Specifies that the method is not implemented.¿ §∆¿ §œg¿ • ¿ • J/// Specifies that the method is special, and that its name describes how.¿ •0¿ •9e¿ •à¿ •àH/// Specifies that the method implementation is forwarded using PInvoke.¿ •ò¿ •°n¿ •ı¿ •ıM/// Specifies that the method is a managed method exported to unmanaged code.¿ ¶	¿ ¶[¿ ¶V¿ ¶V=/// Reserved for internal use by the common language runtime.¿ ¶g¿ ¶p¿ ¶◊¿ ¶◊`/// Specifies that the common language runtime should check the encoding of
/// the method name.¿ ¶È¿ ¶Ú[¿ ß7¿ ß7>/// Specifies that the method has security associated with it.¿ ßG¿ ßPn¿ ß£¿ ß£L/// Specifies that the method calls another method containing security code.¿ ß∏¿ ß¡@¿ ßÍ¿ ßÍ"/// Flags that describe code type.¿ ß˚¿ ®o¿ ®f¿ ®f[/// Specifies that the method implementation is Microsoft intermediate
/// language (MSIL).¿ ®m¿ ®vO¿ ®¥¿ ®¥7/// Specifies that the method implementation is native.¿ ®ø¿ ®»M¿ ©¿ ©6/// Specifies that the method implementation is OPTIL.¿ ©¿ ©u¿ ©{¿ ©{\/// Specifies that the method implementation is provided by the common
/// language runtime.¿ ©á¿ ©ê^¿ ©ÿ¿ ©ÿA/// Flags that indicate whether the code is managed or unmanaged.¿ ©Ë¿ ©ÒU¿ ™2¿ ™2:/// Specifies that the method implementation is unmanaged.¿ ™@¿ ™IQ¿ ™à¿ ™à8/// Specifies that the method implementation is managed.¿ ™î¿ ™ùy¿ ´¿ ´]/// Specifies that the method is defined. This flag is used primarily in merge
/// scenarios.¿ ´¿ ´u¿ ´x¿ ´xX/// Specifies that the method signature cannot be mangled for an HRESULT
/// conversion.¿ ´à¿ ´ë[¿ ´’¿ ´’=/// Reserved for internal use by the common language runtime.¿ ´Ê¿ ´Ô`¿ ¨8¿ ¨8B/// Specifies that the method is single-threaded through its body.¿ ¨I¿ ¨RL¿ ¨â¿ ¨â0/// Specifies that the method cannot be inlined.¿ ¨ò¿ ¨°`¿ ¨‰¿ ¨‰</// Specifies that the method should be inlined if possible.¿ ¨˚¿ ≠V¿ ≠A¿ ≠A6/// Specifies that the method should not be optimized.¿ ≠T¿ ≠]T¿ ≠ñ¿ ≠ñ2/// The maximum valid value for a [CorMethodImpl].¿ ≠´¿ ≠¥¿ ≠∫¿ ≠∫ ¿ ≠Ã¿ ≠—¿ ≠◊¿ ≠◊ ¿ ≠Í¿ ≠Ô¿ ≠ı¿ ≠ı ¿ Æ¿ Æ¿ Æ¿ Æ ¿ Æ'¿ Æ,¿ Æ2¿ Æ2 ¿ ÆC¿ ÆH¿ ÆN¿ ÆN ¿ Æ_¿ Æd¿ Æj¿ Æj ¿ Æ{¿ ÆÄ¿ ÆÜ¿ ÆÜ ¿ Æó¿ Æú¿ Æ¢¿ Æ¢ ¿ Æ≥¿ Æ∏¿ Ææ¿ Ææ ¿ Æœ¿ Æ‘¿ Æ⁄¿ Æ⁄ ¿ ÆÎ¿ Æ¿ Æˆ¿ Æˆ ¿ Ø¿ Ø¿ Ø¿ Ø ¿ Ø#¿ Ø(¿ Ø.¿ Ø. ¿ ØD¿ ØI¿ ØO¿ ØO ¿ Øe¿ Øj ¿ Øp¿ Øp ¿ Øá¿ Øå¿ Øí¿ Øí ¿ Ø§¿ Ø™ ¿ Ø∞¿ Ø∞ ¿ Ø∆¿ ØÃ¿ Ø“¿ Ø“ ¿ ØÂ¿ ØÎ¿ ØÒ¿ ØÒ ¿ ∞¿ ∞
¿ ∞¿ ∞ ¿ ∞$¿ ∞*¿ ∞0¿ ∞0 ¿ ∞E¿ ∞K¿ ∞Q¿ ∞Q ¿ ∞f¿ ∞l'¿ ∞r¿ ∞r ¿ ∞è¿ ∞ï"¿ ∞õ¿ ∞õ ¿ ∞≥¿ ∞π!¿ ∞ø¿ ∞ø ¿ ∞÷¿ ∞‹"¿ ∞‚¿ ∞‚ ¿ ∞˙¿ ± ¿ ±¿ ± ¿ ±¿ ±!¿ ±'¿ ±' ¿ ±:¿ ±@"¿ ±F¿ ±F ¿ ±^¿ ±d#¿ ±j¿ ±j ¿ ±É¿ ±â¿ ±è¿ ±è ¿ ±°¿ ±ß¿ ±≠¿ ±≠ ¿ ±¿¿ ±∆%¿ ±Ã¿ ±Ã ¿ ±Á¿ ±Ì!¿ ±Û¿ ±Û ¿ ≤
¿ ≤!¿ ≤¿ ≤ ¿ ≤-¿ ≤3¿ ≤9¿ ≤9 ¿ ≤M¿ ≤S$¿ ≤Y¿ ≤Y ¿ ≤s¿ ≤y¿ ≤¿ ≤ ¿ ≤í¿ ≤ò¿ ≤û¿ ≤û ¿ ≤≤¿ ≤∏¿ ≤æ¿ ≤æ ¿ ≤“¿ ≤ÿ!¿ ≤ﬁ¿ ≤ﬁ ¿ ≤ı¿ ≤˚(¿ ≥¿ ≥ ¿ ≥¿ ≥%%¿ ≥+¿ ≥+ ¿ ≥F¿ ≥L ¿ ≥R¿ ≥R ¿ ≥h¿ ≥n¿ ≥t¿ ≥t ¿ ≥à¿ ≥é¿ ≥î¿ ≥î ¿ ≥¶¿ ≥≠T¿ ≥Ù¿ ≥Ù@/// Specifies that the parameter is passed into the method call.¿ ≥˚¿ ¥W¿ ¥M¿ ¥MB/// Specifies that the parameter is passed from the method return.¿ ¥U¿ ¥^G¿ ¥í¿ ¥í-/// Specifies that the parameter is optional.¿ ¥ü¿ ¥®[¿ ¥Ï¿ ¥Ï=/// Reserved for internal use by the common language runtime.¿ ¥˝¿ µQ¿ µB¿ µB5/// Specifies that the parameter has a default value.¿ µQ¿ µZ]¿ µù¿ µù</// Specifies that the parameter has marshaling information.¿ µ±¿ µ∫#¿ µÃ¿ µÃ/// Unused.¿ µ◊¿ µ‡B¿ ∂¿ ∂)/// Indicates that this is not a PE file.¿ ∂¿ ∂%W¿ ∂g¿ ∂g;/// Indicates that this PE file contains only managed code.¿ ∂r¿ ∂U¿ ∂∏¿ ∂∏2/// Indicates that this PE file makes Win32 calls.¿ ∂ ¿ ∂◊V¿ ∑¿ ∑:/// Indicates that this PE file runs on a 64-bit platform.¿ ∑#¿ ∑0P¿ ∑f¿ ∑f//// Indicates that this PE file is native code.¿ ∑v¿ ∑ÉÄç¿ ∑Û¿ ∑Ûi/// Indicates that this PE file is platform-neutral and prefers to be loaded
/// in a 32-bit environment.¿ ∏¿ ∏@¿ ∏@¿ ∏@&/// Use each member name as specified.¿ ∏M¿ ∏V*¿ ∏j¿ ∏j/// Reserved.¿ ∏z¿ ∏É-¿ ∏ó¿ ∏ó/// Reserved.¿ ∏™¿ ∏≥T¿ ∏Ò¿ ∏Ò7/// Marshal strings as multiple-byte character strings.¿ π¿ π
Q¿ πB¿ πB1/// Marshal strings as Unicode 2-byte characters.¿ πU¿ π^Å¿ ∫W¿ ∫WÄÚ/// Automatically marshal strings appropriately for the target operating
/// system. The default is Unicode on Windows NT, Windows 2000, Windows XP,
/// and the Windows Server 2003 family; the default is ANSI on Windows 98 and
/// Windows Me.¿ ∫g¿ ∫p.¿ ∫Ñ¿ ∫Ñ/// Reserved.¿ ∫ò¿ ∫°Ää¿ ª¿ ªj/// Perform best-fit mapping of Unicode characters that lack an exact match in
/// the ANSI character set.¿ ª%¿ ª.Ä¢¿ ª∂¿ ª∂ÄÖ/// Do not perform best-fit mapping of Unicode characters. In this case, all
/// unmappable characters will be replaced by a ‚Äò?‚Äô.¿ ª ¿ ª”*¿ ªÁ¿ ªÁ/// Reserved.¿ ª˜¿ º <¿ º¿ º/// Reserved.¿ º6¿ º?Äá¿ ºü¿ ºüY/// Throw an exception when the interop marshaler encounters an unmappable
/// character.¿ º¿¿ º…Äè¿ Ω0¿ Ω0`/// Do not throw an exception when the interop marshaler encounters an
/// unmappable character.¿ ΩR¿ Ω[8¿ Ωo¿ Ωo/// Reserved.¿ Ωç¿ ΩñÄê¿ æ
¿ æ
m/// Allow the callee to call the Win32 SetLastError function before returning
/// from the attributed method.¿ æ ¿ æ)+¿ æ=¿ æ=/// Reserved.¿ æN¿ æWÄß¿ æÂ¿ æÂÄá/// Use the default platform calling convention. For example, on Windows the
/// default is StdCall and on Windows CE .NET it is Cdecl.¿ æ¯¿ øÄÂ¿ øŒ¿ øŒÄ∆/// Use the Cdecl calling convention. In this case, the caller cleans the
/// stack. This enables calling functions with varargs (that is, functions
/// that accept a variable number of parameters).¿ ø‡¿ øÈÄ–¿ ¿ü¿ ¿üÄØ/// Use the StdCall calling convention. In this case, the callee cleans the
/// stack. This is the default convention for calling unmanaged functions with
/// platform invoke.¿ ¿≥¿ ¿ºÅ8¿ ¡Ÿ¿ ¡ŸÅ/// Use the ThisCall calling convention. In this case, the first parameter is
/// the this pointer and is stored in register ECX. Other parameters are
/// pushed on the stack. The ThisCall calling convention is used to call
/// methods on classes exported from an unmanaged DLL.¿ ¡Ó¿ ¡˜/¿ ¬¿ ¬/// Reserved.¿ ¬ ¿ ¬)'¿ ¬=¿ ¬=/// Reserved.¿ ¬J¿ ¬Si¿ ¬¶¿ ¬¶L/// Specifies that the property is special, and that its name describes how.¿ ¬∂¿ ¬ø[¿ √¿ √=/// Reserved for internal use by the common language runtime.¿ √¿ √Äò¿ √ù¿ √ùy/// Specifies that the common language runtime metadata internal APIs should
/// check the encoding of the property name.¿ √Ø¿ √∏P¿ √Û¿ √Û4/// Specifies that the property has a default value.¿ ƒ¿ ƒ#¿ ƒ¿ ƒ/// Unused.¿ ƒ(¿ ƒ1¿ ƒ7¿ ƒ7 ¿ ƒC¿ ƒO¿ ƒU¿ ƒU ¿ ƒb¿ ƒn¿ ƒt¿ ƒt ¿ ƒÅ¿ ƒç¿ ƒì¿ ƒì ¿ ƒ°¿ ƒ≠¿ ƒ≥¿ ƒ≥ ¿ ƒ¬¿ ƒŒ¿ ƒ‘¿ ƒ‘ ¿ ƒ‚¿ ƒÓ#¿ ƒÙ¿ ƒÙ ¿ ≈¿ ≈¿ ≈¿ ≈ ¿ ≈(¿ ≈4%¿ ≈:¿ ≈: ¿ ≈O¿ ≈[ ¿ ≈a¿ ≈a ¿ ≈q¿ ≈}¿ ≈É¿ ≈É ¿ ≈í¿ ≈û¿ ≈§¿ ≈§ ¿ ≈Ø¿ ≈ª¿ ≈¡¿ ≈¡ ¿ ≈œ¿ ≈€¿ ≈·¿ ≈· ¿ ≈¿ ≈¸¿ ∆¿ ∆ ¿ ∆¿ ∆¿ ∆"¿ ∆" ¿ ∆0¿ ∆<!¿ ∆B¿ ∆B ¿ ∆S¿ ∆_¿ ∆e¿ ∆e ¿ ∆o¿ ∆{"¿ ∆Å¿ ∆Å ¿ ∆ì¿ ∆ü&¿ ∆•¿ ∆• ¿ ∆ª¿ ∆«"¿ ∆Õ¿ ∆Õ ¿ ∆ﬂ¿ ∆Î ¿ ∆Ò¿ ∆Ò ¿ «¿ «,¿ «¿ « ¿ «/¿ «;¿ «A¿ «A ¿ «M¿ «Y¿ «_¿ «_ ¿ «i¿ «u¿ «{¿ «{ ¿ «â¿ «ñM¿ «∆¿ «∆)/// Used for type visibility information.¿ «Ÿ¿ «ÊR¿ » ¿ » 3/// Specifies that the type is not in public scope.¿ ».¿ »;K¿ »q¿ »q//// Specifies that the type is in public scope.¿ »|¿ »â_¿ »Õ¿ »Õ=/// Specifies that the type is nested with public visibility.¿ »ﬁ¿ »Îa¿ …0¿ …0>/// Specifies that the type is nested with private visibility.¿ …B¿ …O_¿ …ì¿ …ì=/// Specifies that the type is nested with family visibility.¿ …§¿ …±c¿ …˜¿ …˜?/// Specifies that the type is nested with assembly visibility.¿  
¿  q¿  h¿  hJ/// Specifies that the type is nested with family and assembly visibility.¿  ~¿  ão¿  €¿  €I/// Specifies that the type is nested with family or assembly visibility.¿  ¿  ˝I¿ À-¿ À-)/// Gets layout information for the type.¿ À<¿ ÀIf¿ Àñ¿ ÀñF/// Specifies that the fields of this type are laid out automatically.¿ À•¿ À≤k¿ À˛¿ À˛E/// Specifies that the fields of this type are laid out sequentially.¿ Ã¿ Ã [¿ Ã^¿ Ã^7/// Specifies that field layout is supplied explicitly.¿ Ãq¿ Ã~U¿ Ã≤¿ Ã≤-/// Gets semantic information about the type.¿ Ã…¿ Ã÷B¿ Õ¿ Õ'/// Specifies that the type is a class.¿ Õ¿ ÕK¿ ÕN¿ ÕN,/// Specifies that the type is an interface.¿ Õ\¿ ÕiF¿ Õò¿ Õò(/// Specifies that the type is abstract.¿ Õ•¿ Õ≤K¿ ÕË¿ ÕË//// Specifies that the type cannot be extended.¿ ÕÛ¿ Œ f¿ ŒL¿ ŒLE/// Specifies that the class name is special. Its name describes how.¿ Œ\¿ ŒiD¿ Œò¿ Œò(/// Specifies that the type is imported.¿ Œ£¿ Œ∞N¿ Œ„¿ Œ„,/// Specifies that the type is serializable.¿ ŒÙ¿ œ[¿ œ?¿ œ?7/// Specifies that this type is a Windows Runtime type.¿ œR¿ œ_g¿ œß¿ œßA/// Gets information about how strings are encoded and formatted.¿ œº¿ œ…Y¿ –
¿ –
:/// Specifies that this type interprets an LPTSTR as ANSI.¿ –¿ –%_¿ –i¿ –i=/// Specifies that this type interprets an LPTSTR as Unicode.¿ –z¿ –á_¿ –Œ¿ –Œ@/// Specifies that this type interprets an LPTSTR automatically.¿ –‹¿ –ÈÄÖ¿ —N¿ —N^/// Specifies that the type has a non-standard encoding, as specified by
/// CustomFormatMask.¿ —d¿ —qÄ¥¿ “¿ “Äé/// Use this mask to get non-standard encoding information for native interop.
/// The meaning of the values of these two bits is unspecified.¿ “¿ “(Äã¿ “ï¿ “ïf/// Specifies that the type must be initialized before the first attempt to
/// access a static field.¿ “©¿ “∂]¿ “˚¿ “˚>/// Specifies that the type is exported, and a type forwarder.¿ ”	¿ ”{¿ ”v¿ ”vY/// This flag and the flags below are used internally by the common language
/// runtime.¿ ”á¿ ”îq¿ ”È¿ ”ÈN/// Specifies that the common language runtime should check the name encoding.¿ ”˚¿ ‘]¿ ‘K¿ ‘K</// Specifies that the type has security associated with it.¿ ‘[  ÜN /0UÄ¢Ä£ÄÒÅ Å7ÅNÅ|Å£Å§Å∑ÅÊÇÇÇ%ÇWÇÇÇÉÇõÇ ÇÚÇÛÉÉ?ÉeÉfÉàÉµÉ€É‹É˚Ñ(ÑNÑOÑqÑûÑƒÑ≈Ñ‰ÖÖ7Ö8ÖZÖáÖ≠ÖÆÖÕÖ˙Ü Ü!ÜCÜpÜñÜóÜ∂Ü„á	á
á*áWá}á~áöáÀáıáˆààCàjàkàåàºàÊàÁââ8âfâgâÑâ¥âﬁâﬂää3ä[ä\äãäªäÂäÊããEãuãvãèãƒãÛãÙåå@åfågåëåΩå„å‰çç3ç]ç^çzç´ç÷ç◊ééKéwéxéüéŒé˜é¯èèRèÄèÅèßè⁄êêêêRêêÄêóê≈êÌêÓëë8ëeëfë≤ëƒë˜í<í=íTíÖí»í íÀìììhììì∫ìªì˚î'îOîPîûî¥î·ï
ïïïGï\ïáï∂ï·ï‚ññCñkñlñ≤ñŸñ¸ñ˝óNóyó†ó°óÏòò8ò9òÉòíò∏ò⁄ò€ô,ôCômôìôîô·ôÛöö;ö<öãöôöøö·ö‚õ,õTõxõyõ∫õ·úúúPú}ú¶úßúÛùùEùFùíùΩù‰ùÂû%ûQûyûzû…ûÔüüEüFüÜüµü‡ü·††?†e†f†•†–†˜†˘†˙°C°_°Æ°ø°Î¢¢¢=¢g¢ç¢é¢™¢”¢¯¢˘££F£o£p£´£‡§§§T§á§∂§∑§˘•0•c•d•≤•ƒ¶¶<¶=¶å¶¨¶Ëß ß"ß#ß_ßußîßƒßßÒ®'®S®{®|®√®Í©©©_©ä©±©≤©˚™ ™A™B™ã™±™”™‘´"´?´i´è´ê´ﬁ´Î¨¨3¨4¨Ñ¨°¨«¨È¨Í≠ ≠E≠f≠g≠ö≠¡≠‰≠ÂÆ6ÆBÆkÆêÆëÆ∑ÆÁØØØ_ØÇØ´Ø–Ø—∞∞E∞h∞i∞π∞À± ±1±2±f±é±≤±≥≤ ≤+≤R≤S≤û≤…≤≤Ò≥A≥p≥õ≥ú≥‹¥¥0¥1¥¥ñ¥√¥Ï¥Ìµ.µYµÄµÅµ–∂ ∂,∂.∂/∂q∂á∂¨∂ÿ∑ ∑∑J∑a∑É∑°∑¢∑‹∏∏$∏%∏^∏É∏§∏•∏Óππ-πPπQπïπ¿πÁπË∫%∫N∫s∫t∫Ø∫÷∫˘∫˙ªKª\ªÜª¨ª≠ª¯º
º5º\º]ºùº…ºÒºÚΩ7ΩcΩãΩåΩøΩÈæææOæÅæØæ∞æÈøøAøBøwøßø”ø’ø÷¿ @¿ @&¿ @S¿ @y¿ @ß¿ @Œ¿ @ˇ¿ A)¿ AU¿ Az¿ A¶¿ AÀ¿ A˜¿ B¿ BH¿ Bm¿ Bô¿ Bæ¿ BÍ¿ C¿ C;¿ C`¿ Cå¿ C±¿ C›¿ D¿ D.¿ DS¿ DÑ¿ DÆ¿ Dﬂ¿ E	¿ E;¿ Ef¿ Eì¿ E∫¿ EÎ¿ F¿ FD¿ Fl¿ Fö¿ F¬¿ FÒ¿ G¿ GJ¿ Gt¿ G§¿ GŒ¿ H¿ H8¿ Hk¿ Hò¿ H ¿ Hˆ¿ I)¿ IV¿ IÜ¿ I∞¿ Iﬁ¿ J¿ J9¿ Jf¿ Jö¿ J»¿ Jı¿ K¿ KJ¿ Kr¿ K®¿ Kÿ¿ L
¿ L6¿ Lh¿ Lî¿ L√¿ LÏ¿ M!¿ MP¿ M~¿ M¶¿ M’¿ M˛¿ N-¿ NV¿ Nà¿ N¥¿ NÌ¿ O ¿ OV¿ OÜ¿ O∑¿ O‚¿ P¿ P:¿ Pg¿ Pé¿ Pê¿ Pë¿ P◊¿ PÏ¿ Q/¿ QQ¿ Qo¿ Qp¿ Qµ¿ Qÿ¿ Q˜¿ Q¯¿ R(¿ RP¿ Rt¿ Ru¿ Rµ¿ R·¿ S	¿ S
¿ SB¿ Sl¿ Sí¿ Sì¿ S“¿ T¿ T,¿ T-¿ T;¿ Ta¿ TÉ¿ TÖ¿ TÜ¿ T…¿ T€¿ U¿ U*¿ UM¿ UN¿ Uå¿ U≤¿ Uÿ¿ UŸ¿ V¿ V;¿ Vh¿ Vi¿ V¶¿ VÃ¿ VÚ¿ VÛ¿ W%¿ WP¿ W{¿ W|¿ WÀ¿ WÍ¿ X¿ XF¿ XH¿ XI¿ Xs¿ Xâ¿ X≤¿ X⁄¿ X˛¿ Xˇ¿ Y¿ Y:¿ Ya¿ Yb¿ Yr¿ Y†¿ Y ¿ YÀ¿ Z¿ Z0¿ ZW¿ ZX¿ Zå¿ Z∫¿ Z‰¿ ZÂ¿ [0¿ [~¿ [Œ¿ [‡¿ \¿ \2¿ \3¿ \C¿ \r¿ \ù¿ \û¿ \Ô¿ ]¿ ];¿ ]e¿ ]f¿ ]µ¿ ]Ï¿ ^¿ ^F¿ ^G¿ ^W¿ ^Ç¿ ^©¿ ^™¿ ^∫¿ ^˜¿ _0¿ _1¿ _~¿ _è¿ _À¿ `¿ `¿ `M¿ `i¿ `¶¿ `ﬂ¿ `‡¿ `¿ a)¿ a^¿ a_¿ aØ¿ a—¿ b¿ b/¿ b0¿ b@¿ bl¿ bî¿ bï¿ b‰¿ c!¿ cO¿ cy¿ cz¿ c∆¿ d¿ dG¿ dt¿ dù¿ dû¿ dÏ¿ e=¿ eT¿ eÉ¿ eÆ¿ eØ¿ eˇ¿ fJ¿ fï¿ fŒ¿ f˛¿ g*¿ g+¿ g;¿ gk¿ gó¿ gò¿ g®¿ g–¿ gÙ¿ gˆ¿ g˜¿ h5¿ hM¿ hú¿ h«¿ hÓ¿ hÔ¿ i/¿ i[¿ iÉ¿ iÑ¿ i”¿ j¿ j/¿ jX¿ jY¿ jê¿ j∫¿ j‡¿ j·¿ jÔ¿ k¿ k7¿ k9¿ k:¿ kf¿ k{¿ k¢¿ k…¿ kÒ¿ l¿ lA¿ li¿ lí¿ lª¿ lÂ¿ m¿ m8¿ ma¿ mè¿ mΩ¿ mÁ¿ n¿ nA¿ nq¿ nú¿ n«¿ nÒ¿ o¿ oA¿ og¿ oê¿ oπ¿ o„¿ p¿ p6¿ p_¿ pà¿ p±¿ p›¿ q	¿ q.¿ qS¿ qÄ¿ q≠¿ qﬁ¿ r¿ r<¿ ri¿ rî¿ rø¿ rˆ¿ s-¿ sT¿ s{¿ s†¿ s≈¿ sÓ¿ t¿ t¿ t¿ tK¿ t_¿ tã¿ tπ¿ tÁ¿ tË¿ u¿ uG¿ up¿ uq¿ u£¿ u…¿ uÔ¿ u¿ v0¿ v\¿ và¿ vâ¿ v ¿ v˜¿ w$¿ w%¿ we¿ wë¿ wΩ¿ wæ¿ x ¿ x.¿ x\¿ x]¿ x™¿ x€¿ y¿ y¿ yY¿ yâ¿ yπ¿ y∫¿ yÊ¿ z¿ z:¿ z;¿ zÑ¿ zÆ¿ zÿ¿ zŸ¿ {!¿ {Q¿ {Å¿ {Ç¿ {º¿ {Í¿ |¿ |¿ |I¿ |{¿ |≠¿ |Æ¿ |ÿ¿ |˝¿ }"¿ }#¿ }R¿ }{¿ }§¿ }•¿ }–¿ }¯¿ ~ ¿ ~!¿ ~S¿ ~y¿ ~ü¿ ~†¿ ~Ë¿ ¿ >¿ ?¿ j¿ ê¿ ∂¿ ∑¿ Ê¿ Ä¿ Ä>¿ Ä?¿ Äy¿ Äß¿ Ä’¿ Ä÷¿ Å¿ ÅJ¿ Åz¿ Å{¿ Å∏¿ Å·¿ Ç
¿ Ç¿ ÇK¿ Çw¿ Ç£¿ Ç§¿ ÇÁ¿ É¿ É9¿ É:¿ ÉÖ¿ Éù¿ ÉŒ¿ Éˇ¿ Ñ ¿ ÑQ¿ Ñì¿ Ñ√¿ ÑÛ¿ ÑÙ¿ ÖB¿ Ö_¿ Öé¿ ÖΩ¿ Öæ¿ Öˇ¿ Ü(¿ ÜQ¿ ÜR¿ Ü°¿ Ü∞¿ Ü‹¿ á¿ á	¿ áZ¿ áá¿ á¥¿ áµ¿ áÙ¿ à¿ àJ¿ àL¿ àM¿ àb¿ àÄ¿ àÅ¿ àí¿ à±¿ à≤¿ à∆¿ àË¿ àÈ¿ àˇ¿ â¿ â¿ â<¿ âY¿ âZ¿ âz¿ âó¿ âò¿ âµ¿ â“¿ â”¿ âÛ¿ ä¿ ä¿ ä.¿ äK¿ äL¿ äl¿ äâ¿ ää¿ äß¿ äƒ¿ ä≈¿ äÂ¿ ã¿ ã¿ ã ¿ ã=¿ ã>¿ ã\¿ ãy¿ ãz¿ ãî¿ ãµ¿ ã∂¿ ã”¿ ãÒ¿ ãÚ¿ å¿ å2¿ å3¿ åN¿ ås¿ åt¿ åè¿ å∞¿ å±¿ å’¿ åÙ¿ åı¿ ç"¿ çC¿ çD¿ çk¿ çí¿ çì¿ ç™¿ ç–¿ ç—¿ çÔ¿ é¿ é¿ é5¿ éR¿ éS¿ ép¿ éë¿ éí¿ é¨¿ éŒ¿ éœ¿ è¿ è2¿ è3¿ èX¿ èx¿ èy¿ èù¿ è¬¿ è√¿ èÁ¿ ê¿ ê¿ ê!¿ êE¿ êF¿ ê[¿ êz¿ ê{¿ êê¿ ê¥¿ êµ¿ êˇ¿ ë¿ ëK¿ ëL¿ ëa¿ ëõ¿ ëú¿ ëÊ¿ í¿ í¿ íC¿ íb¿ íc¿ íØ¿ í√¿ í„¿ í‰¿ ì¿ ì/¿ ì0¿ ìc¿ ìÇ¿ ìÉ¿ ì«¿ ì·¿ ì‚¿ î1¿ îO¿ îP¿ îô¿ î¥¿ îµ¿ î˝¿ ï
¿ ï#¿ ï$¿ ïs¿ ïà¿ ï•¿ ï¶¿ ïÒ¿ ñ¿ ñ¿ ñ¿ ñh¿ ñt¿ ñç¿ ñé¿ ñ÷¿ ñÒ¿ ñÚ¿ ó1¿ óK¿ óL¿ óï¿ óµ¿ ó∂¿ ò ¿ ò¿ ò¿ òi¿ òá¿ òà¿ ò∆¿ òÂ¿ òÊ¿ ô3¿ ôW¿ ôw¿ ôx¿ ô∂¿ ôÿ¿ ôŸ¿ ö¿ ö(¿ ö)¿ öf¿ öÑ¿ öÖ¿ ö“¿ ö·¿ õ ¿ õ¿ õ(¿ õE¿ õF¿ õ`¿ õ|¿ õ}¿ õõ¿ õª¿ õº¿ õı¿ ú¿ ú¿ ú^¿ úÑ¿ úÖ¿ ú≈¿ úÔ¿ ú¿ ù<¿ ùL¿ ù}¿ ù~¿ ùÀ¿ ùÈ¿ û¿ û¿ û6¿ ûY¿ ûZ¿ ûé¿ û≠¿ ûÆ¿ ûÛ¿ ü¿ ü¿ ü]¿ ü{¿ ü|¿ ü√¿ ü€¿ ü‹¿ †#¿ †<¿ †=¿ †â¿ †§¿ †¡¿ †¬¿ °¿ °¿ °2¿ °3¿ °Å¿ °ú¿ °µ¿ °∂¿ °Í¿ ¢¿ ¢¿ ¢4¿ ¢N¿ ¢O¿ ¢û¿ ¢®¿ ¢ƒ¿ ¢≈¿ ¢È¿ £¿ £¿ £V¿ £w¿ £ì¿ £î¿ £ﬂ¿ £˘¿ £˙¿ §H¿ §X¿ §Ä¿ §Å¿ §≥¿ §Œ¿ §œ¿ •¿ •8¿ •9¿ •Ç¿ •†¿ •°¿ •Ô¿ ¶¿ ¶¿ ¶P¿ ¶o¿ ¶p¿ ¶º¿ ¶—¿ ¶Ò¿ ¶Ú¿ ß1¿ ßO¿ ßP¿ ßù¿ ß¿¿ ß¡¿ ß‰¿ ®¿ ®¿ ®K¿ ®`¿ ®u¿ ®v¿ ®Æ¿ ®«¿ ®»¿ ®ˇ¿ ©¿ ©¿ ©_¿ ©u¿ ©è¿ ©ê¿ ©“¿ ©¿ ©Ò¿ ™,¿ ™H¿ ™I¿ ™Ç¿ ™ú¿ ™ù¿ ™Ï¿ ™˚¿ ´¿ ´¿ ´b¿ ´r¿ ´ê¿ ´ë¿ ´œ¿ ´Ó¿ ´Ô¿ ¨2¿ ¨Q¿ ¨R¿ ¨É¿ ¨†¿ ¨°¿ ¨ﬁ¿ ≠¿ ≠¿ ≠;¿ ≠\¿ ≠]¿ ≠ê¿ ≠≥¿ ≠¥¿ ≠—¿ ≠Ô¿ Æ¿ Æ,¿ ÆH¿ Æd¿ ÆÄ¿ Æú¿ Æ∏¿ Æ‘¿ Æ¿ Ø¿ Ø(¿ ØI¿ Øj¿ Øå¿ Ø™¿ ØÃ¿ ØÎ¿ ∞
¿ ∞*¿ ∞K¿ ∞l¿ ∞ï¿ ∞π¿ ∞‹¿ ± ¿ ±!¿ ±@¿ ±d¿ ±â¿ ±ß¿ ±∆¿ ±Ì¿ ≤¿ ≤3¿ ≤S¿ ≤y¿ ≤ò¿ ≤∏¿ ≤ÿ¿ ≤˚¿ ≥%¿ ≥L¿ ≥n¿ ≥é¿ ≥¨¿ ≥≠¿ ≥Ó¿ ¥¿ ¥¿ ¥G¿ ¥]¿ ¥^¿ ¥å¿ ¥ß¿ ¥®¿ ¥Ê¿ µ¿ µ¿ µ<¿ µY¿ µZ¿ µó¿ µπ¿ µ∫¿ µ∆¿ µﬂ¿ µ‡¿ ∂
¿ ∂$¿ ∂%¿ ∂a¿ ∂~¿ ∂¿ ∂≤¿ ∂÷¿ ∂◊¿ ∑¿ ∑/¿ ∑0¿ ∑`¿ ∑Ç¿ ∑É¿ ∑–¿ ∑Ì¿ ∏¿ ∏¿ ∏:¿ ∏U¿ ∏V¿ ∏d¿ ∏Ç¿ ∏É¿ ∏ë¿ ∏≤¿ ∏≥¿ ∏Î¿ π	¿ π
¿ π<¿ π]¿ π^¿ πß¿ πÛ¿ ∫A¿ ∫Q¿ ∫o¿ ∫p¿ ∫~¿ ∫†¿ ∫°¿ ∫¿ ª¿ ª-¿ ª.¿ ª{¿ ª∞¿ ª“¿ ª”¿ ª·¿ ªˇ¿ º ¿ º¿ º>¿ º?¿ ºä¿ ºô¿ º»¿ º…¿ Ω¿ Ω*¿ ΩZ¿ Ω[¿ Ωi¿ Ωï¿ Ωñ¿ Ω‰¿ æ¿ æ(¿ æ)¿ æ7¿ æV¿ æW¿ æ§¿ æﬂ¿ ø ¿ ø¿ øK¿ øñ¿ ø»¿ øË¿ øÈ¿ ¿5¿ ¿Ñ¿ ¿ô¿ ¿ª¿ ¿º¿ ¡
¿ ¡S¿ ¡ú¿ ¡”¿ ¡ˆ¿ ¡˜¿ ¬¿ ¬(¿ ¬)¿ ¬7¿ ¬R¿ ¬S¿ ¬†¿ ¬æ¿ ¬ø¿ ¬˝¿ √¿ √¿ √j¿ √ó¿ √∑¿ √∏¿ √Ì¿ ƒ
¿ ƒ¿ ƒ¿ ƒ0¿ ƒ1¿ ƒO¿ ƒn¿ ƒç¿ ƒ≠¿ ƒŒ¿ ƒÓ¿ ≈¿ ≈4¿ ≈[¿ ≈}¿ ≈û¿ ≈ª¿ ≈€¿ ≈¸¿ ∆¿ ∆<¿ ∆_¿ ∆{¿ ∆ü¿ ∆«¿ ∆Î¿ «¿ «;¿ «Y¿ «u¿ «ï¿ «ñ¿ «¿¿ «Â¿ «Ê¿ »¿ »:¿ »;¿ »k¿ »à¿ »â¿ »«¿ »Í¿ »Î¿ …*¿ …N¿ …O¿ …ç¿ …∞¿ …±¿ …Ò¿  ¿  ¿  b¿  ä¿  ã¿  ’¿  ¸¿  ˝¿ À'¿ ÀH¿ ÀI¿ Àê¿ À±¿ À≤¿ À¯¿ Ã¿ Ã ¿ ÃX¿ Ã}¿ Ã~¿ Ã¨¿ Ã’¿ Ã÷¿ Ã˛¿ Õ¿ Õ¿ ÕH¿ Õh¿ Õi¿ Õí¿ Õ±¿ Õ≤¿ Õ‚¿ Õˇ¿ Œ ¿ ŒF¿ Œh¿ Œi¿ Œí¿ ŒØ¿ Œ∞¿ Œ›¿ œ ¿ œ¿ œ9¿ œ^¿ œ_¿ œ°¿ œ»¿ œ…¿ –¿ –$¿ –%¿ –c¿ –Ü¿ –á¿ –»¿ –Ë¿ –È¿ —2¿ —H¿ —p¿ —q¿ —¿¿ “ ¿ “'¿ “(¿ “t¿ “è¿ “µ¿ “∂¿ “ı¿ ”¿ ”¿ ”c¿ ”p¿ ”ì¿ ”î¿ ”„¿ ‘¿ ‘¿ ‘E¿ ‘g    Å
CorElementTypeCorEventAttrCorFieldAttrCorGenericParamAttrCorMethodAttrCorMethodImplCorNativeTypeCorParamAttr	CorPEKindCorPinvokeMapCorPropertyAttrCorTokenTypeCorTypeAttrELEMENT_TYPE_ENDELEMENT_TYPE_VOIDELEMENT_TYPE_BOOLEANELEMENT_TYPE_CHARELEMENT_TYPE_I1ELEMENT_TYPE_U1ELEMENT_TYPE_I2ELEMENT_TYPE_U2ELEMENT_TYPE_I4ELEMENT_TYPE_U4ELEMENT_TYPE_I8ELEMENT_TYPE_U8ELEMENT_TYPE_R4ELEMENT_TYPE_R8ELEMENT_TYPE_STRINGELEMENT_TYPE_PTRELEMENT_TYPE_BYREFELEMENT_TYPE_VALUETYPEELEMENT_TYPE_CLASSELEMENT_TYPE_VARELEMENT_TYPE_ARRAYELEMENT_TYPE_GENERICINSTELEMENT_TYPE_TYPEDBYREFELEMENT_TYPE_IELEMENT_TYPE_UELEMENT_TYPE_FNPTRELEMENT_TYPE_OBJECTELEMENT_TYPE_SZARRAYELEMENT_TYPE_MVARELEMENT_TYPE_CMOD_REQDELEMENT_TYPE_CMOD_OPTELEMENT_TYPE_INTERNALELEMENT_TYPE_MAXELEMENT_TYPE_MODIFIERELEMENT_TYPE_SENTINELELEMENT_TYPE_PINNEDevSpecialNameevReservedMaskevRTSpecialNamefdFieldAccessMaskfdPrivateScope	fdPrivatefdFamANDAssem
fdAssemblyfdFamilyfdFamORAssemfdPublicfdStatic
fdInitOnly	fdLiteralfdNotSerializedfdSpecialNamefdPinvokeImplfdReservedMaskfdRTSpecialNamefdHasFieldMarshalfdHasDefaultfdHasFieldRVAgpVarianceMaskgpNonVariantgpCovariantgpContravariantgpSpecialConstraintMaskgpNoSpecialConstraintgpReferenceTypeConstraint gpNotNullableValueTypeConstraintgpDefaultConstructorConstraintmdMemberAccessMaskmdPrivateScope	mdPrivatemdFamANDAssemmdAssemmdFamilymdFamORAssemmdPublicmdStaticmdFinal	mdVirtualmdHideBySigmdVtableLayoutMaskmdReuseSlot	mdNewSlotmdCheckAccessOnOverride
mdAbstractmdSpecialNamemdPinvokeImplmdUnmanagedExportmdReservedMaskmdRTSpecialNamemdHasSecuritymdRequireSecObjectmiCodeTypeMaskmiILmiNativemiOPTIL	miRuntimemiManagedMaskmiUnmanaged	miManagedmiForwardRefmiPreserveSigmiInternalCallmiSynchronizedmiNoInliningmiAggressiveInliningmiNoOptimizationmiMaxMethodImplValNATIVE_TYPE_ENDNATIVE_TYPE_VOIDNATIVE_TYPE_BOOLEANNATIVE_TYPE_I1NATIVE_TYPE_U1NATIVE_TYPE_I2NATIVE_TYPE_U2NATIVE_TYPE_I4NATIVE_TYPE_U4NATIVE_TYPE_I8NATIVE_TYPE_U8NATIVE_TYPE_R4NATIVE_TYPE_R8NATIVE_TYPE_SYSCHARNATIVE_TYPE_VARIANTNATIVE_TYPE_CURRENCYNATIVE_TYPE_PTRNATIVE_TYPE_DECIMALNATIVE_TYPE_DATENATIVE_TYPE_BSTRNATIVE_TYPE_LPSTRNATIVE_TYPE_LPWSTRNATIVE_TYPE_LPTSTRNATIVE_TYPE_FIXEDSYSSTRINGNATIVE_TYPE_OBJECTREFNATIVE_TYPE_IUNKNOWNNATIVE_TYPE_IDISPATCHNATIVE_TYPE_STRUCTNATIVE_TYPE_INTFNATIVE_TYPE_SAFEARRAYNATIVE_TYPE_FIXEDARRAYNATIVE_TYPE_INTNATIVE_TYPE_UINTNATIVE_TYPE_NESTEDSTRUCTNATIVE_TYPE_BYVALSTRNATIVE_TYPE_ANSIBSTRNATIVE_TYPE_TBSTRNATIVE_TYPE_VARIANTBOOLNATIVE_TYPE_FUNCNATIVE_TYPE_ASANYNATIVE_TYPE_ARRAYNATIVE_TYPE_LPSTRUCTNATIVE_TYPE_CUSTOMMARSHALERNATIVE_TYPE_IINSPECTABLENATIVE_TYPE_HSTRINGNATIVE_TYPE_ERRORNATIVE_TYPE_MAXpdInpdOut
pdOptionalpdReservedMaskpdHasDefaultpdHasFieldMarshalpdUnusedpeNotpeILonlype32BitRequiredpe32Pluspe32Unmanagedpe32BitPreferred
pmNoManglepmCharSetMaskpmCharSetNotSpecpmCharSetAnsipmCharSetUnicodepmCharSetAutopmBestFitUseAssempmBestFitEnabledpmBestFitDisabledpmBestFitMaskpmThrowOnUnmappableCharUseAssempmThrowOnUnmappableCharEnabledpmThrowOnUnmappableCharDisabledpmThrowOnUnmappableCharMaskpmSupportsLastErrorpmCallConvMaskpmCallConvWinapipmCallConvCdeclpmCallConvStdcallpmCallConvThiscallpmCallConvFastcall
pmMaxValueprSpecialNameprReservedMaskprRTSpecialNameprHasDefaultprUnused	mdtModule
mdtTypeRef
mdtTypeDefmdtFieldDefmdtMethodDefmdtParamDefmdtInterfaceImplmdtMemberRefmdtCustomAttributemdtPermissionmdtSignaturemdtEventmdtPropertymdtModuleRefmdtTypeSpecmdtAssemblymdtAssemblyRefmdtFilemdtExportedTypemdtManifestResourcemdtGenericParammdtMethodSpecmdtGenericParamConstraint	mdtStringmdtNamemdtBaseTypetdVisibilityMasktdNotPublictdPublictdNestedPublictdNestedPrivatetdNestedFamilytdNestedAssemblytdNestedFamANDAssemtdNestedFamORAssemtdLayoutMasktdAutoLayouttdSequentialLayouttdExplicitLayouttdClassSemanticsMasktdClasstdInterface
tdAbstracttdSealedtdSpecialNametdImporttdSerializabletdWindowsRuntimetdStringFormatMasktdAnsiClasstdUnicodeClasstdAutoClasstdCustomFormatClasstdCustomFormatMasktdBeforeFieldInittdForwardertdReservedMasktdRTSpecialNametdHasSecurity  Z